// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class HelloDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Hello> {
} _Hello_default_instance_;
class PingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ping> {
} _Ping_default_instance_;
class PongDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pong> {
} _Pong_default_instance_;
class PeersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Peers> {
} _Peers_default_instance_;
class PeerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Peer> {
} _Peer_default_instance_;
class AccountThresholdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccountThreshold> {
} _AccountThreshold_default_instance_;
class SignerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signer> {
} _Signer_default_instance_;
class AccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Account> {
} _Account_default_instance_;
class UpgradeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeRequest> {
} _UpgradeRequest_default_instance_;
class UpgradeRequestEnvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpgradeRequestEnv> {
} _UpgradeRequestEnv_default_instance_;
class LedgerUpgradeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LedgerUpgrade> {
} _LedgerUpgrade_default_instance_;
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
} _Value_default_instance_;
class LedgerHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LedgerHeader> {
} _LedgerHeader_default_instance_;
class GetLedgersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLedgers> {
} _GetLedgers_default_instance_;
class LedgerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ledger> {
} _Ledger_default_instance_;
class LedgersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ledgers> {
} _Ledgers_default_instance_;
class CloseTimeRangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloseTimeRange> {
} _CloseTimeRange_default_instance_;
class AssetPropertyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AssetProperty> {
} _AssetProperty_default_instance_;
class DetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Detail> {
} _Detail_default_instance_;
class AssetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Asset> {
} _Asset_default_instance_;
class OperationCreateAccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationCreateAccount> {
} _OperationCreateAccount_default_instance_;
class OperationPaymentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationPayment> {
} _OperationPayment_default_instance_;
class OperationInitPaymentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationInitPayment> {
} _OperationInitPayment_default_instance_;
class OperationIssueAssetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationIssueAsset> {
} _OperationIssueAsset_default_instance_;
class UniqueAssetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UniqueAsset> {
} _UniqueAsset_default_instance_;
class OperationPaymentUniqueAssetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationPaymentUniqueAsset> {
} _OperationPaymentUniqueAsset_default_instance_;
class OperationRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationRecord> {
} _OperationRecord_default_instance_;
class OperationIssueUniqueAssetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationIssueUniqueAsset> {
} _OperationIssueUniqueAsset_default_instance_;
class OperationSetOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationSetOptions> {
} _OperationSetOptions_default_instance_;
class InputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Input> {
} _Input_default_instance_;
class OutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Output> {
} _Output_default_instance_;
class OperationProductionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationProduction> {
} _OperationProduction_default_instance_;
class OperationManageOrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationManageOrder> {
} _OperationManageOrder_default_instance_;
class OperationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Operation> {
} _Operation_default_instance_;
class TransactionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transaction> {
} _Transaction_default_instance_;
class SignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signature> {
} _Signature_default_instance_;
class TransactionEnvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionEnv> {
} _TransactionEnv_default_instance_;
class TransactionEnvWrapperDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionEnvWrapper> {
} _TransactionEnvWrapper_default_instance_;
class TransactionEnvStoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionEnvStore> {
} _TransactionEnvStore_default_instance_;
class SlaveVerifyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SlaveVerifyRequest> {
} _SlaveVerifyRequest_default_instance_;
class SlaveVerifyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SlaveVerifyResponse> {
} _SlaveVerifyResponse_default_instance_;
class GetTxHashSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTxHashSet> {
} _GetTxHashSet_default_instance_;
class TxHashSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxHashSet> {
} _TxHashSet_default_instance_;
class GetQuorumsetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetQuorumset> {
} _GetQuorumset_default_instance_;
class GetTxSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTxSet> {
} _GetTxSet_default_instance_;
class TxSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxSet> {
} _TxSet_default_instance_;
class DontHaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DontHave> {
} _DontHave_default_instance_;
class HashDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Hash> {
} _Hash_default_instance_;
class PbftPrePrepareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftPrePrepare> {
} _PbftPrePrepare_default_instance_;
class PbftPrepareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftPrepare> {
} _PbftPrepare_default_instance_;
class PbftCommitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftCommit> {
} _PbftCommit_default_instance_;
class PbftCheckPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftCheckPoint> {
} _PbftCheckPoint_default_instance_;
class PbftPreparedSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftPreparedSet> {
} _PbftPreparedSet_default_instance_;
class PbftViewChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftViewChange> {
} _PbftViewChange_default_instance_;
class PbftNewViewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftNewView> {
} _PbftNewView_default_instance_;
class PbftDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pbft> {
} _Pbft_default_instance_;
class PbftEnvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbftEnv> {
} _PbftEnv_default_instance_;
class EntryListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EntryList> {
} _EntryList_default_instance_;
class WsMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WsMessage> {
} _WsMessage_default_instance_;
class KeepOnlineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeepOnline> {
} _KeepOnline_default_instance_;
class KeepOnlineEnvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeepOnlineEnv> {
} _KeepOnlineEnv_default_instance_;
class PayLoadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PayLoad> {
} _PayLoad_default_instance_;
class PayLoadEnvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PayLoadEnv> {
} _PayLoadEnv_default_instance_;
class ChainHelloDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChainHello> {
} _ChainHello_default_instance_;
class ChainStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChainStatus> {
} _ChainStatus_default_instance_;
class ChainPeerOnlineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChainPeerOnline> {
} _ChainPeerOnline_default_instance_;
class ChainPeerOfflineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChainPeerOffline> {
} _ChainPeerOffline_default_instance_;
class ChainPeerMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChainPeerMessage> {
} _ChainPeerMessage_default_instance_;
class ChainTxStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChainTxStatus> {
} _ChainTxStatus_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[69];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, ledger_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, overlayversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, bubiversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, listeningport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, network_type_),
  3,
  4,
  0,
  5,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, nonce_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, nonce_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peers, peers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, num_failures_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountThreshold, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountThreshold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountThreshold, master_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountThreshold, low_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountThreshold, med_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountThreshold, high_threshold_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signer, weight_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, account_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, previous_ledger_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, previous_tx_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, account_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, assets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, tx_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, thresholds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, signers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, metadata_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, unique_asset_),
  4,
  5,
  0,
  1,
  ~0u,
  6,
  3,
  ~0u,
  2,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, ledger_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, add_validator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, new_ledger_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequest, start_time_),
  0,
  2,
  3,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequestEnv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequestEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequestEnv, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRequestEnv, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgrade, new_ledger_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgrade, new_base_fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgrade, new_base_reserve_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, hash_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, close_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, ledger_upgrade_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, parent_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, transaction_tree_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, account_tree_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, ledger_sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, consensus_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, base_fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, base_reserve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, ledger_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeader, tx_count_),
  0,
  1,
  2,
  5,
  4,
  3,
  6,
  7,
  9,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, ledger_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, ledger_num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledger, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledger, ledger_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledger, transaction_envs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, ledger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, sync_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, max_ledgers_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseTimeRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseTimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseTimeRange, mintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseTimeRange, maxtime_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetProperty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetProperty, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetProperty, issuer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetProperty, code_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detail, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detail, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detail, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Detail, ext_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, details_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, dest_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, init_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, thresholds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, signers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationCreateAccount, account_metadata_),
  0,
  3,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPayment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPayment, destaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPayment, asset_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInitPayment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInitPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInitPayment, destaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationInitPayment, asset_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationIssueAsset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationIssueAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationIssueAsset, asset_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueAsset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueAsset, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueAsset, detailed_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPaymentUniqueAsset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPaymentUniqueAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPaymentUniqueAsset, destaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationPaymentUniqueAsset, asset_pro_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRecord, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRecord, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationRecord, ext_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationIssueUniqueAsset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationIssueUniqueAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationIssueUniqueAsset, asset_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, master_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, low_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, med_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, high_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, signers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, account_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationSetOptions, account_metadata_version_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, metadata_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, metadata_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationProduction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationProduction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationProduction, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationProduction, outputs_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationManageOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationManageOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, create_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, payment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, issue_asset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, setoptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, manage_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, init_payment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, production_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, issue_unique_asset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, payment_unique_asset_),
  12,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, close_time_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, operations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, metadata_),
  0,
  4,
  3,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, sign_data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnv, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnv, signatures_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvWrapper, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvWrapper, transaction_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvWrapper, suggest_ledger_seq_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, transaction_env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, error_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, ledger_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionEnvStore, close_time_),
  1,
  4,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyRequest, peer_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyRequest, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyRequest, txset_hash_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, peer_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, txset_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, peer_message_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, transaction_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, transaction_env_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveVerifyResponse, address_),
  0,
  5,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxHashSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxHashSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxHashSet, hash_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHashSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHashSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHashSet, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHashSet, previous_ledger_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxHashSet, hashs_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuorumset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuorumset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuorumset, hash_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxSet, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTxSet, hashs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSet, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSet, previous_ledger_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSet, tran_envs_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, hash_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hash, hash_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, view_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, value_digest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrePrepare, block_seq_),
  2,
  3,
  4,
  1,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrepare, view_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrepare, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrepare, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPrepare, value_digest_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCommit, view_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCommit, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCommit, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCommit, value_digest_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCheckPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCheckPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCheckPoint, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCheckPoint, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftCheckPoint, state_digest_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPreparedSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPreparedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPreparedSet, pre_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftPreparedSet, prepare_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, view_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, checkpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, prepared_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftViewChange, replica_id_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, view_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, replica_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, view_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftNewView, pre_prepares_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, round_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, validator_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, pre_prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, prepare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, checkpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, view_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pbft, new_view_),
  7,
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftEnv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftEnv, pbft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbftEnv, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryList, entry_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsMessage, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsMessage, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsMessage, data_),
  1,
  3,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnline, src_peer_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnline, payload_seq_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnlineEnv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnlineEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnlineEnv, keeponline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepOnlineEnv, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoad, src_peer_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoad, des_peer_addrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoad, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoad, data_),
  0,
  ~0u,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoadEnv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoadEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoadEnv, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLoadEnv, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, api_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, timestamp_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, self_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, ledger_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, bubi_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, timestamp_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOnline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOnline, peer_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOnline, peer_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOnline, peer_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOnline, timestamp_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOffline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOffline, peer_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerOffline, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, src_peer_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, des_peer_addrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, data_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, tx_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, source_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, source_account_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, ledger_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, new_account_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, error_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, timestamp_),
  4,
  0,
  1,
  3,
  6,
  7,
  5,
  2,
  8,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(Hello)},
  { 17, 23, sizeof(Ping)},
  { 24, 30, sizeof(Pong)},
  { 31, 37, sizeof(Peers)},
  { 38, 46, sizeof(Peer)},
  { 49, 58, sizeof(AccountThreshold)},
  { 62, 69, sizeof(Signer)},
  { 71, 87, sizeof(Account)},
  { 98, 109, sizeof(UpgradeRequest)},
  { 115, 122, sizeof(UpgradeRequestEnv)},
  { 124, 132, sizeof(LedgerUpgrade)},
  { 135, 143, sizeof(Value)},
  { 146, 161, sizeof(LedgerHeader)},
  { 171, 178, sizeof(GetLedgers)},
  { 180, 187, sizeof(Ledger)},
  { 189, 197, sizeof(Ledgers)},
  { 200, 207, sizeof(CloseTimeRange)},
  { 209, 217, sizeof(AssetProperty)},
  { 220, 229, sizeof(Detail)},
  { 233, 241, sizeof(Asset)},
  { 244, 254, sizeof(OperationCreateAccount)},
  { 259, 266, sizeof(OperationPayment)},
  { 268, 275, sizeof(OperationInitPayment)},
  { 277, 283, sizeof(OperationIssueAsset)},
  { 284, 291, sizeof(UniqueAsset)},
  { 293, 300, sizeof(OperationPaymentUniqueAsset)},
  { 302, 310, sizeof(OperationRecord)},
  { 313, 319, sizeof(OperationIssueUniqueAsset)},
  { 320, 332, sizeof(OperationSetOptions)},
  { 339, 347, sizeof(Input)},
  { 350, 357, sizeof(Output)},
  { 359, 366, sizeof(OperationProduction)},
  { 368, 373, sizeof(OperationManageOrder)},
  { 373, 391, sizeof(Operation)},
  { 404, 415, sizeof(Transaction)},
  { 421, 428, sizeof(Signature)},
  { 430, 437, sizeof(TransactionEnv)},
  { 439, 446, sizeof(TransactionEnvWrapper)},
  { 448, 458, sizeof(TransactionEnvStore)},
  { 463, 471, sizeof(SlaveVerifyRequest)},
  { 474, 486, sizeof(SlaveVerifyResponse)},
  { 493, 499, sizeof(GetTxHashSet)},
  { 500, 508, sizeof(TxHashSet)},
  { 511, 517, sizeof(GetQuorumset)},
  { 518, 525, sizeof(GetTxSet)},
  { 527, 535, sizeof(TxSet)},
  { 538, 545, sizeof(DontHave)},
  { 547, 553, sizeof(Hash)},
  { 554, 565, sizeof(PbftPrePrepare)},
  { 571, 580, sizeof(PbftPrepare)},
  { 584, 593, sizeof(PbftCommit)},
  { 597, 605, sizeof(PbftCheckPoint)},
  { 608, 615, sizeof(PbftPreparedSet)},
  { 617, 627, sizeof(PbftViewChange)},
  { 632, 642, sizeof(PbftNewView)},
  { 647, 661, sizeof(Pbft)},
  { 670, 677, sizeof(PbftEnv)},
  { 679, 685, sizeof(EntryList)},
  { 686, 695, sizeof(WsMessage)},
  { 699, 706, sizeof(KeepOnline)},
  { 708, 715, sizeof(KeepOnlineEnv)},
  { 717, 726, sizeof(PayLoad)},
  { 730, 737, sizeof(PayLoadEnv)},
  { 739, 746, sizeof(ChainHello)},
  { 748, 757, sizeof(ChainStatus)},
  { 761, 770, sizeof(ChainPeerOnline)},
  { 774, 781, sizeof(ChainPeerOffline)},
  { 783, 791, sizeof(ChainPeerMessage)},
  { 794, 808, sizeof(ChainTxStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Hello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pong_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Peers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccountThreshold_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpgradeRequestEnv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LedgerUpgrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LedgerHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLedgers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ledger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ledgers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloseTimeRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AssetProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Detail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Asset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationCreateAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationPayment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationInitPayment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationIssueAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UniqueAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationPaymentUniqueAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationIssueUniqueAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationSetOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Input_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationProduction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationManageOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Operation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionEnv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionEnvWrapper_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionEnvStore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SlaveVerifyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SlaveVerifyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTxHashSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxHashSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetQuorumset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTxSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DontHave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Hash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftPrePrepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftPrepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftCheckPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftPreparedSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftViewChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftNewView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pbft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbftEnv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WsMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeepOnline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeepOnlineEnv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PayLoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PayLoadEnv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChainHello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChainStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChainPeerOnline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChainPeerOffline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChainPeerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChainTxStatus_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 69);
}

}  // namespace

void TableStruct::Shutdown() {
  _Hello_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Ping_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Pong_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Peers_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Peer_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AccountThreshold_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Signer_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Account_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _UpgradeRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _UpgradeRequestEnv_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _LedgerUpgrade_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Value_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _LedgerHeader_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GetLedgers_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Ledger_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Ledgers_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CloseTimeRange_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _AssetProperty_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Detail_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _Asset_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _OperationCreateAccount_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _OperationPayment_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _OperationInitPayment_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _OperationIssueAsset_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _UniqueAsset_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _OperationPaymentUniqueAsset_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _OperationRecord_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _OperationIssueUniqueAsset_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _OperationSetOptions_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _Input_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _Output_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _OperationProduction_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _OperationManageOrder_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _Operation_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _Transaction_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _Signature_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _TransactionEnv_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _TransactionEnvWrapper_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _TransactionEnvStore_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _SlaveVerifyRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _SlaveVerifyResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _GetTxHashSet_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _TxHashSet_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _GetQuorumset_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _GetTxSet_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _TxSet_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _DontHave_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _Hash_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _PbftPrePrepare_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _PbftPrepare_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _PbftCommit_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _PbftCheckPoint_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _PbftPreparedSet_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _PbftViewChange_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _PbftNewView_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _Pbft_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _PbftEnv_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _EntryList_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _WsMessage_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _KeepOnline_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _KeepOnlineEnv_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _PayLoad_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _PayLoadEnv_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _ChainHello_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _ChainStatus_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _ChainPeerOnline_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _ChainPeerOffline_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _ChainPeerMessage_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _ChainTxStatus_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Hello_default_instance_.DefaultConstruct();
  _Ping_default_instance_.DefaultConstruct();
  _Pong_default_instance_.DefaultConstruct();
  _Peers_default_instance_.DefaultConstruct();
  _Peer_default_instance_.DefaultConstruct();
  _AccountThreshold_default_instance_.DefaultConstruct();
  _Signer_default_instance_.DefaultConstruct();
  _Account_default_instance_.DefaultConstruct();
  _UpgradeRequest_default_instance_.DefaultConstruct();
  _UpgradeRequestEnv_default_instance_.DefaultConstruct();
  _LedgerUpgrade_default_instance_.DefaultConstruct();
  _Value_default_instance_.DefaultConstruct();
  _LedgerHeader_default_instance_.DefaultConstruct();
  _GetLedgers_default_instance_.DefaultConstruct();
  _Ledger_default_instance_.DefaultConstruct();
  _Ledgers_default_instance_.DefaultConstruct();
  _CloseTimeRange_default_instance_.DefaultConstruct();
  _AssetProperty_default_instance_.DefaultConstruct();
  _Detail_default_instance_.DefaultConstruct();
  _Asset_default_instance_.DefaultConstruct();
  _OperationCreateAccount_default_instance_.DefaultConstruct();
  _OperationPayment_default_instance_.DefaultConstruct();
  _OperationInitPayment_default_instance_.DefaultConstruct();
  _OperationIssueAsset_default_instance_.DefaultConstruct();
  _UniqueAsset_default_instance_.DefaultConstruct();
  _OperationPaymentUniqueAsset_default_instance_.DefaultConstruct();
  _OperationRecord_default_instance_.DefaultConstruct();
  _OperationIssueUniqueAsset_default_instance_.DefaultConstruct();
  _OperationSetOptions_default_instance_.DefaultConstruct();
  _Input_default_instance_.DefaultConstruct();
  _Output_default_instance_.DefaultConstruct();
  _OperationProduction_default_instance_.DefaultConstruct();
  _OperationManageOrder_default_instance_.DefaultConstruct();
  _Operation_default_instance_.DefaultConstruct();
  _Transaction_default_instance_.DefaultConstruct();
  _Signature_default_instance_.DefaultConstruct();
  _TransactionEnv_default_instance_.DefaultConstruct();
  _TransactionEnvWrapper_default_instance_.DefaultConstruct();
  _TransactionEnvStore_default_instance_.DefaultConstruct();
  _SlaveVerifyRequest_default_instance_.DefaultConstruct();
  _SlaveVerifyResponse_default_instance_.DefaultConstruct();
  _GetTxHashSet_default_instance_.DefaultConstruct();
  _TxHashSet_default_instance_.DefaultConstruct();
  _GetQuorumset_default_instance_.DefaultConstruct();
  _GetTxSet_default_instance_.DefaultConstruct();
  _TxSet_default_instance_.DefaultConstruct();
  _DontHave_default_instance_.DefaultConstruct();
  _Hash_default_instance_.DefaultConstruct();
  _PbftPrePrepare_default_instance_.DefaultConstruct();
  _PbftPrepare_default_instance_.DefaultConstruct();
  _PbftCommit_default_instance_.DefaultConstruct();
  _PbftCheckPoint_default_instance_.DefaultConstruct();
  _PbftPreparedSet_default_instance_.DefaultConstruct();
  _PbftViewChange_default_instance_.DefaultConstruct();
  _PbftNewView_default_instance_.DefaultConstruct();
  _Pbft_default_instance_.DefaultConstruct();
  _PbftEnv_default_instance_.DefaultConstruct();
  _EntryList_default_instance_.DefaultConstruct();
  _WsMessage_default_instance_.DefaultConstruct();
  _KeepOnline_default_instance_.DefaultConstruct();
  _KeepOnlineEnv_default_instance_.DefaultConstruct();
  _PayLoad_default_instance_.DefaultConstruct();
  _PayLoadEnv_default_instance_.DefaultConstruct();
  _ChainHello_default_instance_.DefaultConstruct();
  _ChainStatus_default_instance_.DefaultConstruct();
  _ChainPeerOnline_default_instance_.DefaultConstruct();
  _ChainPeerOffline_default_instance_.DefaultConstruct();
  _ChainPeerMessage_default_instance_.DefaultConstruct();
  _ChainTxStatus_default_instance_.DefaultConstruct();
  _Account_default_instance_.get_mutable()->thresholds_ = const_cast< ::protocol::AccountThreshold*>(
      ::protocol::AccountThreshold::internal_default_instance());
  _UpgradeRequestEnv_default_instance_.get_mutable()->request_ = const_cast< ::protocol::UpgradeRequest*>(
      ::protocol::UpgradeRequest::internal_default_instance());
  _UpgradeRequestEnv_default_instance_.get_mutable()->signature_ = const_cast< ::protocol::Signature*>(
      ::protocol::Signature::internal_default_instance());
  _Value_default_instance_.get_mutable()->ledger_upgrade_ = const_cast< ::protocol::LedgerUpgrade*>(
      ::protocol::LedgerUpgrade::internal_default_instance());
  _LedgerHeader_default_instance_.get_mutable()->consensus_value_ = const_cast< ::protocol::Value*>(
      ::protocol::Value::internal_default_instance());
  _Ledger_default_instance_.get_mutable()->ledger_header_ = const_cast< ::protocol::LedgerHeader*>(
      ::protocol::LedgerHeader::internal_default_instance());
  _Asset_default_instance_.get_mutable()->property_ = const_cast< ::protocol::AssetProperty*>(
      ::protocol::AssetProperty::internal_default_instance());
  _OperationCreateAccount_default_instance_.get_mutable()->thresholds_ = const_cast< ::protocol::AccountThreshold*>(
      ::protocol::AccountThreshold::internal_default_instance());
  _OperationPayment_default_instance_.get_mutable()->asset_ = const_cast< ::protocol::Asset*>(
      ::protocol::Asset::internal_default_instance());
  _OperationInitPayment_default_instance_.get_mutable()->asset_ = const_cast< ::protocol::Asset*>(
      ::protocol::Asset::internal_default_instance());
  _OperationIssueAsset_default_instance_.get_mutable()->asset_ = const_cast< ::protocol::Asset*>(
      ::protocol::Asset::internal_default_instance());
  _UniqueAsset_default_instance_.get_mutable()->property_ = const_cast< ::protocol::AssetProperty*>(
      ::protocol::AssetProperty::internal_default_instance());
  _OperationPaymentUniqueAsset_default_instance_.get_mutable()->asset_pro_ = const_cast< ::protocol::AssetProperty*>(
      ::protocol::AssetProperty::internal_default_instance());
  _OperationIssueUniqueAsset_default_instance_.get_mutable()->asset_ = const_cast< ::protocol::UniqueAsset*>(
      ::protocol::UniqueAsset::internal_default_instance());
  _Operation_default_instance_.get_mutable()->create_account_ = const_cast< ::protocol::OperationCreateAccount*>(
      ::protocol::OperationCreateAccount::internal_default_instance());
  _Operation_default_instance_.get_mutable()->payment_ = const_cast< ::protocol::OperationPayment*>(
      ::protocol::OperationPayment::internal_default_instance());
  _Operation_default_instance_.get_mutable()->issue_asset_ = const_cast< ::protocol::OperationIssueAsset*>(
      ::protocol::OperationIssueAsset::internal_default_instance());
  _Operation_default_instance_.get_mutable()->setoptions_ = const_cast< ::protocol::OperationSetOptions*>(
      ::protocol::OperationSetOptions::internal_default_instance());
  _Operation_default_instance_.get_mutable()->manage_order_ = const_cast< ::protocol::OperationManageOrder*>(
      ::protocol::OperationManageOrder::internal_default_instance());
  _Operation_default_instance_.get_mutable()->init_payment_ = const_cast< ::protocol::OperationInitPayment*>(
      ::protocol::OperationInitPayment::internal_default_instance());
  _Operation_default_instance_.get_mutable()->production_ = const_cast< ::protocol::OperationProduction*>(
      ::protocol::OperationProduction::internal_default_instance());
  _Operation_default_instance_.get_mutable()->record_ = const_cast< ::protocol::OperationRecord*>(
      ::protocol::OperationRecord::internal_default_instance());
  _Operation_default_instance_.get_mutable()->issue_unique_asset_ = const_cast< ::protocol::OperationIssueUniqueAsset*>(
      ::protocol::OperationIssueUniqueAsset::internal_default_instance());
  _Operation_default_instance_.get_mutable()->payment_unique_asset_ = const_cast< ::protocol::OperationPaymentUniqueAsset*>(
      ::protocol::OperationPaymentUniqueAsset::internal_default_instance());
  _Transaction_default_instance_.get_mutable()->close_time_range_ = const_cast< ::protocol::CloseTimeRange*>(
      ::protocol::CloseTimeRange::internal_default_instance());
  _TransactionEnv_default_instance_.get_mutable()->transaction_ = const_cast< ::protocol::Transaction*>(
      ::protocol::Transaction::internal_default_instance());
  _TransactionEnvWrapper_default_instance_.get_mutable()->transaction_env_ = const_cast< ::protocol::TransactionEnv*>(
      ::protocol::TransactionEnv::internal_default_instance());
  _TransactionEnvStore_default_instance_.get_mutable()->transaction_env_ = const_cast< ::protocol::TransactionEnv*>(
      ::protocol::TransactionEnv::internal_default_instance());
  _PbftPrePrepare_default_instance_.get_mutable()->value_ = const_cast< ::protocol::Value*>(
      ::protocol::Value::internal_default_instance());
  _PbftPreparedSet_default_instance_.get_mutable()->pre_prepare_ = const_cast< ::protocol::PbftEnv*>(
      ::protocol::PbftEnv::internal_default_instance());
  _Pbft_default_instance_.get_mutable()->pre_prepare_ = const_cast< ::protocol::PbftPrePrepare*>(
      ::protocol::PbftPrePrepare::internal_default_instance());
  _Pbft_default_instance_.get_mutable()->prepare_ = const_cast< ::protocol::PbftPrepare*>(
      ::protocol::PbftPrepare::internal_default_instance());
  _Pbft_default_instance_.get_mutable()->commit_ = const_cast< ::protocol::PbftCommit*>(
      ::protocol::PbftCommit::internal_default_instance());
  _Pbft_default_instance_.get_mutable()->checkpoint_ = const_cast< ::protocol::PbftCheckPoint*>(
      ::protocol::PbftCheckPoint::internal_default_instance());
  _Pbft_default_instance_.get_mutable()->view_change_ = const_cast< ::protocol::PbftViewChange*>(
      ::protocol::PbftViewChange::internal_default_instance());
  _Pbft_default_instance_.get_mutable()->new_view_ = const_cast< ::protocol::PbftNewView*>(
      ::protocol::PbftNewView::internal_default_instance());
  _PbftEnv_default_instance_.get_mutable()->pbft_ = const_cast< ::protocol::Pbft*>(
      ::protocol::Pbft::internal_default_instance());
  _PbftEnv_default_instance_.get_mutable()->signature_ = const_cast< ::protocol::Signature*>(
      ::protocol::Signature::internal_default_instance());
  _KeepOnlineEnv_default_instance_.get_mutable()->keeponline_ = const_cast< ::protocol::KeepOnline*>(
      ::protocol::KeepOnline::internal_default_instance());
  _KeepOnlineEnv_default_instance_.get_mutable()->signature_ = const_cast< ::protocol::Signature*>(
      ::protocol::Signature::internal_default_instance());
  _PayLoadEnv_default_instance_.get_mutable()->payload_ = const_cast< ::protocol::PayLoad*>(
      ::protocol::PayLoad::internal_default_instance());
  _PayLoadEnv_default_instance_.get_mutable()->signature_ = const_cast< ::protocol::Signature*>(
      ::protocol::Signature::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\022\010protocol\"\211\001\n\005Hello\022\026\n\016l"
      "edger_version\030\001 \002(\r\022\026\n\016overlayVersion\030\002 "
      "\002(\r\022\023\n\013bubiVersion\030\003 \002(\t\022\025\n\rlisteningPor"
      "t\030\004 \002(\005\022\016\n\006nodeId\030\005 \002(\t\022\024\n\014network_type\030"
      "\006 \002(\t\"\025\n\004Ping\022\r\n\005nonce\030\001 \002(\004\"\025\n\004Pong\022\r\n\005"
      "nonce\030\001 \002(\004\"&\n\005Peers\022\035\n\005peers\030\002 \003(\0132\016.pr"
      "otocol.Peer\"6\n\004Peer\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030"
      "\002 \002(\005\022\024\n\014num_failures\030\003 \002(\005\"o\n\020AccountTh"
      "reshold\022\025\n\rmaster_weight\030\001 \002(\r\022\025\n\rlow_th"
      "reshold\030\002 \002(\r\022\025\n\rmed_threshold\030\003 \002(\r\022\026\n\016"
      "high_threshold\030\004 \002(\r\")\n\006Signer\022\017\n\007addres"
      "s\030\001 \002(\t\022\016\n\006weight\030\002 \002(\r\"\344\002\n\007Account\022\027\n\017a"
      "ccount_balance\030\001 \002(\003\022\033\n\023previous_ledger_"
      "seq\030\002 \002(\003\022\030\n\020previous_tx_hash\030\003 \002(\014\022\027\n\017a"
      "ccount_address\030\004 \002(\t\022\037\n\006assets\030\005 \003(\0132\017.p"
      "rotocol.Asset\022\016\n\006tx_seq\030\006 \002(\003\022.\n\nthresho"
      "lds\030\007 \002(\0132\032.protocol.AccountThreshold\022!\n"
      "\007signers\030\010 \003(\0132\020.protocol.Signer\022\020\n\010meta"
      "data\030\t \002(\014\022\030\n\020metadata_version\030\n \001(\003\022+\n\014"
      "unique_asset\030\013 \003(\0132\025.protocol.UniqueAsse"
      "t\"\023\n\005Limit\022\n\n\006SIGNER\020d\"\211\001\n\016UpgradeReques"
      "t\022\n\n\002id\030\001 \002(\t\022\014\n\004time\030\002 \002(\004\022\026\n\016ledger_ve"
      "rsion\030\003 \002(\r\022\025\n\radd_validator\030\004 \001(\t\022\032\n\022ne"
      "w_ledger_version\030\005 \001(\r\022\022\n\nstart_time\030\006 \002"
      "(\004\"f\n\021UpgradeRequestEnv\022)\n\007request\030\001 \002(\013"
      "2\030.protocol.UpgradeRequest\022&\n\tsignature\030"
      "\002 \002(\0132\023.protocol.Signature\"[\n\rLedgerUpgr"
      "ade\022\032\n\022new_ledger_version\030\001 \001(\r\022\024\n\014new_b"
      "ase_fee\030\002 \001(\r\022\030\n\020new_base_reserve\030\003 \001(\r\""
      "^\n\005Value\022\020\n\010hash_set\030\001 \002(\014\022\022\n\nclose_time"
      "\030\002 \002(\004\022/\n\016ledger_upgrade\030\003 \001(\0132\027.protoco"
      "l.LedgerUpgrade\"\200\002\n\014LedgerHeader\022\023\n\013pare"
      "nt_hash\030\001 \002(\014\022\035\n\025transaction_tree_hash\030\002"
      " \002(\014\022\031\n\021account_tree_hash\030\003 \002(\014\022\027\n\017ledge"
      "r_sequence\030\004 \002(\003\022(\n\017consensus_value\030\005 \002("
      "\0132\017.protocol.Value\022\014\n\004hash\030\006 \002(\014\022\020\n\010base"
      "_fee\030\007 \002(\r\022\024\n\014base_reserve\030\010 \002(\r\022\026\n\016ledg"
      "er_version\030\t \002(\r\022\020\n\010tx_count\030\n \002(\003\"4\n\nGe"
      "tLedgers\022\022\n\nledger_seq\030\001 \002(\003\022\022\n\nledger_n"
      "um\030\002 \001(\003\"k\n\006Ledger\022-\n\rledger_header\030\001 \002("
      "\0132\026.protocol.LedgerHeader\0222\n\020transaction"
      "_envs\030\002 \003(\0132\030.protocol.TransactionEnv\"\314\001"
      "\n\007Ledgers\022 \n\006ledger\030\001 \003(\0132\020.protocol.Led"
      "ger\022-\n\tsync_code\030\002 \001(\0162\032.protocol.Ledger"
      "s.SyncCode\022\023\n\013max_ledgers\030\003 \001(\005\"[\n\010SyncC"
      "ode\022\006\n\002OK\020\000\022\017\n\013OUT_OF_SYNC\020\001\022\022\n\016OUT_OF_L"
      "EDGERS\020\002\022\010\n\004BUSY\020\003\022\n\n\006REFUSE\020\004\022\014\n\010INTERN"
      "AL\020\005\"2\n\016CloseTimeRange\022\017\n\007minTime\030\001 \002(\003\022"
      "\017\n\007maxTime\030\002 \002(\003\"\202\001\n\rAssetProperty\022*\n\004ty"
      "pe\030\001 \002(\0162\034.protocol.AssetProperty.Type\022\016"
      "\n\006issuer\030\002 \002(\t\022\014\n\004code\030\003 \002(\t\"\'\n\004Type\022\n\n\006"
      "NATIVE\020\000\022\007\n\003IOU\020\001\022\n\n\006UNIQUE\020\002\"D\n\006Detail\022"
      "\016\n\006amount\030\001 \002(\003\022\r\n\005start\030\002 \002(\003\022\016\n\006length"
      "\030\003 \002(\003\022\013\n\003ext\030\004 \002(\t\"e\n\005Asset\022)\n\010property"
      "\030\001 \002(\0132\027.protocol.AssetProperty\022\016\n\006amoun"
      "t\030\002 \002(\003\022!\n\007details\030\003 \003(\0132\020.protocol.Deta"
      "il\"\261\001\n\026OperationCreateAccount\022\024\n\014dest_ad"
      "dress\030\001 \002(\t\022\024\n\014init_balance\030\002 \002(\003\022.\n\nthr"
      "esholds\030\003 \001(\0132\032.protocol.AccountThreshol"
      "d\022!\n\007signers\030\004 \003(\0132\020.protocol.Signer\022\030\n\020"
      "account_metadata\030\005 \001(\014\"G\n\020OperationPayme"
      "nt\022\023\n\013destAddress\030\001 \002(\t\022\036\n\005asset\030\002 \002(\0132\017"
      ".protocol.Asset\"K\n\024OperationInitPayment\022"
      "\023\n\013destAddress\030\001 \002(\t\022\036\n\005asset\030\002 \002(\0132\017.pr"
      "otocol.Asset\"5\n\023OperationIssueAsset\022\036\n\005a"
      "sset\030\001 \002(\0132\017.protocol.Asset\"J\n\013UniqueAss"
      "et\022)\n\010property\030\001 \002(\0132\027.protocol.AssetPro"
      "perty\022\020\n\010detailed\030\002 \002(\014\"^\n\033OperationPaym"
      "entUniqueAsset\022\023\n\013destAddress\030\001 \002(\t\022*\n\ta"
      "sset_pro\030\002 \002(\0132\027.protocol.AssetProperty\""
      ";\n\017OperationRecord\022\017\n\007address\030\001 \001(\t\022\n\n\002i"
      "d\030\002 \002(\t\022\013\n\003ext\030\003 \002(\014\"A\n\031OperationIssueUn"
      "iqueAsset\022$\n\005asset\030\001 \002(\0132\025.protocol.Uniq"
      "ueAsset\"\321\001\n\023OperationSetOptions\022\025\n\rmaste"
      "r_weight\030\001 \001(\r\022\025\n\rlow_threshold\030\002 \001(\r\022\025\n"
      "\rmed_threshold\030\003 \001(\r\022\026\n\016high_threshold\030\004"
      " \001(\r\022!\n\007signers\030\005 \003(\0132\020.protocol.Signer\022"
      "\030\n\020account_metadata\030\006 \001(\014\022 \n\030account_met"
      "adata_version\030\007 \001(\003\"6\n\005Input\022\014\n\004hash\030\001 \002"
      "(\014\022\r\n\005index\030\002 \002(\003\022\020\n\010metadata\030\003 \001(\014\"+\n\006O"
      "utput\022\017\n\007address\030\001 \002(\t\022\020\n\010metadata\030\002 \001(\014"
      "\"Y\n\023OperationProduction\022\037\n\006inputs\030\001 \003(\0132"
      "\017.protocol.Input\022!\n\007outputs\030\002 \003(\0132\020.prot"
      "ocol.Output\"\026\n\024OperationManageOrder\"\247\006\n\t"
      "Operation\022&\n\004type\030\001 \002(\0162\030.protocol.Opera"
      "tion.Type\022\026\n\016source_address\030\002 \001(\t\0228\n\016cre"
      "ate_account\030\003 \001(\0132 .protocol.OperationCr"
      "eateAccount\022+\n\007payment\030\004 \001(\0132\032.protocol."
      "OperationPayment\0222\n\013issue_asset\030\005 \001(\0132\035."
      "protocol.OperationIssueAsset\0221\n\nsetoptio"
      "ns\030\006 \001(\0132\035.protocol.OperationSetOptions\022"
      "4\n\014manage_order\030\007 \001(\0132\036.protocol.Operati"
      "onManageOrder\0224\n\014init_payment\030\010 \001(\0132\036.pr"
      "otocol.OperationInitPayment\0221\n\nproductio"
      "n\030\t \001(\0132\035.protocol.OperationProduction\022\020"
      "\n\010metadata\030\n \001(\014\022)\n\006record\030\013 \001(\0132\031.proto"
      "col.OperationRecord\022\?\n\022issue_unique_asse"
      "t\030\014 \001(\0132#.protocol.OperationIssueUniqueA"
      "sset\022C\n\024payment_unique_asset\030\r \001(\0132%.pro"
      "tocol.OperationPaymentUniqueAsset\"\251\001\n\004Ty"
      "pe\022\022\n\016CREATE_ACCOUNT\020\000\022\013\n\007PAYMENT\020\001\022\017\n\013I"
      "SSUE_ASSET\020\002\022\017\n\013SET_OPTIONS\020\004\022\020\n\014INIT_PA"
      "YMENT\020\005\022\016\n\nPRODUCTION\020\006\022\026\n\022ISSUE_UNIQUE_"
      "ASSET\020\007\022\030\n\024PAYMENT_UNIQUE_ASSET\020\010\022\n\n\006REC"
      "ORD\020\t\"\324\001\n\013Transaction\022\026\n\016source_address\030"
      "\001 \002(\t\022\013\n\003fee\030\002 \002(\r\022\027\n\017sequence_number\030\003 "
      "\002(\003\0222\n\020close_time_range\030\004 \001(\0132\030.protocol"
      ".CloseTimeRange\022\'\n\noperations\030\005 \003(\0132\023.pr"
      "otocol.Operation\022\020\n\010metadata\030\006 \001(\014\"\030\n\005Li"
      "mit\022\017\n\nOPERATIONS\020\350\007\"2\n\tSignature\022\022\n\npub"
      "lic_key\030\001 \002(\t\022\021\n\tsign_data\030\002 \002(\014\"}\n\016Tran"
      "sactionEnv\022*\n\013transaction\030\001 \002(\0132\025.protoc"
      "ol.Transaction\022\'\n\nsignatures\030\002 \003(\0132\023.pro"
      "tocol.Signature\"\026\n\005Limit\022\r\n\tSIGNATURE\020d\""
      "f\n\025TransactionEnvWrapper\0221\n\017transaction_"
      "env\030\001 \002(\0132\030.protocol.TransactionEnv\022\032\n\022s"
      "uggest_ledger_seq\030\002 \001(\003\"\230\001\n\023TransactionE"
      "nvStore\0221\n\017transaction_env\030\001 \002(\0132\030.proto"
      "col.TransactionEnv\022\022\n\nerror_code\030\002 \001(\005\022\022"
      "\n\nerror_desc\030\003 \001(\014\022\022\n\nledger_seq\030\004 \001(\003\022\022"
      "\n\nclose_time\030\005 \001(\003\"O\n\022SlaveVerifyRequest"
      "\022\024\n\014peer_message\030\001 \002(\014\022\017\n\007peer_id\030\002 \002(\003\022"
      "\022\n\ntxset_hash\030\003 \001(\014\"\264\001\n\023SlaveVerifyRespo"
      "nse\022\024\n\014peer_message\030\001 \002(\014\022\017\n\007peer_id\030\002 \001"
      "(\003\022\022\n\ntxset_hash\030\003 \001(\014\022\031\n\021peer_message_h"
      "ash\030\004 \002(\014\022\030\n\020transaction_hash\030\005 \002(\014\022\034\n\024t"
      "ransaction_env_hash\030\006 \002(\014\022\017\n\007address\030\007 \003"
      "(\t\"\034\n\014GetTxHashSet\022\014\n\004hash\030\001 \002(\014\"F\n\tTxHa"
      "shSet\022\014\n\004hash\030\001 \002(\014\022\034\n\024previous_ledger_h"
      "ash\030\002 \002(\014\022\r\n\005hashs\030\003 \003(\014\"\034\n\014GetQuorumset"
      "\022\014\n\004hash\030\001 \002(\014\"\'\n\010GetTxSet\022\014\n\004hash\030\001 \002(\014"
      "\022\r\n\005hashs\030\002 \003(\014\"`\n\005TxSet\022\014\n\004hash\030\001 \002(\014\022\034"
      "\n\024previous_ledger_hash\030\002 \002(\014\022+\n\ttran_env"
      "s\030\003 \003(\0132\030.protocol.TransactionEnv\"&\n\010Don"
      "tHave\022\014\n\004type\030\001 \002(\005\022\014\n\004hash\030\002 \002(\014\"\024\n\004Has"
      "h\022\014\n\004hash\030\002 \002(\014\"\224\001\n\016PbftPrePrepare\022\023\n\013vi"
      "ew_number\030\001 \002(\003\022\020\n\010sequence\030\002 \002(\003\022\022\n\nrep"
      "lica_id\030\003 \002(\003\022\036\n\005value\030\004 \002(\0132\017.protocol."
      "Value\022\024\n\014value_digest\030\005 \002(\014\022\021\n\tblock_seq"
      "\030\006 \002(\003\"^\n\013PbftPrepare\022\023\n\013view_number\030\001 \002"
      "(\003\022\020\n\010sequence\030\002 \002(\003\022\022\n\nreplica_id\030\003 \002(\003"
      "\022\024\n\014value_digest\030\004 \002(\014\"]\n\nPbftCommit\022\023\n\013"
      "view_number\030\001 \002(\003\022\020\n\010sequence\030\002 \002(\003\022\022\n\nr"
      "eplica_id\030\003 \002(\003\022\024\n\014value_digest\030\004 \002(\014\"L\n"
      "\016PbftCheckPoint\022\020\n\010sequence\030\001 \002(\003\022\022\n\nrep"
      "lica_id\030\002 \002(\003\022\024\n\014state_digest\030\003 \002(\014\"]\n\017P"
      "bftPreparedSet\022&\n\013pre_prepare\030\001 \002(\0132\021.pr"
      "otocol.PbftEnv\022\"\n\007prepare\030\002 \003(\0132\021.protoc"
      "ol.PbftEnv\"\244\001\n\016PbftViewChange\022\023\n\013view_nu"
      "mber\030\001 \002(\003\022\020\n\010sequence\030\002 \002(\003\022&\n\013checkpoi"
      "nts\030\003 \003(\0132\021.protocol.PbftEnv\022/\n\014prepared"
      "_set\030\004 \003(\0132\031.protocol.PbftPreparedSet\022\022\n"
      "\nreplica_id\030\005 \002(\003\"\232\001\n\013PbftNewView\022\023\n\013vie"
      "w_number\030\001 \002(\003\022\020\n\010sequence\030\002 \002(\003\022\022\n\nrepl"
      "ica_id\030\003 \002(\003\022\'\n\014view_changes\030\004 \003(\0132\021.pro"
      "tocol.PbftEnv\022\'\n\014pre_prepares\030\005 \003(\0132\021.pr"
      "otocol.PbftEnv\"\340\002\n\004Pbft\022\024\n\014round_number\030"
      "\001 \002(\r\022\026\n\016validator_hash\030\002 \002(\014\022\'\n\004type\030\003 "
      "\002(\0162\031.protocol.PbftMessageType\022-\n\013pre_pr"
      "epare\030\004 \001(\0132\030.protocol.PbftPrePrepare\022&\n"
      "\007prepare\030\005 \001(\0132\025.protocol.PbftPrepare\022$\n"
      "\006commit\030\006 \001(\0132\024.protocol.PbftCommit\022,\n\nc"
      "heckpoint\030\007 \001(\0132\030.protocol.PbftCheckPoin"
      "t\022-\n\013view_change\030\010 \001(\0132\030.protocol.PbftVi"
      "ewChange\022\'\n\010new_view\030\t \001(\0132\025.protocol.Pb"
      "ftNewView\"O\n\007PbftEnv\022\034\n\004pbft\030\001 \002(\0132\016.pro"
      "tocol.Pbft\022&\n\tsignature\030\002 \002(\0132\023.protocol"
      ".Signature\"\032\n\tEntryList\022\r\n\005entry\030\001 \003(\014\"J"
      "\n\tWsMessage\022\014\n\004type\030\001 \002(\003\022\017\n\007request\030\002 \002"
      "(\010\022\020\n\010sequence\030\003 \002(\003\022\014\n\004data\030\004 \002(\014\"8\n\nKe"
      "epOnline\022\025\n\rsrc_peer_addr\030\001 \002(\t\022\023\n\013paylo"
      "ad_seq\030\002 \002(\003\"a\n\rKeepOnlineEnv\022(\n\nkeeponl"
      "ine\030\001 \002(\0132\024.protocol.KeepOnline\022&\n\tsigna"
      "ture\030\002 \002(\0132\023.protocol.Signature\"Y\n\007PayLo"
      "ad\022\025\n\rsrc_peer_addr\030\001 \002(\t\022\026\n\016des_peer_ad"
      "drs\030\002 \003(\t\022\021\n\ttimestamp\030\004 \002(\003\022\014\n\004data\030\005 \002"
      "(\014\"X\n\nPayLoadEnv\022\"\n\007payload\030\001 \002(\0132\021.prot"
      "ocol.PayLoad\022&\n\tsignature\030\002 \002(\0132\023.protoc"
      "ol.Signature\"M\n\nChainHello\022,\n\010api_list\030\001"
      " \003(\0162\032.protocol.ChainMessageType\022\021\n\ttime"
      "stamp\030\002 \002(\003\"a\n\013ChainStatus\022\021\n\tself_addr\030"
      "\001 \002(\t\022\026\n\016ledger_version\030\002 \002(\r\022\024\n\014bubi_ve"
      "rsion\030\003 \002(\t\022\021\n\ttimestamp\030\004 \002(\003\"[\n\017ChainP"
      "eerOnline\022\021\n\tpeer_addr\030\001 \002(\t\022\017\n\007peer_ip\030"
      "\002 \002(\t\022\021\n\tpeer_port\030\003 \002(\005\022\021\n\ttimestamp\030\004 "
      "\002(\003\"8\n\020ChainPeerOffline\022\021\n\tpeer_addr\030\001 \002"
      "(\t\022\021\n\ttimestamp\030\002 \002(\003\"O\n\020ChainPeerMessag"
      "e\022\025\n\rsrc_peer_addr\030\001 \002(\t\022\026\n\016des_peer_add"
      "rs\030\002 \003(\t\022\014\n\004data\030\003 \002(\014\"\325\002\n\rChainTxStatus"
      "\0220\n\006status\030\001 \002(\0162 .protocol.ChainTxStatu"
      "s.TxStatus\022\017\n\007tx_hash\030\002 \002(\t\022\026\n\016source_ad"
      "dress\030\003 \002(\t\022\032\n\022source_account_seq\030\004 \001(\003\022"
      "\022\n\nledger_seq\030\005 \001(\003\022\027\n\017new_account_seq\030\006"
      " \001(\003\022\'\n\nerror_code\030\007 \001(\0162\023.protocol.ERRO"
      "RCODE\022\022\n\nerror_desc\030\010 \001(\t\022\021\n\ttimestamp\030\t"
      " \002(\003\"P\n\010TxStatus\022\r\n\tUNDEFINED\020\000\022\r\n\tCONFI"
      "RMED\020\001\022\013\n\007PENDING\020\002\022\014\n\010COMPLETE\020\003\022\013\n\007FAI"
      "LURE\020\004*\243\001\n\017PbftMessageType\022\030\n\024PBFT_TYPE_"
      "PREPREPARE\020\000\022\025\n\021PBFT_TYPE_PREPARE\020\001\022\024\n\020P"
      "BFT_TYPE_COMMIT\020\002\022\030\n\024PBFT_TYPE_CHECKPOIN"
      "T\020\003\022\030\n\024PBFT_TYPE_VIEWCHANGE\020\004\022\025\n\021PBFT_TY"
      "PE_NEWVIEW\020\005*8\n\rPbftValueType\022\021\n\rPBFT_VA"
      "LUE_TX\020\000\022\024\n\020PBFT_VALUE_TXSET\020\001*\234\001\n\020Chain"
      "MessageType\022\017\n\013CHAIN_HELLO\020\n\022\023\n\017CHAIN_TX"
      "_STATUS\020\013\022\025\n\021CHAIN_PEER_ONLINE\020\014\022\026\n\022CHAI"
      "N_PEER_OFFLINE\020\r\022\026\n\022CHAIN_PEER_MESSAGE\020\016"
      "\022\033\n\027CHAIN_SUBMITTRANSACTION\020\017*\323\007\n\tERRORC"
      "ODE\022\023\n\017ERRCODE_SUCCESS\020\000\022\032\n\026ERRCODE_INTE"
      "RNAL_ERROR\020\001\022\035\n\031ERRCODE_INVALID_PARAMETE"
      "R\020\002\022\031\n\025ERRCODE_ALREADY_EXIST\020\003\022\025\n\021ERRCOD"
      "E_NOT_EXIST\020\004\022\026\n\022ERRCODE_TX_TIMEOUT\020\005\022\032\n"
      "\026ERRCODE_INVALID_PUBKEY\020Z\022\032\n\026ERRCODE_INV"
      "ALID_PRIKEY\020[\022\031\n\025ERRCODE_ASSET_INVALID\020\\"
      "\022\035\n\031ERRCODE_INVALID_SIGNATURE\020]\022\033\n\027ERRCO"
      "DE_INVALID_ADDRESS\020^\022\035\n\031ERRCODE_TIME_NOT"
      "_IN_RANGE\020_\022 \n\034ERRCODE_NO_NETWORK_CONSEN"
      "SUS\020`\022\036\n\032ERRCODE_MISSING_OPERATIONS\020a\022\034\n"
      "\030ERRCODE_LAGER_OPERATIONS\020b\022\030\n\024ERRCODE_B"
      "AD_SEQUENCE\020c\022\037\n\033ERRCODE_ACCOUNT_LOW_RES"
      "ERVE\020d\022$\n ERRCODE_ACCOUNT_SOURCEDEST_EQU"
      "AL\020e\022\036\n\032ERRCODE_ACCOUNT_DEST_EXIST\020f\022\035\n\031"
      "ERRCODE_ACCOUNT_NOT_EXIST\020g\022%\n!ERRCODE_A"
      "CCOUNT_ASSET_LOW_RESERVE\020h\022*\n&ERRCODE_AC"
      "COUNT_ASSET_AMOUNT_TOO_LARGE\020i\022\037\n\033ERRCOD"
      "E_SEQNUMBER_NOT_MATCH\020n\022\032\n\026ERRCODE_FEE_N"
      "OT_ENOUGH\020o\022\037\n\033ERRCODE_TIMEBOUND_TOO_EAR"
      "LY\020p\022\036\n\032ERRCODE_TIMEBOUND_TOO_LATE\020q\022\032\n\026"
      "ERRCODE_OUT_OF_TXCACHE\020r\022\034\n\030ERRCODE_WEIG"
      "HT_NOT_VALID\020x\022\034\n\027ERRCODE_INPUT_NOT_EXIS"
      "T\020\202\001\022\032\n\025ERRCODE_INPUT_INVALID\020\203\001\022\027\n\022ERRC"
      "ODE_NOT_SUPPLY\020\204\001\022 \n\033ERRCODE_INVALID_DAT"
      "AVERSION\020\220\001B\034\n\032cn.bubi.blockchain.adapte"
      "r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* Account_Limit_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool Account_Limit_IsValid(int value) {
  switch (value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Account_Limit Account::SIGNER;
const Account_Limit Account::Limit_MIN;
const Account_Limit Account::Limit_MAX;
const int Account::Limit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ledgers_SyncCode_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool Ledgers_SyncCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ledgers_SyncCode Ledgers::OK;
const Ledgers_SyncCode Ledgers::OUT_OF_SYNC;
const Ledgers_SyncCode Ledgers::OUT_OF_LEDGERS;
const Ledgers_SyncCode Ledgers::BUSY;
const Ledgers_SyncCode Ledgers::REFUSE;
const Ledgers_SyncCode Ledgers::INTERNAL;
const Ledgers_SyncCode Ledgers::SyncCode_MIN;
const Ledgers_SyncCode Ledgers::SyncCode_MAX;
const int Ledgers::SyncCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AssetProperty_Type_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[2];
}
bool AssetProperty_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AssetProperty_Type AssetProperty::NATIVE;
const AssetProperty_Type AssetProperty::IOU;
const AssetProperty_Type AssetProperty::UNIQUE;
const AssetProperty_Type AssetProperty::Type_MIN;
const AssetProperty_Type AssetProperty::Type_MAX;
const int AssetProperty::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[3];
}
bool Operation_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Operation_Type Operation::CREATE_ACCOUNT;
const Operation_Type Operation::PAYMENT;
const Operation_Type Operation::ISSUE_ASSET;
const Operation_Type Operation::SET_OPTIONS;
const Operation_Type Operation::INIT_PAYMENT;
const Operation_Type Operation::PRODUCTION;
const Operation_Type Operation::ISSUE_UNIQUE_ASSET;
const Operation_Type Operation::PAYMENT_UNIQUE_ASSET;
const Operation_Type Operation::RECORD;
const Operation_Type Operation::Type_MIN;
const Operation_Type Operation::Type_MAX;
const int Operation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Transaction_Limit_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[4];
}
bool Transaction_Limit_IsValid(int value) {
  switch (value) {
    case 1000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Transaction_Limit Transaction::OPERATIONS;
const Transaction_Limit Transaction::Limit_MIN;
const Transaction_Limit Transaction::Limit_MAX;
const int Transaction::Limit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransactionEnv_Limit_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[5];
}
bool TransactionEnv_Limit_IsValid(int value) {
  switch (value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransactionEnv_Limit TransactionEnv::SIGNATURE;
const TransactionEnv_Limit TransactionEnv::Limit_MIN;
const TransactionEnv_Limit TransactionEnv::Limit_MAX;
const int TransactionEnv::Limit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChainTxStatus_TxStatus_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[6];
}
bool ChainTxStatus_TxStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChainTxStatus_TxStatus ChainTxStatus::UNDEFINED;
const ChainTxStatus_TxStatus ChainTxStatus::CONFIRMED;
const ChainTxStatus_TxStatus ChainTxStatus::PENDING;
const ChainTxStatus_TxStatus ChainTxStatus::COMPLETE;
const ChainTxStatus_TxStatus ChainTxStatus::FAILURE;
const ChainTxStatus_TxStatus ChainTxStatus::TxStatus_MIN;
const ChainTxStatus_TxStatus ChainTxStatus::TxStatus_MAX;
const int ChainTxStatus::TxStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PbftMessageType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[7];
}
bool PbftMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PbftValueType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[8];
}
bool PbftValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChainMessageType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[9];
}
bool ChainMessageType_IsValid(int value) {
  switch (value) {
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERRORCODE_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[10];
}
bool ERRORCODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 120:
    case 130:
    case 131:
    case 132:
    case 144:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hello::kLedgerVersionFieldNumber;
const int Hello::kOverlayVersionFieldNumber;
const int Hello::kBubiVersionFieldNumber;
const int Hello::kListeningPortFieldNumber;
const int Hello::kNodeIdFieldNumber;
const int Hello::kNetworkTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hello::Hello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Hello)
}
Hello::Hello(const Hello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bubiversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bubiversion()) {
    bubiversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bubiversion_);
  }
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nodeid()) {
    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  network_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_type()) {
    network_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_type_);
  }
  ::memcpy(&ledger_version_, &from.ledger_version_,
    reinterpret_cast<char*>(&listeningport_) -
    reinterpret_cast<char*>(&ledger_version_) + sizeof(listeningport_));
  // @@protoc_insertion_point(copy_constructor:protocol.Hello)
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  bubiversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ledger_version_, 0, reinterpret_cast<char*>(&listeningport_) -
    reinterpret_cast<char*>(&ledger_version_) + sizeof(listeningport_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:protocol.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
  bubiversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hello& Hello::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Hello* Hello::New(::google::protobuf::Arena* arena) const {
  Hello* n = new Hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Hello)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_bubiversion()) {
      GOOGLE_DCHECK(!bubiversion_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bubiversion_.UnsafeRawStringPointer())->clear();
    }
    if (has_nodeid()) {
      GOOGLE_DCHECK(!nodeid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nodeid_.UnsafeRawStringPointer())->clear();
    }
    if (has_network_type()) {
      GOOGLE_DCHECK(!network_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*network_type_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&ledger_version_, 0, reinterpret_cast<char*>(&listeningport_) -
      reinterpret_cast<char*>(&ledger_version_) + sizeof(listeningport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ledger_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ledger_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 overlayVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_overlayversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overlayversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string bubiVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bubiversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bubiversion().data(), this->bubiversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Hello.bubiVersion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 listeningPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_listeningport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listeningport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nodeId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Hello.nodeId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string network_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_type().data(), this->network_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Hello.network_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Hello)
  return false;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Hello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ledger_version = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ledger_version(), output);
  }

  // required uint32 overlayVersion = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->overlayversion(), output);
  }

  // required string bubiVersion = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bubiversion().data(), this->bubiversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Hello.bubiVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bubiversion(), output);
  }

  // required int32 listeningPort = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->listeningport(), output);
  }

  // required string nodeId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Hello.nodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nodeid(), output);
  }

  // required string network_type = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_type().data(), this->network_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Hello.network_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->network_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Hello)
}

::google::protobuf::uint8* Hello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Hello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ledger_version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ledger_version(), target);
  }

  // required uint32 overlayVersion = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->overlayversion(), target);
  }

  // required string bubiVersion = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bubiversion().data(), this->bubiversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Hello.bubiVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bubiversion(), target);
  }

  // required int32 listeningPort = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->listeningport(), target);
  }

  // required string nodeId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Hello.nodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nodeid(), target);
  }

  // required string network_type = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_type().data(), this->network_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Hello.network_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->network_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Hello)
  return target;
}

size_t Hello::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Hello)
  size_t total_size = 0;

  if (has_bubiversion()) {
    // required string bubiVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bubiversion());
  }

  if (has_nodeid()) {
    // required string nodeId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());
  }

  if (has_network_type()) {
    // required string network_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_type());
  }

  if (has_ledger_version()) {
    // required uint32 ledger_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());
  }

  if (has_overlayversion()) {
    // required uint32 overlayVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->overlayversion());
  }

  if (has_listeningport()) {
    // required int32 listeningPort = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listeningport());
  }

  return total_size;
}
size_t Hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Hello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string bubiVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bubiversion());

    // required string nodeId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());

    // required string network_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_type());

    // required uint32 ledger_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());

    // required uint32 overlayVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->overlayversion());

    // required int32 listeningPort = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listeningport());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  const Hello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Hello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Hello)
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bubiversion();
      bubiversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bubiversion_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nodeid();
      nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_network_type();
      network_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      ledger_version_ = from.ledger_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      overlayversion_ = from.overlayversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      listeningport_ = from.listeningport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void Hello::Swap(Hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hello::InternalSwap(Hello* other) {
  bubiversion_.Swap(&other->bubiversion_);
  nodeid_.Swap(&other->nodeid_);
  network_type_.Swap(&other->network_type_);
  std::swap(ledger_version_, other->ledger_version_);
  std::swap(overlayversion_, other->overlayversion_);
  std::swap(listeningport_, other->listeningport_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hello

// required uint32 ledger_version = 1;
bool Hello::has_ledger_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Hello::set_has_ledger_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Hello::clear_has_ledger_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Hello::clear_ledger_version() {
  ledger_version_ = 0u;
  clear_has_ledger_version();
}
::google::protobuf::uint32 Hello::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.ledger_version)
  return ledger_version_;
}
void Hello::set_ledger_version(::google::protobuf::uint32 value) {
  set_has_ledger_version();
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.ledger_version)
}

// required uint32 overlayVersion = 2;
bool Hello::has_overlayversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Hello::set_has_overlayversion() {
  _has_bits_[0] |= 0x00000010u;
}
void Hello::clear_has_overlayversion() {
  _has_bits_[0] &= ~0x00000010u;
}
void Hello::clear_overlayversion() {
  overlayversion_ = 0u;
  clear_has_overlayversion();
}
::google::protobuf::uint32 Hello::overlayversion() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.overlayVersion)
  return overlayversion_;
}
void Hello::set_overlayversion(::google::protobuf::uint32 value) {
  set_has_overlayversion();
  overlayversion_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.overlayVersion)
}

// required string bubiVersion = 3;
bool Hello::has_bubiversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Hello::set_has_bubiversion() {
  _has_bits_[0] |= 0x00000001u;
}
void Hello::clear_has_bubiversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void Hello::clear_bubiversion() {
  bubiversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bubiversion();
}
const ::std::string& Hello::bubiversion() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.bubiVersion)
  return bubiversion_.GetNoArena();
}
void Hello::set_bubiversion(const ::std::string& value) {
  set_has_bubiversion();
  bubiversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.bubiVersion)
}
#if LANG_CXX11
void Hello::set_bubiversion(::std::string&& value) {
  set_has_bubiversion();
  bubiversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Hello.bubiVersion)
}
#endif
void Hello::set_bubiversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bubiversion();
  bubiversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.bubiVersion)
}
void Hello::set_bubiversion(const char* value, size_t size) {
  set_has_bubiversion();
  bubiversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.bubiVersion)
}
::std::string* Hello::mutable_bubiversion() {
  set_has_bubiversion();
  // @@protoc_insertion_point(field_mutable:protocol.Hello.bubiVersion)
  return bubiversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Hello::release_bubiversion() {
  // @@protoc_insertion_point(field_release:protocol.Hello.bubiVersion)
  clear_has_bubiversion();
  return bubiversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Hello::set_allocated_bubiversion(::std::string* bubiversion) {
  if (bubiversion != NULL) {
    set_has_bubiversion();
  } else {
    clear_has_bubiversion();
  }
  bubiversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bubiversion);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.bubiVersion)
}

// required int32 listeningPort = 4;
bool Hello::has_listeningport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Hello::set_has_listeningport() {
  _has_bits_[0] |= 0x00000020u;
}
void Hello::clear_has_listeningport() {
  _has_bits_[0] &= ~0x00000020u;
}
void Hello::clear_listeningport() {
  listeningport_ = 0;
  clear_has_listeningport();
}
::google::protobuf::int32 Hello::listeningport() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.listeningPort)
  return listeningport_;
}
void Hello::set_listeningport(::google::protobuf::int32 value) {
  set_has_listeningport();
  listeningport_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.listeningPort)
}

// required string nodeId = 5;
bool Hello::has_nodeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Hello::set_has_nodeid() {
  _has_bits_[0] |= 0x00000002u;
}
void Hello::clear_has_nodeid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Hello::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nodeid();
}
const ::std::string& Hello::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.nodeId)
  return nodeid_.GetNoArena();
}
void Hello::set_nodeid(const ::std::string& value) {
  set_has_nodeid();
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.nodeId)
}
#if LANG_CXX11
void Hello::set_nodeid(::std::string&& value) {
  set_has_nodeid();
  nodeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Hello.nodeId)
}
#endif
void Hello::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nodeid();
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.nodeId)
}
void Hello::set_nodeid(const char* value, size_t size) {
  set_has_nodeid();
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.nodeId)
}
::std::string* Hello::mutable_nodeid() {
  set_has_nodeid();
  // @@protoc_insertion_point(field_mutable:protocol.Hello.nodeId)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Hello::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.Hello.nodeId)
  clear_has_nodeid();
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Hello::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != NULL) {
    set_has_nodeid();
  } else {
    clear_has_nodeid();
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.nodeId)
}

// required string network_type = 6;
bool Hello::has_network_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Hello::set_has_network_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Hello::clear_has_network_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Hello::clear_network_type() {
  network_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_type();
}
const ::std::string& Hello::network_type() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.network_type)
  return network_type_.GetNoArena();
}
void Hello::set_network_type(const ::std::string& value) {
  set_has_network_type();
  network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.network_type)
}
#if LANG_CXX11
void Hello::set_network_type(::std::string&& value) {
  set_has_network_type();
  network_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Hello.network_type)
}
#endif
void Hello::set_network_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_network_type();
  network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.network_type)
}
void Hello::set_network_type(const char* value, size_t size) {
  set_has_network_type();
  network_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.network_type)
}
::std::string* Hello::mutable_network_type() {
  set_has_network_type();
  // @@protoc_insertion_point(field_mutable:protocol.Hello.network_type)
  return network_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Hello::release_network_type() {
  // @@protoc_insertion_point(field_release:protocol.Hello.network_type)
  clear_has_network_type();
  return network_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Hello::set_allocated_network_type(::std::string* network_type) {
  if (network_type != NULL) {
    set_has_network_type();
  } else {
    clear_has_network_type();
  }
  network_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_type);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.network_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Ping)
}
Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:protocol.Ping)
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  nonce_ = GOOGLE_ULONGLONG(0);
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:protocol.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ping& Ping::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Ping)
  nonce_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 nonce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 nonce = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 nonce = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Ping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 nonce = 1;
  if (has_nonce()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nonce()) {
    set_nonce(from.nonce());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  std::swap(nonce_, other->nonce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// required uint64 nonce = 1;
bool Ping::has_nonce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ping::set_has_nonce() {
  _has_bits_[0] |= 0x00000001u;
}
void Ping::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ping::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
::google::protobuf::uint64 Ping::nonce() const {
  // @@protoc_insertion_point(field_get:protocol.Ping.nonce)
  return nonce_;
}
void Ping::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ping.nonce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pong::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pong::Pong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Pong)
}
Pong::Pong(const Pong& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:protocol.Pong)
}

void Pong::SharedCtor() {
  _cached_size_ = 0;
  nonce_ = GOOGLE_ULONGLONG(0);
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:protocol.Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pong::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pong& Pong::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pong* Pong::New(::google::protobuf::Arena* arena) const {
  Pong* n = new Pong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Pong)
  nonce_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 nonce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Pong)
  return false;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Pong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 nonce = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Pong)
}

::google::protobuf::uint8* Pong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Pong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 nonce = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Pong)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 nonce = 1;
  if (has_nonce()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  const Pong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Pong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Pong)
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nonce()) {
    set_nonce(from.nonce());
  }
}

void Pong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Pong::Swap(Pong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pong::InternalSwap(Pong* other) {
  std::swap(nonce_, other->nonce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pong

// required uint64 nonce = 1;
bool Pong::has_nonce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pong::set_has_nonce() {
  _has_bits_[0] |= 0x00000001u;
}
void Pong::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pong::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
::google::protobuf::uint64 Pong::nonce() const {
  // @@protoc_insertion_point(field_get:protocol.Pong.nonce)
  return nonce_;
}
void Pong::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:protocol.Pong.nonce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peers::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peers::Peers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Peers)
}
Peers::Peers(const Peers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.Peers)
}

void Peers::SharedCtor() {
  _cached_size_ = 0;
}

Peers::~Peers() {
  // @@protoc_insertion_point(destructor:protocol.Peers)
  SharedDtor();
}

void Peers::SharedDtor() {
}

void Peers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peers::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peers& Peers::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Peers* Peers::New(::google::protobuf::Arena* arena) const {
  Peers* n = new Peers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peers::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Peers)
  peers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Peers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Peers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Peer peers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Peers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Peers)
  return false;
#undef DO_
}

void Peers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Peers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Peer peers = 2;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Peers)
}

::google::protobuf::uint8* Peers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Peers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Peer peers = 2;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->peers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Peers)
  return target;
}

size_t Peers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Peers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.Peer peers = 2;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Peers)
  GOOGLE_DCHECK_NE(&from, this);
  const Peers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Peers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Peers)
    MergeFrom(*source);
  }
}

void Peers::MergeFrom(const Peers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Peers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void Peers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Peers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peers::CopyFrom(const Peers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Peers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peers::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->peers())) return false;
  return true;
}

void Peers::Swap(Peers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peers::InternalSwap(Peers* other) {
  peers_.InternalSwap(&other->peers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peers::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peers

// repeated .protocol.Peer peers = 2;
int Peers::peers_size() const {
  return peers_.size();
}
void Peers::clear_peers() {
  peers_.Clear();
}
const ::protocol::Peer& Peers::peers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Peers.peers)
  return peers_.Get(index);
}
::protocol::Peer* Peers::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Peers.peers)
  return peers_.Mutable(index);
}
::protocol::Peer* Peers::add_peers() {
  // @@protoc_insertion_point(field_add:protocol.Peers.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Peer >*
Peers::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Peers.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Peer >&
Peers::peers() const {
  // @@protoc_insertion_point(field_list:protocol.Peers.peers)
  return peers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kIpFieldNumber;
const int Peer::kPortFieldNumber;
const int Peer::kNumFailuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&num_failures_) -
    reinterpret_cast<char*>(&port_) + sizeof(num_failures_));
  // @@protoc_insertion_point(copy_constructor:protocol.Peer)
}

void Peer::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&num_failures_) -
    reinterpret_cast<char*>(&port_) + sizeof(num_failures_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:protocol.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Peer)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&port_, 0, reinterpret_cast<char*>(&num_failures_) -
      reinterpret_cast<char*>(&port_) + sizeof(num_failures_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Peer.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_failures = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_failures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Peer.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required int32 num_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_failures(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Peer.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required int32 num_failures = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_failures(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Peer)
  return target;
}

size_t Peer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Peer)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  if (has_num_failures()) {
    // required int32 num_failures = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_failures());
  }

  return total_size;
}
size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Peer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

    // required int32 num_failures = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_failures());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_failures_ = from.num_failures_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(num_failures_, other->num_failures_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// required string ip = 1;
bool Peer::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Peer::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void Peer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void Peer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Peer::ip() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.ip)
  return ip_.GetNoArena();
}
void Peer::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Peer.ip)
}
#if LANG_CXX11
void Peer::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Peer.ip)
}
#endif
void Peer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Peer.ip)
}
void Peer::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Peer.ip)
}
::std::string* Peer::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.Peer.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Peer::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.Peer.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Peer::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.Peer.ip)
}

// required int32 port = 2;
bool Peer::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Peer::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Peer::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Peer::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 Peer::port() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.port)
  return port_;
}
void Peer::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.port)
}

// required int32 num_failures = 3;
bool Peer::has_num_failures() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Peer::set_has_num_failures() {
  _has_bits_[0] |= 0x00000004u;
}
void Peer::clear_has_num_failures() {
  _has_bits_[0] &= ~0x00000004u;
}
void Peer::clear_num_failures() {
  num_failures_ = 0;
  clear_has_num_failures();
}
::google::protobuf::int32 Peer::num_failures() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.num_failures)
  return num_failures_;
}
void Peer::set_num_failures(::google::protobuf::int32 value) {
  set_has_num_failures();
  num_failures_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.num_failures)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountThreshold::kMasterWeightFieldNumber;
const int AccountThreshold::kLowThresholdFieldNumber;
const int AccountThreshold::kMedThresholdFieldNumber;
const int AccountThreshold::kHighThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountThreshold::AccountThreshold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AccountThreshold)
}
AccountThreshold::AccountThreshold(const AccountThreshold& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&master_weight_, &from.master_weight_,
    reinterpret_cast<char*>(&high_threshold_) -
    reinterpret_cast<char*>(&master_weight_) + sizeof(high_threshold_));
  // @@protoc_insertion_point(copy_constructor:protocol.AccountThreshold)
}

void AccountThreshold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&master_weight_, 0, reinterpret_cast<char*>(&high_threshold_) -
    reinterpret_cast<char*>(&master_weight_) + sizeof(high_threshold_));
}

AccountThreshold::~AccountThreshold() {
  // @@protoc_insertion_point(destructor:protocol.AccountThreshold)
  SharedDtor();
}

void AccountThreshold::SharedDtor() {
}

void AccountThreshold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountThreshold::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountThreshold& AccountThreshold::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccountThreshold* AccountThreshold::New(::google::protobuf::Arena* arena) const {
  AccountThreshold* n = new AccountThreshold;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountThreshold::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountThreshold)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&master_weight_, 0, reinterpret_cast<char*>(&high_threshold_) -
      reinterpret_cast<char*>(&master_weight_) + sizeof(high_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountThreshold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AccountThreshold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 master_weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_master_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 low_threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_low_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 med_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_med_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &med_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 high_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_high_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AccountThreshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AccountThreshold)
  return false;
#undef DO_
}

void AccountThreshold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AccountThreshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 master_weight = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_weight(), output);
  }

  // required uint32 low_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->low_threshold(), output);
  }

  // required uint32 med_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->med_threshold(), output);
  }

  // required uint32 high_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->high_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AccountThreshold)
}

::google::protobuf::uint8* AccountThreshold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountThreshold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 master_weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_weight(), target);
  }

  // required uint32 low_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->low_threshold(), target);
  }

  // required uint32 med_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->med_threshold(), target);
  }

  // required uint32 high_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->high_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountThreshold)
  return target;
}

size_t AccountThreshold::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.AccountThreshold)
  size_t total_size = 0;

  if (has_master_weight()) {
    // required uint32 master_weight = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->master_weight());
  }

  if (has_low_threshold()) {
    // required uint32 low_threshold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_threshold());
  }

  if (has_med_threshold()) {
    // required uint32 med_threshold = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->med_threshold());
  }

  if (has_high_threshold()) {
    // required uint32 high_threshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_threshold());
  }

  return total_size;
}
size_t AccountThreshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountThreshold)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 master_weight = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->master_weight());

    // required uint32 low_threshold = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_threshold());

    // required uint32 med_threshold = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->med_threshold());

    // required uint32 high_threshold = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_threshold());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountThreshold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AccountThreshold)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountThreshold* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountThreshold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AccountThreshold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AccountThreshold)
    MergeFrom(*source);
  }
}

void AccountThreshold::MergeFrom(const AccountThreshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountThreshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      master_weight_ = from.master_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_threshold_ = from.low_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      med_threshold_ = from.med_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_threshold_ = from.high_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountThreshold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AccountThreshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountThreshold::CopyFrom(const AccountThreshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountThreshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountThreshold::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AccountThreshold::Swap(AccountThreshold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountThreshold::InternalSwap(AccountThreshold* other) {
  std::swap(master_weight_, other->master_weight_);
  std::swap(low_threshold_, other->low_threshold_);
  std::swap(med_threshold_, other->med_threshold_);
  std::swap(high_threshold_, other->high_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountThreshold::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountThreshold

// required uint32 master_weight = 1;
bool AccountThreshold::has_master_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccountThreshold::set_has_master_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void AccountThreshold::clear_has_master_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccountThreshold::clear_master_weight() {
  master_weight_ = 0u;
  clear_has_master_weight();
}
::google::protobuf::uint32 AccountThreshold::master_weight() const {
  // @@protoc_insertion_point(field_get:protocol.AccountThreshold.master_weight)
  return master_weight_;
}
void AccountThreshold::set_master_weight(::google::protobuf::uint32 value) {
  set_has_master_weight();
  master_weight_ = value;
  // @@protoc_insertion_point(field_set:protocol.AccountThreshold.master_weight)
}

// required uint32 low_threshold = 2;
bool AccountThreshold::has_low_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccountThreshold::set_has_low_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void AccountThreshold::clear_has_low_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccountThreshold::clear_low_threshold() {
  low_threshold_ = 0u;
  clear_has_low_threshold();
}
::google::protobuf::uint32 AccountThreshold::low_threshold() const {
  // @@protoc_insertion_point(field_get:protocol.AccountThreshold.low_threshold)
  return low_threshold_;
}
void AccountThreshold::set_low_threshold(::google::protobuf::uint32 value) {
  set_has_low_threshold();
  low_threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.AccountThreshold.low_threshold)
}

// required uint32 med_threshold = 3;
bool AccountThreshold::has_med_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccountThreshold::set_has_med_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void AccountThreshold::clear_has_med_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccountThreshold::clear_med_threshold() {
  med_threshold_ = 0u;
  clear_has_med_threshold();
}
::google::protobuf::uint32 AccountThreshold::med_threshold() const {
  // @@protoc_insertion_point(field_get:protocol.AccountThreshold.med_threshold)
  return med_threshold_;
}
void AccountThreshold::set_med_threshold(::google::protobuf::uint32 value) {
  set_has_med_threshold();
  med_threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.AccountThreshold.med_threshold)
}

// required uint32 high_threshold = 4;
bool AccountThreshold::has_high_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AccountThreshold::set_has_high_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void AccountThreshold::clear_has_high_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void AccountThreshold::clear_high_threshold() {
  high_threshold_ = 0u;
  clear_has_high_threshold();
}
::google::protobuf::uint32 AccountThreshold::high_threshold() const {
  // @@protoc_insertion_point(field_get:protocol.AccountThreshold.high_threshold)
  return high_threshold_;
}
void AccountThreshold::set_high_threshold(::google::protobuf::uint32 value) {
  set_has_high_threshold();
  high_threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.AccountThreshold.high_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signer::kAddressFieldNumber;
const int Signer::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signer::Signer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Signer)
}
Signer::Signer(const Signer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:protocol.Signer)
}

void Signer::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0u;
}

Signer::~Signer() {
  // @@protoc_insertion_point(destructor:protocol.Signer)
  SharedDtor();
}

void Signer::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signer::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signer& Signer::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signer* Signer::New(::google::protobuf::Arena* arena) const {
  Signer* n = new Signer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Signer)
  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  weight_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Signer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Signer.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Signer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Signer)
  return false;
#undef DO_
}

void Signer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Signer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Signer.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // required uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Signer)
}

::google::protobuf::uint8* Signer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Signer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Signer.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // required uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Signer)
  return target;
}

size_t Signer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Signer)
  size_t total_size = 0;

  if (has_address()) {
    // required string address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_weight()) {
    // required uint32 weight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weight());
  }

  return total_size;
}
size_t Signer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Signer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required uint32 weight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Signer)
  GOOGLE_DCHECK_NE(&from, this);
  const Signer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Signer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Signer)
    MergeFrom(*source);
  }
}

void Signer::MergeFrom(const Signer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Signer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Signer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signer::CopyFrom(const Signer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Signer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Signer::Swap(Signer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signer::InternalSwap(Signer* other) {
  address_.Swap(&other->address_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signer::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signer

// required string address = 1;
bool Signer::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signer::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Signer::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signer::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Signer::address() const {
  // @@protoc_insertion_point(field_get:protocol.Signer.address)
  return address_.GetNoArena();
}
void Signer::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Signer.address)
}
#if LANG_CXX11
void Signer::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Signer.address)
}
#endif
void Signer::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Signer.address)
}
void Signer::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Signer.address)
}
::std::string* Signer::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:protocol.Signer.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Signer::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Signer.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Signer::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Signer.address)
}

// required uint32 weight = 2;
bool Signer::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signer::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void Signer::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signer::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
::google::protobuf::uint32 Signer::weight() const {
  // @@protoc_insertion_point(field_get:protocol.Signer.weight)
  return weight_;
}
void Signer::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:protocol.Signer.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Account::kAccountBalanceFieldNumber;
const int Account::kPreviousLedgerSeqFieldNumber;
const int Account::kPreviousTxHashFieldNumber;
const int Account::kAccountAddressFieldNumber;
const int Account::kAssetsFieldNumber;
const int Account::kTxSeqFieldNumber;
const int Account::kThresholdsFieldNumber;
const int Account::kSignersFieldNumber;
const int Account::kMetadataFieldNumber;
const int Account::kMetadataVersionFieldNumber;
const int Account::kUniqueAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Account::Account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Account)
}
Account::Account(const Account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      assets_(from.assets_),
      signers_(from.signers_),
      unique_asset_(from.unique_asset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previous_tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previous_tx_hash()) {
    previous_tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_tx_hash_);
  }
  account_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_address()) {
    account_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_address_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_thresholds()) {
    thresholds_ = new ::protocol::AccountThreshold(*from.thresholds_);
  } else {
    thresholds_ = NULL;
  }
  ::memcpy(&account_balance_, &from.account_balance_,
    reinterpret_cast<char*>(&metadata_version_) -
    reinterpret_cast<char*>(&account_balance_) + sizeof(metadata_version_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account)
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  previous_tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thresholds_, 0, reinterpret_cast<char*>(&metadata_version_) -
    reinterpret_cast<char*>(&thresholds_) + sizeof(metadata_version_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:protocol.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  previous_tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete thresholds_;
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Account& Account::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Account* Account::New(::google::protobuf::Arena* arena) const {
  Account* n = new Account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account)
  assets_.Clear();
  signers_.Clear();
  unique_asset_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_previous_tx_hash()) {
      GOOGLE_DCHECK(!previous_tx_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*previous_tx_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_address()) {
      GOOGLE_DCHECK(!account_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_thresholds()) {
      GOOGLE_DCHECK(thresholds_ != NULL);
      thresholds_->::protocol::AccountThreshold::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&account_balance_, 0, reinterpret_cast<char*>(&metadata_version_) -
      reinterpret_cast<char*>(&account_balance_) + sizeof(metadata_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_balance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 previous_ledger_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_previous_ledger_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previous_ledger_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes previous_tx_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_tx_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string account_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_address().data(), this->account_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Account.account_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Asset assets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 tx_seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tx_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.AccountThreshold thresholds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thresholds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Signer signers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes metadata = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 metadata_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_metadata_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &metadata_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.UniqueAsset unique_asset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unique_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 account_balance = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_balance(), output);
  }

  // required int64 previous_ledger_seq = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->previous_ledger_seq(), output);
  }

  // required bytes previous_tx_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->previous_tx_hash(), output);
  }

  // required string account_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_address().data(), this->account_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Account.account_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account_address(), output);
  }

  // repeated .protocol.Asset assets = 5;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->assets(i), output);
  }

  // required int64 tx_seq = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tx_seq(), output);
  }

  // required .protocol.AccountThreshold thresholds = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->thresholds_, output);
  }

  // repeated .protocol.Signer signers = 8;
  for (unsigned int i = 0, n = this->signers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->signers(i), output);
  }

  // required bytes metadata = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->metadata(), output);
  }

  // optional int64 metadata_version = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->metadata_version(), output);
  }

  // repeated .protocol.UniqueAsset unique_asset = 11;
  for (unsigned int i = 0, n = this->unique_asset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->unique_asset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Account)
}

::google::protobuf::uint8* Account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 account_balance = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_balance(), target);
  }

  // required int64 previous_ledger_seq = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->previous_ledger_seq(), target);
  }

  // required bytes previous_tx_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->previous_tx_hash(), target);
  }

  // required string account_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_address().data(), this->account_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Account.account_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account_address(), target);
  }

  // repeated .protocol.Asset assets = 5;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->assets(i), deterministic, target);
  }

  // required int64 tx_seq = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tx_seq(), target);
  }

  // required .protocol.AccountThreshold thresholds = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->thresholds_, deterministic, target);
  }

  // repeated .protocol.Signer signers = 8;
  for (unsigned int i = 0, n = this->signers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->signers(i), deterministic, target);
  }

  // required bytes metadata = 9;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->metadata(), target);
  }

  // optional int64 metadata_version = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->metadata_version(), target);
  }

  // repeated .protocol.UniqueAsset unique_asset = 11;
  for (unsigned int i = 0, n = this->unique_asset_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->unique_asset(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account)
  return target;
}

size_t Account::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Account)
  size_t total_size = 0;

  if (has_previous_tx_hash()) {
    // required bytes previous_tx_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_tx_hash());
  }

  if (has_account_address()) {
    // required string account_address = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_address());
  }

  if (has_metadata()) {
    // required bytes metadata = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  if (has_thresholds()) {
    // required .protocol.AccountThreshold thresholds = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thresholds_);
  }

  if (has_account_balance()) {
    // required int64 account_balance = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->account_balance());
  }

  if (has_previous_ledger_seq()) {
    // required int64 previous_ledger_seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->previous_ledger_seq());
  }

  if (has_tx_seq()) {
    // required int64 tx_seq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_seq());
  }

  return total_size;
}
size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes previous_tx_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_tx_hash());

    // required string account_address = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_address());

    // required bytes metadata = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());

    // required .protocol.AccountThreshold thresholds = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thresholds_);

    // required int64 account_balance = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->account_balance());

    // required int64 previous_ledger_seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->previous_ledger_seq());

    // required int64 tx_seq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.Asset assets = 5;
  {
    unsigned int count = this->assets_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assets(i));
    }
  }

  // repeated .protocol.Signer signers = 8;
  {
    unsigned int count = this->signers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signers(i));
    }
  }

  // repeated .protocol.UniqueAsset unique_asset = 11;
  {
    unsigned int count = this->unique_asset_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unique_asset(i));
    }
  }

  // optional int64 metadata_version = 10;
  if (has_metadata_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->metadata_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
  signers_.MergeFrom(from.signers_);
  unique_asset_.MergeFrom(from.unique_asset_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_previous_tx_hash();
      previous_tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_tx_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account_address();
      account_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_thresholds()->::protocol::AccountThreshold::MergeFrom(from.thresholds());
    }
    if (cached_has_bits & 0x00000010u) {
      account_balance_ = from.account_balance_;
    }
    if (cached_has_bits & 0x00000020u) {
      previous_ledger_seq_ = from.previous_ledger_seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      tx_seq_ = from.tx_seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      metadata_version_ = from.metadata_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unique_asset())) return false;
  if (has_thresholds()) {
    if (!this->thresholds_->IsInitialized()) return false;
  }
  return true;
}

void Account::Swap(Account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Account::InternalSwap(Account* other) {
  assets_.InternalSwap(&other->assets_);
  signers_.InternalSwap(&other->signers_);
  unique_asset_.InternalSwap(&other->unique_asset_);
  previous_tx_hash_.Swap(&other->previous_tx_hash_);
  account_address_.Swap(&other->account_address_);
  metadata_.Swap(&other->metadata_);
  std::swap(thresholds_, other->thresholds_);
  std::swap(account_balance_, other->account_balance_);
  std::swap(previous_ledger_seq_, other->previous_ledger_seq_);
  std::swap(tx_seq_, other->tx_seq_);
  std::swap(metadata_version_, other->metadata_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Account

// required int64 account_balance = 1;
bool Account::has_account_balance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Account::set_has_account_balance() {
  _has_bits_[0] |= 0x00000010u;
}
void Account::clear_has_account_balance() {
  _has_bits_[0] &= ~0x00000010u;
}
void Account::clear_account_balance() {
  account_balance_ = GOOGLE_LONGLONG(0);
  clear_has_account_balance();
}
::google::protobuf::int64 Account::account_balance() const {
  // @@protoc_insertion_point(field_get:protocol.Account.account_balance)
  return account_balance_;
}
void Account::set_account_balance(::google::protobuf::int64 value) {
  set_has_account_balance();
  account_balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.account_balance)
}

// required int64 previous_ledger_seq = 2;
bool Account::has_previous_ledger_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Account::set_has_previous_ledger_seq() {
  _has_bits_[0] |= 0x00000020u;
}
void Account::clear_has_previous_ledger_seq() {
  _has_bits_[0] &= ~0x00000020u;
}
void Account::clear_previous_ledger_seq() {
  previous_ledger_seq_ = GOOGLE_LONGLONG(0);
  clear_has_previous_ledger_seq();
}
::google::protobuf::int64 Account::previous_ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.Account.previous_ledger_seq)
  return previous_ledger_seq_;
}
void Account::set_previous_ledger_seq(::google::protobuf::int64 value) {
  set_has_previous_ledger_seq();
  previous_ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.previous_ledger_seq)
}

// required bytes previous_tx_hash = 3;
bool Account::has_previous_tx_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Account::set_has_previous_tx_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Account::clear_has_previous_tx_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Account::clear_previous_tx_hash() {
  previous_tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previous_tx_hash();
}
const ::std::string& Account::previous_tx_hash() const {
  // @@protoc_insertion_point(field_get:protocol.Account.previous_tx_hash)
  return previous_tx_hash_.GetNoArena();
}
void Account::set_previous_tx_hash(const ::std::string& value) {
  set_has_previous_tx_hash();
  previous_tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.previous_tx_hash)
}
#if LANG_CXX11
void Account::set_previous_tx_hash(::std::string&& value) {
  set_has_previous_tx_hash();
  previous_tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.previous_tx_hash)
}
#endif
void Account::set_previous_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previous_tx_hash();
  previous_tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.previous_tx_hash)
}
void Account::set_previous_tx_hash(const void* value, size_t size) {
  set_has_previous_tx_hash();
  previous_tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.previous_tx_hash)
}
::std::string* Account::mutable_previous_tx_hash() {
  set_has_previous_tx_hash();
  // @@protoc_insertion_point(field_mutable:protocol.Account.previous_tx_hash)
  return previous_tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_previous_tx_hash() {
  // @@protoc_insertion_point(field_release:protocol.Account.previous_tx_hash)
  clear_has_previous_tx_hash();
  return previous_tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_previous_tx_hash(::std::string* previous_tx_hash) {
  if (previous_tx_hash != NULL) {
    set_has_previous_tx_hash();
  } else {
    clear_has_previous_tx_hash();
  }
  previous_tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_tx_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.previous_tx_hash)
}

// required string account_address = 4;
bool Account::has_account_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Account::set_has_account_address() {
  _has_bits_[0] |= 0x00000002u;
}
void Account::clear_has_account_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void Account::clear_account_address() {
  account_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_address();
}
const ::std::string& Account::account_address() const {
  // @@protoc_insertion_point(field_get:protocol.Account.account_address)
  return account_address_.GetNoArena();
}
void Account::set_account_address(const ::std::string& value) {
  set_has_account_address();
  account_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.account_address)
}
#if LANG_CXX11
void Account::set_account_address(::std::string&& value) {
  set_has_account_address();
  account_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.account_address)
}
#endif
void Account::set_account_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_address();
  account_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.account_address)
}
void Account::set_account_address(const char* value, size_t size) {
  set_has_account_address();
  account_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.account_address)
}
::std::string* Account::mutable_account_address() {
  set_has_account_address();
  // @@protoc_insertion_point(field_mutable:protocol.Account.account_address)
  return account_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_account_address() {
  // @@protoc_insertion_point(field_release:protocol.Account.account_address)
  clear_has_account_address();
  return account_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_account_address(::std::string* account_address) {
  if (account_address != NULL) {
    set_has_account_address();
  } else {
    clear_has_account_address();
  }
  account_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.account_address)
}

// repeated .protocol.Asset assets = 5;
int Account::assets_size() const {
  return assets_.size();
}
void Account::clear_assets() {
  assets_.Clear();
}
const ::protocol::Asset& Account::assets(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.assets)
  return assets_.Get(index);
}
::protocol::Asset* Account::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.assets)
  return assets_.Mutable(index);
}
::protocol::Asset* Account::add_assets() {
  // @@protoc_insertion_point(field_add:protocol.Account.assets)
  return assets_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Asset >*
Account::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.assets)
  return &assets_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Asset >&
Account::assets() const {
  // @@protoc_insertion_point(field_list:protocol.Account.assets)
  return assets_;
}

// required int64 tx_seq = 6;
bool Account::has_tx_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Account::set_has_tx_seq() {
  _has_bits_[0] |= 0x00000040u;
}
void Account::clear_has_tx_seq() {
  _has_bits_[0] &= ~0x00000040u;
}
void Account::clear_tx_seq() {
  tx_seq_ = GOOGLE_LONGLONG(0);
  clear_has_tx_seq();
}
::google::protobuf::int64 Account::tx_seq() const {
  // @@protoc_insertion_point(field_get:protocol.Account.tx_seq)
  return tx_seq_;
}
void Account::set_tx_seq(::google::protobuf::int64 value) {
  set_has_tx_seq();
  tx_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.tx_seq)
}

// required .protocol.AccountThreshold thresholds = 7;
bool Account::has_thresholds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Account::set_has_thresholds() {
  _has_bits_[0] |= 0x00000008u;
}
void Account::clear_has_thresholds() {
  _has_bits_[0] &= ~0x00000008u;
}
void Account::clear_thresholds() {
  if (thresholds_ != NULL) thresholds_->::protocol::AccountThreshold::Clear();
  clear_has_thresholds();
}
const ::protocol::AccountThreshold& Account::thresholds() const {
  // @@protoc_insertion_point(field_get:protocol.Account.thresholds)
  return thresholds_ != NULL ? *thresholds_
                         : *::protocol::AccountThreshold::internal_default_instance();
}
::protocol::AccountThreshold* Account::mutable_thresholds() {
  set_has_thresholds();
  if (thresholds_ == NULL) {
    thresholds_ = new ::protocol::AccountThreshold;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Account.thresholds)
  return thresholds_;
}
::protocol::AccountThreshold* Account::release_thresholds() {
  // @@protoc_insertion_point(field_release:protocol.Account.thresholds)
  clear_has_thresholds();
  ::protocol::AccountThreshold* temp = thresholds_;
  thresholds_ = NULL;
  return temp;
}
void Account::set_allocated_thresholds(::protocol::AccountThreshold* thresholds) {
  delete thresholds_;
  thresholds_ = thresholds;
  if (thresholds) {
    set_has_thresholds();
  } else {
    clear_has_thresholds();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.thresholds)
}

// repeated .protocol.Signer signers = 8;
int Account::signers_size() const {
  return signers_.size();
}
void Account::clear_signers() {
  signers_.Clear();
}
const ::protocol::Signer& Account::signers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.signers)
  return signers_.Get(index);
}
::protocol::Signer* Account::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.signers)
  return signers_.Mutable(index);
}
::protocol::Signer* Account::add_signers() {
  // @@protoc_insertion_point(field_add:protocol.Account.signers)
  return signers_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Signer >*
Account::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.signers)
  return &signers_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Signer >&
Account::signers() const {
  // @@protoc_insertion_point(field_list:protocol.Account.signers)
  return signers_;
}

// required bytes metadata = 9;
bool Account::has_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Account::set_has_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
void Account::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
void Account::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& Account::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.Account.metadata)
  return metadata_.GetNoArena();
}
void Account::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.metadata)
}
#if LANG_CXX11
void Account::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.metadata)
}
#endif
void Account::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.metadata)
}
void Account::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.metadata)
}
::std::string* Account::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.Account.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.Account.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.metadata)
}

// optional int64 metadata_version = 10;
bool Account::has_metadata_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Account::set_has_metadata_version() {
  _has_bits_[0] |= 0x00000080u;
}
void Account::clear_has_metadata_version() {
  _has_bits_[0] &= ~0x00000080u;
}
void Account::clear_metadata_version() {
  metadata_version_ = GOOGLE_LONGLONG(0);
  clear_has_metadata_version();
}
::google::protobuf::int64 Account::metadata_version() const {
  // @@protoc_insertion_point(field_get:protocol.Account.metadata_version)
  return metadata_version_;
}
void Account::set_metadata_version(::google::protobuf::int64 value) {
  set_has_metadata_version();
  metadata_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.metadata_version)
}

// repeated .protocol.UniqueAsset unique_asset = 11;
int Account::unique_asset_size() const {
  return unique_asset_.size();
}
void Account::clear_unique_asset() {
  unique_asset_.Clear();
}
const ::protocol::UniqueAsset& Account::unique_asset(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.unique_asset)
  return unique_asset_.Get(index);
}
::protocol::UniqueAsset* Account::mutable_unique_asset(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.unique_asset)
  return unique_asset_.Mutable(index);
}
::protocol::UniqueAsset* Account::add_unique_asset() {
  // @@protoc_insertion_point(field_add:protocol.Account.unique_asset)
  return unique_asset_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::UniqueAsset >*
Account::mutable_unique_asset() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.unique_asset)
  return &unique_asset_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::UniqueAsset >&
Account::unique_asset() const {
  // @@protoc_insertion_point(field_list:protocol.Account.unique_asset)
  return unique_asset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeRequest::kIdFieldNumber;
const int UpgradeRequest::kTimeFieldNumber;
const int UpgradeRequest::kLedgerVersionFieldNumber;
const int UpgradeRequest::kAddValidatorFieldNumber;
const int UpgradeRequest::kNewLedgerVersionFieldNumber;
const int UpgradeRequest::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeRequest::UpgradeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.UpgradeRequest)
}
UpgradeRequest::UpgradeRequest(const UpgradeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  add_validator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_add_validator()) {
    add_validator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_validator_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&time_) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.UpgradeRequest)
}

void UpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_validator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&time_) + sizeof(start_time_));
}

UpgradeRequest::~UpgradeRequest() {
  // @@protoc_insertion_point(destructor:protocol.UpgradeRequest)
  SharedDtor();
}

void UpgradeRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_validator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeRequest::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpgradeRequest& UpgradeRequest::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeRequest* UpgradeRequest::New(::google::protobuf::Arena* arena) const {
  UpgradeRequest* n = new UpgradeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UpgradeRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_add_validator()) {
      GOOGLE_DCHECK(!add_validator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*add_validator_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&time_, 0, reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&time_) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.UpgradeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.UpgradeRequest.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ledger_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ledger_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string add_validator = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add_validator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->add_validator().data(), this->add_validator().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.UpgradeRequest.add_validator");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_ledger_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_new_ledger_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_ledger_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.UpgradeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.UpgradeRequest)
  return false;
#undef DO_
}

void UpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.UpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.UpgradeRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required uint32 ledger_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ledger_version(), output);
  }

  // optional string add_validator = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->add_validator().data(), this->add_validator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.UpgradeRequest.add_validator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->add_validator(), output);
  }

  // optional uint32 new_ledger_version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_ledger_version(), output);
  }

  // required uint64 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.UpgradeRequest)
}

::google::protobuf::uint8* UpgradeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.UpgradeRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required uint32 ledger_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ledger_version(), target);
  }

  // optional string add_validator = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->add_validator().data(), this->add_validator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.UpgradeRequest.add_validator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->add_validator(), target);
  }

  // optional uint32 new_ledger_version = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_ledger_version(), target);
  }

  // required uint64 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UpgradeRequest)
  return target;
}

size_t UpgradeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.UpgradeRequest)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_ledger_version()) {
    // required uint32 ledger_version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());
  }

  if (has_start_time()) {
    // required uint64 start_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());
  }

  return total_size;
}
size_t UpgradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UpgradeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002d) ^ 0x0000002d) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required uint32 ledger_version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());

    // required uint64 start_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string add_validator = 4;
  if (has_add_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->add_validator());
  }

  // optional uint32 new_ledger_version = 5;
  if (has_new_ledger_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->new_ledger_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UpgradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UpgradeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UpgradeRequest)
    MergeFrom(*source);
  }
}

void UpgradeRequest::MergeFrom(const UpgradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UpgradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_add_validator();
      add_validator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_validator_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      ledger_version_ = from.ledger_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      new_ledger_version_ = from.new_ledger_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UpgradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeRequest::CopyFrom(const UpgradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UpgradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002d) != 0x0000002d) return false;
  return true;
}

void UpgradeRequest::Swap(UpgradeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeRequest::InternalSwap(UpgradeRequest* other) {
  id_.Swap(&other->id_);
  add_validator_.Swap(&other->add_validator_);
  std::swap(time_, other->time_);
  std::swap(ledger_version_, other->ledger_version_);
  std::swap(new_ledger_version_, other->new_ledger_version_);
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeRequest::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeRequest

// required string id = 1;
bool UpgradeRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpgradeRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpgradeRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpgradeRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& UpgradeRequest::id() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequest.id)
  return id_.GetNoArena();
}
void UpgradeRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpgradeRequest.id)
}
#if LANG_CXX11
void UpgradeRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpgradeRequest.id)
}
#endif
void UpgradeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpgradeRequest.id)
}
void UpgradeRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpgradeRequest.id)
}
::std::string* UpgradeRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.UpgradeRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeRequest::release_id() {
  // @@protoc_insertion_point(field_release:protocol.UpgradeRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpgradeRequest.id)
}

// required uint64 time = 2;
bool UpgradeRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpgradeRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void UpgradeRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpgradeRequest::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 UpgradeRequest::time() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequest.time)
  return time_;
}
void UpgradeRequest::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpgradeRequest.time)
}

// required uint32 ledger_version = 3;
bool UpgradeRequest::has_ledger_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpgradeRequest::set_has_ledger_version() {
  _has_bits_[0] |= 0x00000008u;
}
void UpgradeRequest::clear_has_ledger_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpgradeRequest::clear_ledger_version() {
  ledger_version_ = 0u;
  clear_has_ledger_version();
}
::google::protobuf::uint32 UpgradeRequest::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequest.ledger_version)
  return ledger_version_;
}
void UpgradeRequest::set_ledger_version(::google::protobuf::uint32 value) {
  set_has_ledger_version();
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpgradeRequest.ledger_version)
}

// optional string add_validator = 4;
bool UpgradeRequest::has_add_validator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpgradeRequest::set_has_add_validator() {
  _has_bits_[0] |= 0x00000002u;
}
void UpgradeRequest::clear_has_add_validator() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpgradeRequest::clear_add_validator() {
  add_validator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_add_validator();
}
const ::std::string& UpgradeRequest::add_validator() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequest.add_validator)
  return add_validator_.GetNoArena();
}
void UpgradeRequest::set_add_validator(const ::std::string& value) {
  set_has_add_validator();
  add_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpgradeRequest.add_validator)
}
#if LANG_CXX11
void UpgradeRequest::set_add_validator(::std::string&& value) {
  set_has_add_validator();
  add_validator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpgradeRequest.add_validator)
}
#endif
void UpgradeRequest::set_add_validator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_add_validator();
  add_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpgradeRequest.add_validator)
}
void UpgradeRequest::set_add_validator(const char* value, size_t size) {
  set_has_add_validator();
  add_validator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpgradeRequest.add_validator)
}
::std::string* UpgradeRequest::mutable_add_validator() {
  set_has_add_validator();
  // @@protoc_insertion_point(field_mutable:protocol.UpgradeRequest.add_validator)
  return add_validator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpgradeRequest::release_add_validator() {
  // @@protoc_insertion_point(field_release:protocol.UpgradeRequest.add_validator)
  clear_has_add_validator();
  return add_validator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpgradeRequest::set_allocated_add_validator(::std::string* add_validator) {
  if (add_validator != NULL) {
    set_has_add_validator();
  } else {
    clear_has_add_validator();
  }
  add_validator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_validator);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpgradeRequest.add_validator)
}

// optional uint32 new_ledger_version = 5;
bool UpgradeRequest::has_new_ledger_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UpgradeRequest::set_has_new_ledger_version() {
  _has_bits_[0] |= 0x00000010u;
}
void UpgradeRequest::clear_has_new_ledger_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void UpgradeRequest::clear_new_ledger_version() {
  new_ledger_version_ = 0u;
  clear_has_new_ledger_version();
}
::google::protobuf::uint32 UpgradeRequest::new_ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequest.new_ledger_version)
  return new_ledger_version_;
}
void UpgradeRequest::set_new_ledger_version(::google::protobuf::uint32 value) {
  set_has_new_ledger_version();
  new_ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpgradeRequest.new_ledger_version)
}

// required uint64 start_time = 6;
bool UpgradeRequest::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UpgradeRequest::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void UpgradeRequest::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void UpgradeRequest::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
::google::protobuf::uint64 UpgradeRequest::start_time() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequest.start_time)
  return start_time_;
}
void UpgradeRequest::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpgradeRequest.start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeRequestEnv::kRequestFieldNumber;
const int UpgradeRequestEnv::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeRequestEnv::UpgradeRequestEnv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.UpgradeRequestEnv)
}
UpgradeRequestEnv::UpgradeRequestEnv(const UpgradeRequestEnv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::protocol::UpgradeRequest(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::protocol::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.UpgradeRequestEnv)
}

void UpgradeRequestEnv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_, 0, reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&request_) + sizeof(signature_));
}

UpgradeRequestEnv::~UpgradeRequestEnv() {
  // @@protoc_insertion_point(destructor:protocol.UpgradeRequestEnv)
  SharedDtor();
}

void UpgradeRequestEnv::SharedDtor() {
  if (this != internal_default_instance()) {
    delete request_;
  }
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void UpgradeRequestEnv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeRequestEnv::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpgradeRequestEnv& UpgradeRequestEnv::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpgradeRequestEnv* UpgradeRequestEnv::New(::google::protobuf::Arena* arena) const {
  UpgradeRequestEnv* n = new UpgradeRequestEnv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeRequestEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UpgradeRequestEnv)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_request()) {
      GOOGLE_DCHECK(request_ != NULL);
      request_->::protocol::UpgradeRequest::Clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->::protocol::Signature::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpgradeRequestEnv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.UpgradeRequestEnv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.UpgradeRequest request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.UpgradeRequestEnv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.UpgradeRequestEnv)
  return false;
#undef DO_
}

void UpgradeRequestEnv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.UpgradeRequestEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.UpgradeRequest request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.UpgradeRequestEnv)
}

::google::protobuf::uint8* UpgradeRequestEnv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UpgradeRequestEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.UpgradeRequest request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, deterministic, target);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->signature_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UpgradeRequestEnv)
  return target;
}

size_t UpgradeRequestEnv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.UpgradeRequestEnv)
  size_t total_size = 0;

  if (has_request()) {
    // required .protocol.UpgradeRequest request = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  if (has_signature()) {
    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  return total_size;
}
size_t UpgradeRequestEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UpgradeRequestEnv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.UpgradeRequest request = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);

    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeRequestEnv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UpgradeRequestEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeRequestEnv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeRequestEnv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UpgradeRequestEnv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UpgradeRequestEnv)
    MergeFrom(*source);
  }
}

void UpgradeRequestEnv::MergeFrom(const UpgradeRequestEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UpgradeRequestEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_request()->::protocol::UpgradeRequest::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::protocol::Signature::MergeFrom(from.signature());
    }
  }
}

void UpgradeRequestEnv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UpgradeRequestEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeRequestEnv::CopyFrom(const UpgradeRequestEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UpgradeRequestEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeRequestEnv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void UpgradeRequestEnv::Swap(UpgradeRequestEnv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeRequestEnv::InternalSwap(UpgradeRequestEnv* other) {
  std::swap(request_, other->request_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeRequestEnv::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeRequestEnv

// required .protocol.UpgradeRequest request = 1;
bool UpgradeRequestEnv::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpgradeRequestEnv::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
void UpgradeRequestEnv::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpgradeRequestEnv::clear_request() {
  if (request_ != NULL) request_->::protocol::UpgradeRequest::Clear();
  clear_has_request();
}
const ::protocol::UpgradeRequest& UpgradeRequestEnv::request() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequestEnv.request)
  return request_ != NULL ? *request_
                         : *::protocol::UpgradeRequest::internal_default_instance();
}
::protocol::UpgradeRequest* UpgradeRequestEnv::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::protocol::UpgradeRequest;
  }
  // @@protoc_insertion_point(field_mutable:protocol.UpgradeRequestEnv.request)
  return request_;
}
::protocol::UpgradeRequest* UpgradeRequestEnv::release_request() {
  // @@protoc_insertion_point(field_release:protocol.UpgradeRequestEnv.request)
  clear_has_request();
  ::protocol::UpgradeRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void UpgradeRequestEnv::set_allocated_request(::protocol::UpgradeRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.UpgradeRequestEnv.request)
}

// required .protocol.Signature signature = 2;
bool UpgradeRequestEnv::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpgradeRequestEnv::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void UpgradeRequestEnv::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpgradeRequestEnv::clear_signature() {
  if (signature_ != NULL) signature_->::protocol::Signature::Clear();
  clear_has_signature();
}
const ::protocol::Signature& UpgradeRequestEnv::signature() const {
  // @@protoc_insertion_point(field_get:protocol.UpgradeRequestEnv.signature)
  return signature_ != NULL ? *signature_
                         : *::protocol::Signature::internal_default_instance();
}
::protocol::Signature* UpgradeRequestEnv::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.UpgradeRequestEnv.signature)
  return signature_;
}
::protocol::Signature* UpgradeRequestEnv::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.UpgradeRequestEnv.signature)
  clear_has_signature();
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void UpgradeRequestEnv::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.UpgradeRequestEnv.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerUpgrade::kNewLedgerVersionFieldNumber;
const int LedgerUpgrade::kNewBaseFeeFieldNumber;
const int LedgerUpgrade::kNewBaseReserveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerUpgrade::LedgerUpgrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.LedgerUpgrade)
}
LedgerUpgrade::LedgerUpgrade(const LedgerUpgrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_ledger_version_, &from.new_ledger_version_,
    reinterpret_cast<char*>(&new_base_reserve_) -
    reinterpret_cast<char*>(&new_ledger_version_) + sizeof(new_base_reserve_));
  // @@protoc_insertion_point(copy_constructor:protocol.LedgerUpgrade)
}

void LedgerUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&new_ledger_version_, 0, reinterpret_cast<char*>(&new_base_reserve_) -
    reinterpret_cast<char*>(&new_ledger_version_) + sizeof(new_base_reserve_));
}

LedgerUpgrade::~LedgerUpgrade() {
  // @@protoc_insertion_point(destructor:protocol.LedgerUpgrade)
  SharedDtor();
}

void LedgerUpgrade::SharedDtor() {
}

void LedgerUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedgerUpgrade::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LedgerUpgrade& LedgerUpgrade::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

LedgerUpgrade* LedgerUpgrade::New(::google::protobuf::Arena* arena) const {
  LedgerUpgrade* n = new LedgerUpgrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LedgerUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LedgerUpgrade)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&new_ledger_version_, 0, reinterpret_cast<char*>(&new_base_reserve_) -
      reinterpret_cast<char*>(&new_ledger_version_) + sizeof(new_base_reserve_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LedgerUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.LedgerUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_ledger_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_new_ledger_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_ledger_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_base_fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_new_base_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_base_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_base_reserve = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_new_base_reserve();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_base_reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.LedgerUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.LedgerUpgrade)
  return false;
#undef DO_
}

void LedgerUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.LedgerUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_ledger_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_ledger_version(), output);
  }

  // optional uint32 new_base_fee = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_base_fee(), output);
  }

  // optional uint32 new_base_reserve = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_base_reserve(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.LedgerUpgrade)
}

::google::protobuf::uint8* LedgerUpgrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LedgerUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_ledger_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_ledger_version(), target);
  }

  // optional uint32 new_base_fee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_base_fee(), target);
  }

  // optional uint32 new_base_reserve = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_base_reserve(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LedgerUpgrade)
  return target;
}

size_t LedgerUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LedgerUpgrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 new_ledger_version = 1;
    if (has_new_ledger_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_ledger_version());
    }

    // optional uint32 new_base_fee = 2;
    if (has_new_base_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_base_fee());
    }

    // optional uint32 new_base_reserve = 3;
    if (has_new_base_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_base_reserve());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedgerUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LedgerUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerUpgrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LedgerUpgrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LedgerUpgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LedgerUpgrade)
    MergeFrom(*source);
  }
}

void LedgerUpgrade::MergeFrom(const LedgerUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LedgerUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      new_ledger_version_ = from.new_ledger_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_base_fee_ = from.new_base_fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_base_reserve_ = from.new_base_reserve_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LedgerUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LedgerUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerUpgrade::CopyFrom(const LedgerUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LedgerUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerUpgrade::IsInitialized() const {
  return true;
}

void LedgerUpgrade::Swap(LedgerUpgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerUpgrade::InternalSwap(LedgerUpgrade* other) {
  std::swap(new_ledger_version_, other->new_ledger_version_);
  std::swap(new_base_fee_, other->new_base_fee_);
  std::swap(new_base_reserve_, other->new_base_reserve_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LedgerUpgrade::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LedgerUpgrade

// optional uint32 new_ledger_version = 1;
bool LedgerUpgrade::has_new_ledger_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LedgerUpgrade::set_has_new_ledger_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LedgerUpgrade::clear_has_new_ledger_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LedgerUpgrade::clear_new_ledger_version() {
  new_ledger_version_ = 0u;
  clear_has_new_ledger_version();
}
::google::protobuf::uint32 LedgerUpgrade::new_ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgrade.new_ledger_version)
  return new_ledger_version_;
}
void LedgerUpgrade::set_new_ledger_version(::google::protobuf::uint32 value) {
  set_has_new_ledger_version();
  new_ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerUpgrade.new_ledger_version)
}

// optional uint32 new_base_fee = 2;
bool LedgerUpgrade::has_new_base_fee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LedgerUpgrade::set_has_new_base_fee() {
  _has_bits_[0] |= 0x00000002u;
}
void LedgerUpgrade::clear_has_new_base_fee() {
  _has_bits_[0] &= ~0x00000002u;
}
void LedgerUpgrade::clear_new_base_fee() {
  new_base_fee_ = 0u;
  clear_has_new_base_fee();
}
::google::protobuf::uint32 LedgerUpgrade::new_base_fee() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgrade.new_base_fee)
  return new_base_fee_;
}
void LedgerUpgrade::set_new_base_fee(::google::protobuf::uint32 value) {
  set_has_new_base_fee();
  new_base_fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerUpgrade.new_base_fee)
}

// optional uint32 new_base_reserve = 3;
bool LedgerUpgrade::has_new_base_reserve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LedgerUpgrade::set_has_new_base_reserve() {
  _has_bits_[0] |= 0x00000004u;
}
void LedgerUpgrade::clear_has_new_base_reserve() {
  _has_bits_[0] &= ~0x00000004u;
}
void LedgerUpgrade::clear_new_base_reserve() {
  new_base_reserve_ = 0u;
  clear_has_new_base_reserve();
}
::google::protobuf::uint32 LedgerUpgrade::new_base_reserve() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgrade.new_base_reserve)
  return new_base_reserve_;
}
void LedgerUpgrade::set_new_base_reserve(::google::protobuf::uint32 value) {
  set_has_new_base_reserve();
  new_base_reserve_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerUpgrade.new_base_reserve)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kHashSetFieldNumber;
const int Value::kCloseTimeFieldNumber;
const int Value::kLedgerUpgradeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_set_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash_set()) {
    hash_set_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_set_);
  }
  if (from.has_ledger_upgrade()) {
    ledger_upgrade_ = new ::protocol::LedgerUpgrade(*from.ledger_upgrade_);
  } else {
    ledger_upgrade_ = NULL;
  }
  close_time_ = from.close_time_;
  // @@protoc_insertion_point(copy_constructor:protocol.Value)
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  hash_set_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ledger_upgrade_, 0, reinterpret_cast<char*>(&close_time_) -
    reinterpret_cast<char*>(&ledger_upgrade_) + sizeof(close_time_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:protocol.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  hash_set_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete ledger_upgrade_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value& Value::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Value)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hash_set()) {
      GOOGLE_DCHECK(!hash_set_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_set_.UnsafeRawStringPointer())->clear();
    }
    if (has_ledger_upgrade()) {
      GOOGLE_DCHECK(ledger_upgrade_ != NULL);
      ledger_upgrade_->::protocol::LedgerUpgrade::Clear();
    }
  }
  close_time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 close_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_close_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.LedgerUpgrade ledger_upgrade = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ledger_upgrade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash_set = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash_set(), output);
  }

  // required uint64 close_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->close_time(), output);
  }

  // optional .protocol.LedgerUpgrade ledger_upgrade = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ledger_upgrade_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash_set(), target);
  }

  // required uint64 close_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->close_time(), target);
  }

  // optional .protocol.LedgerUpgrade ledger_upgrade = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ledger_upgrade_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Value)
  return target;
}

size_t Value::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Value)
  size_t total_size = 0;

  if (has_hash_set()) {
    // required bytes hash_set = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash_set());
  }

  if (has_close_time()) {
    // required uint64 close_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->close_time());
  }

  return total_size;
}
size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes hash_set = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash_set());

    // required uint64 close_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->close_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .protocol.LedgerUpgrade ledger_upgrade = 3;
  if (has_ledger_upgrade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ledger_upgrade_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash_set();
      hash_set_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_set_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ledger_upgrade()->::protocol::LedgerUpgrade::MergeFrom(from.ledger_upgrade());
    }
    if (cached_has_bits & 0x00000004u) {
      close_time_ = from.close_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  hash_set_.Swap(&other->hash_set_);
  std::swap(ledger_upgrade_, other->ledger_upgrade_);
  std::swap(close_time_, other->close_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// required bytes hash_set = 1;
bool Value::has_hash_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Value::set_has_hash_set() {
  _has_bits_[0] |= 0x00000001u;
}
void Value::clear_has_hash_set() {
  _has_bits_[0] &= ~0x00000001u;
}
void Value::clear_hash_set() {
  hash_set_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash_set();
}
const ::std::string& Value::hash_set() const {
  // @@protoc_insertion_point(field_get:protocol.Value.hash_set)
  return hash_set_.GetNoArena();
}
void Value::set_hash_set(const ::std::string& value) {
  set_has_hash_set();
  hash_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Value.hash_set)
}
#if LANG_CXX11
void Value::set_hash_set(::std::string&& value) {
  set_has_hash_set();
  hash_set_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Value.hash_set)
}
#endif
void Value::set_hash_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash_set();
  hash_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Value.hash_set)
}
void Value::set_hash_set(const void* value, size_t size) {
  set_has_hash_set();
  hash_set_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Value.hash_set)
}
::std::string* Value::mutable_hash_set() {
  set_has_hash_set();
  // @@protoc_insertion_point(field_mutable:protocol.Value.hash_set)
  return hash_set_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_hash_set() {
  // @@protoc_insertion_point(field_release:protocol.Value.hash_set)
  clear_has_hash_set();
  return hash_set_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value::set_allocated_hash_set(::std::string* hash_set) {
  if (hash_set != NULL) {
    set_has_hash_set();
  } else {
    clear_has_hash_set();
  }
  hash_set_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_set);
  // @@protoc_insertion_point(field_set_allocated:protocol.Value.hash_set)
}

// required uint64 close_time = 2;
bool Value::has_close_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Value::set_has_close_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Value::clear_has_close_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Value::clear_close_time() {
  close_time_ = GOOGLE_ULONGLONG(0);
  clear_has_close_time();
}
::google::protobuf::uint64 Value::close_time() const {
  // @@protoc_insertion_point(field_get:protocol.Value.close_time)
  return close_time_;
}
void Value::set_close_time(::google::protobuf::uint64 value) {
  set_has_close_time();
  close_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Value.close_time)
}

// optional .protocol.LedgerUpgrade ledger_upgrade = 3;
bool Value::has_ledger_upgrade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Value::set_has_ledger_upgrade() {
  _has_bits_[0] |= 0x00000002u;
}
void Value::clear_has_ledger_upgrade() {
  _has_bits_[0] &= ~0x00000002u;
}
void Value::clear_ledger_upgrade() {
  if (ledger_upgrade_ != NULL) ledger_upgrade_->::protocol::LedgerUpgrade::Clear();
  clear_has_ledger_upgrade();
}
const ::protocol::LedgerUpgrade& Value::ledger_upgrade() const {
  // @@protoc_insertion_point(field_get:protocol.Value.ledger_upgrade)
  return ledger_upgrade_ != NULL ? *ledger_upgrade_
                         : *::protocol::LedgerUpgrade::internal_default_instance();
}
::protocol::LedgerUpgrade* Value::mutable_ledger_upgrade() {
  set_has_ledger_upgrade();
  if (ledger_upgrade_ == NULL) {
    ledger_upgrade_ = new ::protocol::LedgerUpgrade;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Value.ledger_upgrade)
  return ledger_upgrade_;
}
::protocol::LedgerUpgrade* Value::release_ledger_upgrade() {
  // @@protoc_insertion_point(field_release:protocol.Value.ledger_upgrade)
  clear_has_ledger_upgrade();
  ::protocol::LedgerUpgrade* temp = ledger_upgrade_;
  ledger_upgrade_ = NULL;
  return temp;
}
void Value::set_allocated_ledger_upgrade(::protocol::LedgerUpgrade* ledger_upgrade) {
  delete ledger_upgrade_;
  ledger_upgrade_ = ledger_upgrade;
  if (ledger_upgrade) {
    set_has_ledger_upgrade();
  } else {
    clear_has_ledger_upgrade();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Value.ledger_upgrade)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerHeader::kParentHashFieldNumber;
const int LedgerHeader::kTransactionTreeHashFieldNumber;
const int LedgerHeader::kAccountTreeHashFieldNumber;
const int LedgerHeader::kLedgerSequenceFieldNumber;
const int LedgerHeader::kConsensusValueFieldNumber;
const int LedgerHeader::kHashFieldNumber;
const int LedgerHeader::kBaseFeeFieldNumber;
const int LedgerHeader::kBaseReserveFieldNumber;
const int LedgerHeader::kLedgerVersionFieldNumber;
const int LedgerHeader::kTxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerHeader::LedgerHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.LedgerHeader)
}
LedgerHeader::LedgerHeader(const LedgerHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_hash()) {
    parent_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_hash_);
  }
  transaction_tree_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_tree_hash()) {
    transaction_tree_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_tree_hash_);
  }
  account_tree_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_tree_hash()) {
    account_tree_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_tree_hash_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_consensus_value()) {
    consensus_value_ = new ::protocol::Value(*from.consensus_value_);
  } else {
    consensus_value_ = NULL;
  }
  ::memcpy(&ledger_sequence_, &from.ledger_sequence_,
    reinterpret_cast<char*>(&ledger_version_) -
    reinterpret_cast<char*>(&ledger_sequence_) + sizeof(ledger_version_));
  // @@protoc_insertion_point(copy_constructor:protocol.LedgerHeader)
}

void LedgerHeader::SharedCtor() {
  _cached_size_ = 0;
  parent_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_tree_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_tree_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&consensus_value_, 0, reinterpret_cast<char*>(&ledger_version_) -
    reinterpret_cast<char*>(&consensus_value_) + sizeof(ledger_version_));
}

LedgerHeader::~LedgerHeader() {
  // @@protoc_insertion_point(destructor:protocol.LedgerHeader)
  SharedDtor();
}

void LedgerHeader::SharedDtor() {
  parent_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_tree_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_tree_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete consensus_value_;
  }
}

void LedgerHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedgerHeader::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LedgerHeader& LedgerHeader::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

LedgerHeader* LedgerHeader::New(::google::protobuf::Arena* arena) const {
  LedgerHeader* n = new LedgerHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LedgerHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LedgerHeader)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_parent_hash()) {
      GOOGLE_DCHECK(!parent_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parent_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_transaction_tree_hash()) {
      GOOGLE_DCHECK(!transaction_tree_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_tree_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_tree_hash()) {
      GOOGLE_DCHECK(!account_tree_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_tree_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_hash()) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_consensus_value()) {
      GOOGLE_DCHECK(consensus_value_ != NULL);
      consensus_value_->::protocol::Value::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&ledger_sequence_, 0, reinterpret_cast<char*>(&base_reserve_) -
      reinterpret_cast<char*>(&ledger_sequence_) + sizeof(base_reserve_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&tx_count_, 0, reinterpret_cast<char*>(&ledger_version_) -
      reinterpret_cast<char*>(&tx_count_) + sizeof(ledger_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LedgerHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.LedgerHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes parent_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parent_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes transaction_tree_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_tree_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account_tree_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_tree_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 ledger_sequence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ledger_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Value consensus_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 base_fee = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_base_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 base_reserve = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_base_reserve();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ledger_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_ledger_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 tx_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_tx_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.LedgerHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.LedgerHeader)
  return false;
#undef DO_
}

void LedgerHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.LedgerHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes parent_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->parent_hash(), output);
  }

  // required bytes transaction_tree_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction_tree_hash(), output);
  }

  // required bytes account_tree_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->account_tree_hash(), output);
  }

  // required int64 ledger_sequence = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ledger_sequence(), output);
  }

  // required .protocol.Value consensus_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->consensus_value_, output);
  }

  // required bytes hash = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->hash(), output);
  }

  // required uint32 base_fee = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->base_fee(), output);
  }

  // required uint32 base_reserve = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->base_reserve(), output);
  }

  // required uint32 ledger_version = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ledger_version(), output);
  }

  // required int64 tx_count = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->tx_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.LedgerHeader)
}

::google::protobuf::uint8* LedgerHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LedgerHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes parent_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->parent_hash(), target);
  }

  // required bytes transaction_tree_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction_tree_hash(), target);
  }

  // required bytes account_tree_hash = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account_tree_hash(), target);
  }

  // required int64 ledger_sequence = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ledger_sequence(), target);
  }

  // required .protocol.Value consensus_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->consensus_value_, deterministic, target);
  }

  // required bytes hash = 6;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->hash(), target);
  }

  // required uint32 base_fee = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->base_fee(), target);
  }

  // required uint32 base_reserve = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->base_reserve(), target);
  }

  // required uint32 ledger_version = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ledger_version(), target);
  }

  // required int64 tx_count = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->tx_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LedgerHeader)
  return target;
}

size_t LedgerHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.LedgerHeader)
  size_t total_size = 0;

  if (has_parent_hash()) {
    // required bytes parent_hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parent_hash());
  }

  if (has_transaction_tree_hash()) {
    // required bytes transaction_tree_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_tree_hash());
  }

  if (has_account_tree_hash()) {
    // required bytes account_tree_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account_tree_hash());
  }

  if (has_hash()) {
    // required bytes hash = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  if (has_consensus_value()) {
    // required .protocol.Value consensus_value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_value_);
  }

  if (has_ledger_sequence()) {
    // required int64 ledger_sequence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_sequence());
  }

  if (has_base_fee()) {
    // required uint32 base_fee = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_fee());
  }

  if (has_base_reserve()) {
    // required uint32 base_reserve = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_reserve());
  }

  if (has_tx_count()) {
    // required int64 tx_count = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_count());
  }

  if (has_ledger_version()) {
    // required uint32 ledger_version = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());
  }

  return total_size;
}
size_t LedgerHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LedgerHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required bytes parent_hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parent_hash());

    // required bytes transaction_tree_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_tree_hash());

    // required bytes account_tree_hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account_tree_hash());

    // required bytes hash = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

    // required .protocol.Value consensus_value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_value_);

    // required int64 ledger_sequence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_sequence());

    // required uint32 base_fee = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_fee());

    // required uint32 base_reserve = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_reserve());

    // required int64 tx_count = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_count());

    // required uint32 ledger_version = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedgerHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LedgerHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LedgerHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LedgerHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LedgerHeader)
    MergeFrom(*source);
  }
}

void LedgerHeader::MergeFrom(const LedgerHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LedgerHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_parent_hash();
      parent_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_transaction_tree_hash();
      transaction_tree_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_tree_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_account_tree_hash();
      account_tree_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_tree_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_consensus_value()->::protocol::Value::MergeFrom(from.consensus_value());
    }
    if (cached_has_bits & 0x00000020u) {
      ledger_sequence_ = from.ledger_sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_fee_ = from.base_fee_;
    }
    if (cached_has_bits & 0x00000080u) {
      base_reserve_ = from.base_reserve_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      tx_count_ = from.tx_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      ledger_version_ = from.ledger_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LedgerHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LedgerHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerHeader::CopyFrom(const LedgerHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LedgerHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (has_consensus_value()) {
    if (!this->consensus_value_->IsInitialized()) return false;
  }
  return true;
}

void LedgerHeader::Swap(LedgerHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerHeader::InternalSwap(LedgerHeader* other) {
  parent_hash_.Swap(&other->parent_hash_);
  transaction_tree_hash_.Swap(&other->transaction_tree_hash_);
  account_tree_hash_.Swap(&other->account_tree_hash_);
  hash_.Swap(&other->hash_);
  std::swap(consensus_value_, other->consensus_value_);
  std::swap(ledger_sequence_, other->ledger_sequence_);
  std::swap(base_fee_, other->base_fee_);
  std::swap(base_reserve_, other->base_reserve_);
  std::swap(tx_count_, other->tx_count_);
  std::swap(ledger_version_, other->ledger_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LedgerHeader::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LedgerHeader

// required bytes parent_hash = 1;
bool LedgerHeader::has_parent_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LedgerHeader::set_has_parent_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void LedgerHeader::clear_has_parent_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void LedgerHeader::clear_parent_hash() {
  parent_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_hash();
}
const ::std::string& LedgerHeader::parent_hash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.parent_hash)
  return parent_hash_.GetNoArena();
}
void LedgerHeader::set_parent_hash(const ::std::string& value) {
  set_has_parent_hash();
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.parent_hash)
}
#if LANG_CXX11
void LedgerHeader::set_parent_hash(::std::string&& value) {
  set_has_parent_hash();
  parent_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.LedgerHeader.parent_hash)
}
#endif
void LedgerHeader::set_parent_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_hash();
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeader.parent_hash)
}
void LedgerHeader::set_parent_hash(const void* value, size_t size) {
  set_has_parent_hash();
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeader.parent_hash)
}
::std::string* LedgerHeader::mutable_parent_hash() {
  set_has_parent_hash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeader.parent_hash)
  return parent_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LedgerHeader::release_parent_hash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeader.parent_hash)
  clear_has_parent_hash();
  return parent_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LedgerHeader::set_allocated_parent_hash(::std::string* parent_hash) {
  if (parent_hash != NULL) {
    set_has_parent_hash();
  } else {
    clear_has_parent_hash();
  }
  parent_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeader.parent_hash)
}

// required bytes transaction_tree_hash = 2;
bool LedgerHeader::has_transaction_tree_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LedgerHeader::set_has_transaction_tree_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void LedgerHeader::clear_has_transaction_tree_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void LedgerHeader::clear_transaction_tree_hash() {
  transaction_tree_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_tree_hash();
}
const ::std::string& LedgerHeader::transaction_tree_hash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.transaction_tree_hash)
  return transaction_tree_hash_.GetNoArena();
}
void LedgerHeader::set_transaction_tree_hash(const ::std::string& value) {
  set_has_transaction_tree_hash();
  transaction_tree_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.transaction_tree_hash)
}
#if LANG_CXX11
void LedgerHeader::set_transaction_tree_hash(::std::string&& value) {
  set_has_transaction_tree_hash();
  transaction_tree_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.LedgerHeader.transaction_tree_hash)
}
#endif
void LedgerHeader::set_transaction_tree_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transaction_tree_hash();
  transaction_tree_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeader.transaction_tree_hash)
}
void LedgerHeader::set_transaction_tree_hash(const void* value, size_t size) {
  set_has_transaction_tree_hash();
  transaction_tree_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeader.transaction_tree_hash)
}
::std::string* LedgerHeader::mutable_transaction_tree_hash() {
  set_has_transaction_tree_hash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeader.transaction_tree_hash)
  return transaction_tree_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LedgerHeader::release_transaction_tree_hash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeader.transaction_tree_hash)
  clear_has_transaction_tree_hash();
  return transaction_tree_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LedgerHeader::set_allocated_transaction_tree_hash(::std::string* transaction_tree_hash) {
  if (transaction_tree_hash != NULL) {
    set_has_transaction_tree_hash();
  } else {
    clear_has_transaction_tree_hash();
  }
  transaction_tree_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_tree_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeader.transaction_tree_hash)
}

// required bytes account_tree_hash = 3;
bool LedgerHeader::has_account_tree_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LedgerHeader::set_has_account_tree_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void LedgerHeader::clear_has_account_tree_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void LedgerHeader::clear_account_tree_hash() {
  account_tree_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_tree_hash();
}
const ::std::string& LedgerHeader::account_tree_hash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.account_tree_hash)
  return account_tree_hash_.GetNoArena();
}
void LedgerHeader::set_account_tree_hash(const ::std::string& value) {
  set_has_account_tree_hash();
  account_tree_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.account_tree_hash)
}
#if LANG_CXX11
void LedgerHeader::set_account_tree_hash(::std::string&& value) {
  set_has_account_tree_hash();
  account_tree_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.LedgerHeader.account_tree_hash)
}
#endif
void LedgerHeader::set_account_tree_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_tree_hash();
  account_tree_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeader.account_tree_hash)
}
void LedgerHeader::set_account_tree_hash(const void* value, size_t size) {
  set_has_account_tree_hash();
  account_tree_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeader.account_tree_hash)
}
::std::string* LedgerHeader::mutable_account_tree_hash() {
  set_has_account_tree_hash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeader.account_tree_hash)
  return account_tree_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LedgerHeader::release_account_tree_hash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeader.account_tree_hash)
  clear_has_account_tree_hash();
  return account_tree_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LedgerHeader::set_allocated_account_tree_hash(::std::string* account_tree_hash) {
  if (account_tree_hash != NULL) {
    set_has_account_tree_hash();
  } else {
    clear_has_account_tree_hash();
  }
  account_tree_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_tree_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeader.account_tree_hash)
}

// required int64 ledger_sequence = 4;
bool LedgerHeader::has_ledger_sequence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LedgerHeader::set_has_ledger_sequence() {
  _has_bits_[0] |= 0x00000020u;
}
void LedgerHeader::clear_has_ledger_sequence() {
  _has_bits_[0] &= ~0x00000020u;
}
void LedgerHeader::clear_ledger_sequence() {
  ledger_sequence_ = GOOGLE_LONGLONG(0);
  clear_has_ledger_sequence();
}
::google::protobuf::int64 LedgerHeader::ledger_sequence() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.ledger_sequence)
  return ledger_sequence_;
}
void LedgerHeader::set_ledger_sequence(::google::protobuf::int64 value) {
  set_has_ledger_sequence();
  ledger_sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.ledger_sequence)
}

// required .protocol.Value consensus_value = 5;
bool LedgerHeader::has_consensus_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LedgerHeader::set_has_consensus_value() {
  _has_bits_[0] |= 0x00000010u;
}
void LedgerHeader::clear_has_consensus_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void LedgerHeader::clear_consensus_value() {
  if (consensus_value_ != NULL) consensus_value_->::protocol::Value::Clear();
  clear_has_consensus_value();
}
const ::protocol::Value& LedgerHeader::consensus_value() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.consensus_value)
  return consensus_value_ != NULL ? *consensus_value_
                         : *::protocol::Value::internal_default_instance();
}
::protocol::Value* LedgerHeader::mutable_consensus_value() {
  set_has_consensus_value();
  if (consensus_value_ == NULL) {
    consensus_value_ = new ::protocol::Value;
  }
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeader.consensus_value)
  return consensus_value_;
}
::protocol::Value* LedgerHeader::release_consensus_value() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeader.consensus_value)
  clear_has_consensus_value();
  ::protocol::Value* temp = consensus_value_;
  consensus_value_ = NULL;
  return temp;
}
void LedgerHeader::set_allocated_consensus_value(::protocol::Value* consensus_value) {
  delete consensus_value_;
  consensus_value_ = consensus_value;
  if (consensus_value) {
    set_has_consensus_value();
  } else {
    clear_has_consensus_value();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeader.consensus_value)
}

// required bytes hash = 6;
bool LedgerHeader::has_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LedgerHeader::set_has_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void LedgerHeader::clear_has_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void LedgerHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& LedgerHeader::hash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.hash)
  return hash_.GetNoArena();
}
void LedgerHeader::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.hash)
}
#if LANG_CXX11
void LedgerHeader::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.LedgerHeader.hash)
}
#endif
void LedgerHeader::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeader.hash)
}
void LedgerHeader::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeader.hash)
}
::std::string* LedgerHeader::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LedgerHeader::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeader.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LedgerHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeader.hash)
}

// required uint32 base_fee = 7;
bool LedgerHeader::has_base_fee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LedgerHeader::set_has_base_fee() {
  _has_bits_[0] |= 0x00000040u;
}
void LedgerHeader::clear_has_base_fee() {
  _has_bits_[0] &= ~0x00000040u;
}
void LedgerHeader::clear_base_fee() {
  base_fee_ = 0u;
  clear_has_base_fee();
}
::google::protobuf::uint32 LedgerHeader::base_fee() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.base_fee)
  return base_fee_;
}
void LedgerHeader::set_base_fee(::google::protobuf::uint32 value) {
  set_has_base_fee();
  base_fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.base_fee)
}

// required uint32 base_reserve = 8;
bool LedgerHeader::has_base_reserve() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LedgerHeader::set_has_base_reserve() {
  _has_bits_[0] |= 0x00000080u;
}
void LedgerHeader::clear_has_base_reserve() {
  _has_bits_[0] &= ~0x00000080u;
}
void LedgerHeader::clear_base_reserve() {
  base_reserve_ = 0u;
  clear_has_base_reserve();
}
::google::protobuf::uint32 LedgerHeader::base_reserve() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.base_reserve)
  return base_reserve_;
}
void LedgerHeader::set_base_reserve(::google::protobuf::uint32 value) {
  set_has_base_reserve();
  base_reserve_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.base_reserve)
}

// required uint32 ledger_version = 9;
bool LedgerHeader::has_ledger_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LedgerHeader::set_has_ledger_version() {
  _has_bits_[0] |= 0x00000200u;
}
void LedgerHeader::clear_has_ledger_version() {
  _has_bits_[0] &= ~0x00000200u;
}
void LedgerHeader::clear_ledger_version() {
  ledger_version_ = 0u;
  clear_has_ledger_version();
}
::google::protobuf::uint32 LedgerHeader::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.ledger_version)
  return ledger_version_;
}
void LedgerHeader::set_ledger_version(::google::protobuf::uint32 value) {
  set_has_ledger_version();
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.ledger_version)
}

// required int64 tx_count = 10;
bool LedgerHeader::has_tx_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LedgerHeader::set_has_tx_count() {
  _has_bits_[0] |= 0x00000100u;
}
void LedgerHeader::clear_has_tx_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void LedgerHeader::clear_tx_count() {
  tx_count_ = GOOGLE_LONGLONG(0);
  clear_has_tx_count();
}
::google::protobuf::int64 LedgerHeader::tx_count() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeader.tx_count)
  return tx_count_;
}
void LedgerHeader::set_tx_count(::google::protobuf::int64 value) {
  set_has_tx_count();
  tx_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeader.tx_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgers::kLedgerSeqFieldNumber;
const int GetLedgers::kLedgerNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgers::GetLedgers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.GetLedgers)
}
GetLedgers::GetLedgers(const GetLedgers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ledger_seq_, &from.ledger_seq_,
    reinterpret_cast<char*>(&ledger_num_) -
    reinterpret_cast<char*>(&ledger_seq_) + sizeof(ledger_num_));
  // @@protoc_insertion_point(copy_constructor:protocol.GetLedgers)
}

void GetLedgers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ledger_seq_, 0, reinterpret_cast<char*>(&ledger_num_) -
    reinterpret_cast<char*>(&ledger_seq_) + sizeof(ledger_num_));
}

GetLedgers::~GetLedgers() {
  // @@protoc_insertion_point(destructor:protocol.GetLedgers)
  SharedDtor();
}

void GetLedgers::SharedDtor() {
}

void GetLedgers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLedgers::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLedgers& GetLedgers::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLedgers* GetLedgers::New(::google::protobuf::Arena* arena) const {
  GetLedgers* n = new GetLedgers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLedgers::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GetLedgers)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ledger_seq_, 0, reinterpret_cast<char*>(&ledger_num_) -
      reinterpret_cast<char*>(&ledger_seq_) + sizeof(ledger_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLedgers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.GetLedgers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ledger_seq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ledger_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ledger_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ledger_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.GetLedgers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.GetLedgers)
  return false;
#undef DO_
}

void GetLedgers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.GetLedgers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 ledger_seq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ledger_seq(), output);
  }

  // optional int64 ledger_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ledger_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.GetLedgers)
}

::google::protobuf::uint8* GetLedgers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GetLedgers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 ledger_seq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ledger_seq(), target);
  }

  // optional int64 ledger_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ledger_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GetLedgers)
  return target;
}

size_t GetLedgers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GetLedgers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 ledger_seq = 1;
  if (has_ledger_seq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_seq());
  }
  // optional int64 ledger_num = 2;
  if (has_ledger_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLedgers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GetLedgers)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLedgers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLedgers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GetLedgers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GetLedgers)
    MergeFrom(*source);
  }
}

void GetLedgers::MergeFrom(const GetLedgers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GetLedgers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ledger_seq_ = from.ledger_seq_;
    }
    if (cached_has_bits & 0x00000002u) {
      ledger_num_ = from.ledger_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLedgers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GetLedgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgers::CopyFrom(const GetLedgers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GetLedgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetLedgers::Swap(GetLedgers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgers::InternalSwap(GetLedgers* other) {
  std::swap(ledger_seq_, other->ledger_seq_);
  std::swap(ledger_num_, other->ledger_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLedgers::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLedgers

// required int64 ledger_seq = 1;
bool GetLedgers::has_ledger_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLedgers::set_has_ledger_seq() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLedgers::clear_has_ledger_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLedgers::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
  clear_has_ledger_seq();
}
::google::protobuf::int64 GetLedgers::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.ledger_seq)
  return ledger_seq_;
}
void GetLedgers::set_ledger_seq(::google::protobuf::int64 value) {
  set_has_ledger_seq();
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.ledger_seq)
}

// optional int64 ledger_num = 2;
bool GetLedgers::has_ledger_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLedgers::set_has_ledger_num() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLedgers::clear_has_ledger_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLedgers::clear_ledger_num() {
  ledger_num_ = GOOGLE_LONGLONG(0);
  clear_has_ledger_num();
}
::google::protobuf::int64 GetLedgers::ledger_num() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.ledger_num)
  return ledger_num_;
}
void GetLedgers::set_ledger_num(::google::protobuf::int64 value) {
  set_has_ledger_num();
  ledger_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.ledger_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ledger::kLedgerHeaderFieldNumber;
const int Ledger::kTransactionEnvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ledger::Ledger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Ledger)
}
Ledger::Ledger(const Ledger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      transaction_envs_(from.transaction_envs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ledger_header()) {
    ledger_header_ = new ::protocol::LedgerHeader(*from.ledger_header_);
  } else {
    ledger_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Ledger)
}

void Ledger::SharedCtor() {
  _cached_size_ = 0;
  ledger_header_ = NULL;
}

Ledger::~Ledger() {
  // @@protoc_insertion_point(destructor:protocol.Ledger)
  SharedDtor();
}

void Ledger::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ledger_header_;
  }
}

void Ledger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ledger::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ledger& Ledger::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ledger* Ledger::New(::google::protobuf::Arena* arena) const {
  Ledger* n = new Ledger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ledger::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Ledger)
  transaction_envs_.Clear();
  if (has_ledger_header()) {
    GOOGLE_DCHECK(ledger_header_ != NULL);
    ledger_header_->::protocol::LedgerHeader::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ledger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Ledger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.LedgerHeader ledger_header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ledger_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.TransactionEnv transaction_envs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transaction_envs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Ledger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Ledger)
  return false;
#undef DO_
}

void Ledger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Ledger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.LedgerHeader ledger_header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ledger_header_, output);
  }

  // repeated .protocol.TransactionEnv transaction_envs = 2;
  for (unsigned int i = 0, n = this->transaction_envs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transaction_envs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Ledger)
}

::google::protobuf::uint8* Ledger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Ledger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.LedgerHeader ledger_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ledger_header_, deterministic, target);
  }

  // repeated .protocol.TransactionEnv transaction_envs = 2;
  for (unsigned int i = 0, n = this->transaction_envs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->transaction_envs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Ledger)
  return target;
}

size_t Ledger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Ledger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.LedgerHeader ledger_header = 1;
  if (has_ledger_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ledger_header_);
  }
  // repeated .protocol.TransactionEnv transaction_envs = 2;
  {
    unsigned int count = this->transaction_envs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_envs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ledger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Ledger)
  GOOGLE_DCHECK_NE(&from, this);
  const Ledger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ledger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Ledger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Ledger)
    MergeFrom(*source);
  }
}

void Ledger::MergeFrom(const Ledger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Ledger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_envs_.MergeFrom(from.transaction_envs_);
  if (from.has_ledger_header()) {
    mutable_ledger_header()->::protocol::LedgerHeader::MergeFrom(from.ledger_header());
  }
}

void Ledger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Ledger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ledger::CopyFrom(const Ledger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Ledger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ledger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->transaction_envs())) return false;
  if (has_ledger_header()) {
    if (!this->ledger_header_->IsInitialized()) return false;
  }
  return true;
}

void Ledger::Swap(Ledger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ledger::InternalSwap(Ledger* other) {
  transaction_envs_.InternalSwap(&other->transaction_envs_);
  std::swap(ledger_header_, other->ledger_header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ledger::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ledger

// required .protocol.LedgerHeader ledger_header = 1;
bool Ledger::has_ledger_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ledger::set_has_ledger_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Ledger::clear_has_ledger_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ledger::clear_ledger_header() {
  if (ledger_header_ != NULL) ledger_header_->::protocol::LedgerHeader::Clear();
  clear_has_ledger_header();
}
const ::protocol::LedgerHeader& Ledger::ledger_header() const {
  // @@protoc_insertion_point(field_get:protocol.Ledger.ledger_header)
  return ledger_header_ != NULL ? *ledger_header_
                         : *::protocol::LedgerHeader::internal_default_instance();
}
::protocol::LedgerHeader* Ledger::mutable_ledger_header() {
  set_has_ledger_header();
  if (ledger_header_ == NULL) {
    ledger_header_ = new ::protocol::LedgerHeader;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Ledger.ledger_header)
  return ledger_header_;
}
::protocol::LedgerHeader* Ledger::release_ledger_header() {
  // @@protoc_insertion_point(field_release:protocol.Ledger.ledger_header)
  clear_has_ledger_header();
  ::protocol::LedgerHeader* temp = ledger_header_;
  ledger_header_ = NULL;
  return temp;
}
void Ledger::set_allocated_ledger_header(::protocol::LedgerHeader* ledger_header) {
  delete ledger_header_;
  ledger_header_ = ledger_header;
  if (ledger_header) {
    set_has_ledger_header();
  } else {
    clear_has_ledger_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Ledger.ledger_header)
}

// repeated .protocol.TransactionEnv transaction_envs = 2;
int Ledger::transaction_envs_size() const {
  return transaction_envs_.size();
}
void Ledger::clear_transaction_envs() {
  transaction_envs_.Clear();
}
const ::protocol::TransactionEnv& Ledger::transaction_envs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Ledger.transaction_envs)
  return transaction_envs_.Get(index);
}
::protocol::TransactionEnv* Ledger::mutable_transaction_envs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Ledger.transaction_envs)
  return transaction_envs_.Mutable(index);
}
::protocol::TransactionEnv* Ledger::add_transaction_envs() {
  // @@protoc_insertion_point(field_add:protocol.Ledger.transaction_envs)
  return transaction_envs_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::TransactionEnv >*
Ledger::mutable_transaction_envs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Ledger.transaction_envs)
  return &transaction_envs_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::TransactionEnv >&
Ledger::transaction_envs() const {
  // @@protoc_insertion_point(field_list:protocol.Ledger.transaction_envs)
  return transaction_envs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ledgers::kLedgerFieldNumber;
const int Ledgers::kSyncCodeFieldNumber;
const int Ledgers::kMaxLedgersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ledgers::Ledgers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Ledgers)
}
Ledgers::Ledgers(const Ledgers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ledger_(from.ledger_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sync_code_, &from.sync_code_,
    reinterpret_cast<char*>(&max_ledgers_) -
    reinterpret_cast<char*>(&sync_code_) + sizeof(max_ledgers_));
  // @@protoc_insertion_point(copy_constructor:protocol.Ledgers)
}

void Ledgers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sync_code_, 0, reinterpret_cast<char*>(&max_ledgers_) -
    reinterpret_cast<char*>(&sync_code_) + sizeof(max_ledgers_));
}

Ledgers::~Ledgers() {
  // @@protoc_insertion_point(destructor:protocol.Ledgers)
  SharedDtor();
}

void Ledgers::SharedDtor() {
}

void Ledgers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ledgers::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ledgers& Ledgers::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ledgers* Ledgers::New(::google::protobuf::Arena* arena) const {
  Ledgers* n = new Ledgers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ledgers::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Ledgers)
  ledger_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&sync_code_, 0, reinterpret_cast<char*>(&max_ledgers_) -
      reinterpret_cast<char*>(&sync_code_) + sizeof(max_ledgers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ledgers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Ledgers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Ledger ledger = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ledger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.Ledgers.SyncCode sync_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Ledgers_SyncCode_IsValid(value)) {
            set_sync_code(static_cast< ::protocol::Ledgers_SyncCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_ledgers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_ledgers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ledgers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Ledgers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Ledgers)
  return false;
#undef DO_
}

void Ledgers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Ledgers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Ledger ledger = 1;
  for (unsigned int i = 0, n = this->ledger_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ledger(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protocol.Ledgers.SyncCode sync_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sync_code(), output);
  }

  // optional int32 max_ledgers = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_ledgers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Ledgers)
}

::google::protobuf::uint8* Ledgers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Ledgers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Ledger ledger = 1;
  for (unsigned int i = 0, n = this->ledger_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ledger(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protocol.Ledgers.SyncCode sync_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sync_code(), target);
  }

  // optional int32 max_ledgers = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_ledgers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Ledgers)
  return target;
}

size_t Ledgers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Ledgers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.Ledger ledger = 1;
  {
    unsigned int count = this->ledger_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ledger(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.Ledgers.SyncCode sync_code = 2;
    if (has_sync_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_code());
    }

    // optional int32 max_ledgers = 3;
    if (has_max_ledgers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ledgers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ledgers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Ledgers)
  GOOGLE_DCHECK_NE(&from, this);
  const Ledgers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ledgers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Ledgers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Ledgers)
    MergeFrom(*source);
  }
}

void Ledgers::MergeFrom(const Ledgers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Ledgers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ledger_.MergeFrom(from.ledger_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sync_code_ = from.sync_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ledgers_ = from.max_ledgers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ledgers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Ledgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ledgers::CopyFrom(const Ledgers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Ledgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ledgers::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->ledger())) return false;
  return true;
}

void Ledgers::Swap(Ledgers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ledgers::InternalSwap(Ledgers* other) {
  ledger_.InternalSwap(&other->ledger_);
  std::swap(sync_code_, other->sync_code_);
  std::swap(max_ledgers_, other->max_ledgers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ledgers::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ledgers

// repeated .protocol.Ledger ledger = 1;
int Ledgers::ledger_size() const {
  return ledger_.size();
}
void Ledgers::clear_ledger() {
  ledger_.Clear();
}
const ::protocol::Ledger& Ledgers::ledger(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.ledger)
  return ledger_.Get(index);
}
::protocol::Ledger* Ledgers::mutable_ledger(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Ledgers.ledger)
  return ledger_.Mutable(index);
}
::protocol::Ledger* Ledgers::add_ledger() {
  // @@protoc_insertion_point(field_add:protocol.Ledgers.ledger)
  return ledger_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Ledger >*
Ledgers::mutable_ledger() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Ledgers.ledger)
  return &ledger_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Ledger >&
Ledgers::ledger() const {
  // @@protoc_insertion_point(field_list:protocol.Ledgers.ledger)
  return ledger_;
}

// optional .protocol.Ledgers.SyncCode sync_code = 2;
bool Ledgers::has_sync_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ledgers::set_has_sync_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Ledgers::clear_has_sync_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ledgers::clear_sync_code() {
  sync_code_ = 0;
  clear_has_sync_code();
}
::protocol::Ledgers_SyncCode Ledgers::sync_code() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.sync_code)
  return static_cast< ::protocol::Ledgers_SyncCode >(sync_code_);
}
void Ledgers::set_sync_code(::protocol::Ledgers_SyncCode value) {
  assert(::protocol::Ledgers_SyncCode_IsValid(value));
  set_has_sync_code();
  sync_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.sync_code)
}

// optional int32 max_ledgers = 3;
bool Ledgers::has_max_ledgers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ledgers::set_has_max_ledgers() {
  _has_bits_[0] |= 0x00000002u;
}
void Ledgers::clear_has_max_ledgers() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ledgers::clear_max_ledgers() {
  max_ledgers_ = 0;
  clear_has_max_ledgers();
}
::google::protobuf::int32 Ledgers::max_ledgers() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.max_ledgers)
  return max_ledgers_;
}
void Ledgers::set_max_ledgers(::google::protobuf::int32 value) {
  set_has_max_ledgers();
  max_ledgers_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.max_ledgers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseTimeRange::kMinTimeFieldNumber;
const int CloseTimeRange::kMaxTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseTimeRange::CloseTimeRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CloseTimeRange)
}
CloseTimeRange::CloseTimeRange(const CloseTimeRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mintime_, &from.mintime_,
    reinterpret_cast<char*>(&maxtime_) -
    reinterpret_cast<char*>(&mintime_) + sizeof(maxtime_));
  // @@protoc_insertion_point(copy_constructor:protocol.CloseTimeRange)
}

void CloseTimeRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mintime_, 0, reinterpret_cast<char*>(&maxtime_) -
    reinterpret_cast<char*>(&mintime_) + sizeof(maxtime_));
}

CloseTimeRange::~CloseTimeRange() {
  // @@protoc_insertion_point(destructor:protocol.CloseTimeRange)
  SharedDtor();
}

void CloseTimeRange::SharedDtor() {
}

void CloseTimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseTimeRange::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseTimeRange& CloseTimeRange::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloseTimeRange* CloseTimeRange::New(::google::protobuf::Arena* arena) const {
  CloseTimeRange* n = new CloseTimeRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseTimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CloseTimeRange)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&mintime_, 0, reinterpret_cast<char*>(&maxtime_) -
      reinterpret_cast<char*>(&mintime_) + sizeof(maxtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloseTimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CloseTimeRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 minTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_mintime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 maxTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_maxtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CloseTimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CloseTimeRange)
  return false;
#undef DO_
}

void CloseTimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CloseTimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 minTime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mintime(), output);
  }

  // required int64 maxTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.CloseTimeRange)
}

::google::protobuf::uint8* CloseTimeRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CloseTimeRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 minTime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mintime(), target);
  }

  // required int64 maxTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CloseTimeRange)
  return target;
}

size_t CloseTimeRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.CloseTimeRange)
  size_t total_size = 0;

  if (has_mintime()) {
    // required int64 minTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mintime());
  }

  if (has_maxtime()) {
    // required int64 maxTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxtime());
  }

  return total_size;
}
size_t CloseTimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CloseTimeRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 minTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mintime());

    // required int64 maxTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseTimeRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.CloseTimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseTimeRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseTimeRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.CloseTimeRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.CloseTimeRange)
    MergeFrom(*source);
  }
}

void CloseTimeRange::MergeFrom(const CloseTimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CloseTimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mintime_ = from.mintime_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxtime_ = from.maxtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseTimeRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.CloseTimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseTimeRange::CopyFrom(const CloseTimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CloseTimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseTimeRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CloseTimeRange::Swap(CloseTimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseTimeRange::InternalSwap(CloseTimeRange* other) {
  std::swap(mintime_, other->mintime_);
  std::swap(maxtime_, other->maxtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseTimeRange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseTimeRange

// required int64 minTime = 1;
bool CloseTimeRange::has_mintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CloseTimeRange::set_has_mintime() {
  _has_bits_[0] |= 0x00000001u;
}
void CloseTimeRange::clear_has_mintime() {
  _has_bits_[0] &= ~0x00000001u;
}
void CloseTimeRange::clear_mintime() {
  mintime_ = GOOGLE_LONGLONG(0);
  clear_has_mintime();
}
::google::protobuf::int64 CloseTimeRange::mintime() const {
  // @@protoc_insertion_point(field_get:protocol.CloseTimeRange.minTime)
  return mintime_;
}
void CloseTimeRange::set_mintime(::google::protobuf::int64 value) {
  set_has_mintime();
  mintime_ = value;
  // @@protoc_insertion_point(field_set:protocol.CloseTimeRange.minTime)
}

// required int64 maxTime = 2;
bool CloseTimeRange::has_maxtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CloseTimeRange::set_has_maxtime() {
  _has_bits_[0] |= 0x00000002u;
}
void CloseTimeRange::clear_has_maxtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CloseTimeRange::clear_maxtime() {
  maxtime_ = GOOGLE_LONGLONG(0);
  clear_has_maxtime();
}
::google::protobuf::int64 CloseTimeRange::maxtime() const {
  // @@protoc_insertion_point(field_get:protocol.CloseTimeRange.maxTime)
  return maxtime_;
}
void CloseTimeRange::set_maxtime(::google::protobuf::int64 value) {
  set_has_maxtime();
  maxtime_ = value;
  // @@protoc_insertion_point(field_set:protocol.CloseTimeRange.maxTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetProperty::kTypeFieldNumber;
const int AssetProperty::kIssuerFieldNumber;
const int AssetProperty::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetProperty::AssetProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AssetProperty)
}
AssetProperty::AssetProperty(const AssetProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_issuer()) {
    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.AssetProperty)
}

void AssetProperty::SharedCtor() {
  _cached_size_ = 0;
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AssetProperty::~AssetProperty() {
  // @@protoc_insertion_point(destructor:protocol.AssetProperty)
  SharedDtor();
}

void AssetProperty::SharedDtor() {
  issuer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AssetProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetProperty::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AssetProperty& AssetProperty::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

AssetProperty* AssetProperty::New(::google::protobuf::Arena* arena) const {
  AssetProperty* n = new AssetProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AssetProperty)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_issuer()) {
      GOOGLE_DCHECK(!issuer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*issuer_.UnsafeRawStringPointer())->clear();
    }
    if (has_code()) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AssetProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AssetProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.AssetProperty.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::AssetProperty_Type_IsValid(value)) {
            set_type(static_cast< ::protocol::AssetProperty_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string issuer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->issuer().data(), this->issuer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.AssetProperty.issuer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.AssetProperty.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AssetProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AssetProperty)
  return false;
#undef DO_
}

void AssetProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AssetProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.AssetProperty.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string issuer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.AssetProperty.issuer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer(), output);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.AssetProperty.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AssetProperty)
}

::google::protobuf::uint8* AssetProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AssetProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.AssetProperty.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string issuer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.AssetProperty.issuer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->issuer(), target);
  }

  // required string code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.AssetProperty.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AssetProperty)
  return target;
}

size_t AssetProperty::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.AssetProperty)
  size_t total_size = 0;

  if (has_issuer()) {
    // required string issuer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->issuer());
  }

  if (has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_type()) {
    // required .protocol.AssetProperty.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t AssetProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AssetProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string issuer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->issuer());

    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required .protocol.AssetProperty.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AssetProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AssetProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AssetProperty)
    MergeFrom(*source);
  }
}

void AssetProperty::MergeFrom(const AssetProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AssetProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_issuer();
      issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AssetProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AssetProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetProperty::CopyFrom(const AssetProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AssetProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AssetProperty::Swap(AssetProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetProperty::InternalSwap(AssetProperty* other) {
  issuer_.Swap(&other->issuer_);
  code_.Swap(&other->code_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetProperty::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetProperty

// required .protocol.AssetProperty.Type type = 1;
bool AssetProperty::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AssetProperty::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void AssetProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void AssetProperty::clear_type() {
  type_ = 0;
  clear_has_type();
}
::protocol::AssetProperty_Type AssetProperty::type() const {
  // @@protoc_insertion_point(field_get:protocol.AssetProperty.type)
  return static_cast< ::protocol::AssetProperty_Type >(type_);
}
void AssetProperty::set_type(::protocol::AssetProperty_Type value) {
  assert(::protocol::AssetProperty_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.AssetProperty.type)
}

// required string issuer = 2;
bool AssetProperty::has_issuer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AssetProperty::set_has_issuer() {
  _has_bits_[0] |= 0x00000001u;
}
void AssetProperty::clear_has_issuer() {
  _has_bits_[0] &= ~0x00000001u;
}
void AssetProperty::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_issuer();
}
const ::std::string& AssetProperty::issuer() const {
  // @@protoc_insertion_point(field_get:protocol.AssetProperty.issuer)
  return issuer_.GetNoArena();
}
void AssetProperty::set_issuer(const ::std::string& value) {
  set_has_issuer();
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetProperty.issuer)
}
#if LANG_CXX11
void AssetProperty::set_issuer(::std::string&& value) {
  set_has_issuer();
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetProperty.issuer)
}
#endif
void AssetProperty::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_issuer();
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetProperty.issuer)
}
void AssetProperty::set_issuer(const char* value, size_t size) {
  set_has_issuer();
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetProperty.issuer)
}
::std::string* AssetProperty::mutable_issuer() {
  set_has_issuer();
  // @@protoc_insertion_point(field_mutable:protocol.AssetProperty.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AssetProperty::release_issuer() {
  // @@protoc_insertion_point(field_release:protocol.AssetProperty.issuer)
  clear_has_issuer();
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetProperty::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    set_has_issuer();
  } else {
    clear_has_issuer();
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetProperty.issuer)
}

// required string code = 3;
bool AssetProperty::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AssetProperty::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void AssetProperty::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void AssetProperty::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& AssetProperty::code() const {
  // @@protoc_insertion_point(field_get:protocol.AssetProperty.code)
  return code_.GetNoArena();
}
void AssetProperty::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AssetProperty.code)
}
#if LANG_CXX11
void AssetProperty::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AssetProperty.code)
}
#endif
void AssetProperty::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AssetProperty.code)
}
void AssetProperty::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AssetProperty.code)
}
::std::string* AssetProperty::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.AssetProperty.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AssetProperty::release_code() {
  // @@protoc_insertion_point(field_release:protocol.AssetProperty.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AssetProperty::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.AssetProperty.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Detail::kAmountFieldNumber;
const int Detail::kStartFieldNumber;
const int Detail::kLengthFieldNumber;
const int Detail::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Detail::Detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Detail)
}
Detail::Detail(const Detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ext()) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  ::memcpy(&amount_, &from.amount_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&amount_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:protocol.Detail)
}

void Detail::SharedCtor() {
  _cached_size_ = 0;
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&amount_) + sizeof(length_));
}

Detail::~Detail() {
  // @@protoc_insertion_point(destructor:protocol.Detail)
  SharedDtor();
}

void Detail::SharedDtor() {
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Detail::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Detail& Detail::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Detail* Detail::New(::google::protobuf::Arena* arena) const {
  Detail* n = new Detail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Detail)
  if (has_ext()) {
    GOOGLE_DCHECK(!ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ext_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&amount_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&amount_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ext = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Detail.ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Detail)
  return false;
#undef DO_
}

void Detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->amount(), output);
  }

  // required int64 start = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // required int64 length = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->length(), output);
  }

  // required string ext = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Detail.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Detail)
}

::google::protobuf::uint8* Detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->amount(), target);
  }

  // required int64 start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // required int64 length = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->length(), target);
  }

  // required string ext = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Detail.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Detail)
  return target;
}

size_t Detail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Detail)
  size_t total_size = 0;

  if (has_ext()) {
    // required string ext = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  if (has_amount()) {
    // required int64 amount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  if (has_start()) {
    // required int64 start = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  if (has_length()) {
    // required int64 length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  return total_size;
}
size_t Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Detail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string ext = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());

    // required int64 amount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());

    // required int64 start = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());

    // required int64 length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const Detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Detail)
    MergeFrom(*source);
  }
}

void Detail::MergeFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ext();
      ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detail::CopyFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Detail::Swap(Detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Detail::InternalSwap(Detail* other) {
  ext_.Swap(&other->ext_);
  std::swap(amount_, other->amount_);
  std::swap(start_, other->start_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Detail::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Detail

// required int64 amount = 1;
bool Detail::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Detail::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
void Detail::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
void Detail::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
::google::protobuf::int64 Detail::amount() const {
  // @@protoc_insertion_point(field_get:protocol.Detail.amount)
  return amount_;
}
void Detail::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Detail.amount)
}

// required int64 start = 2;
bool Detail::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Detail::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
void Detail::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
void Detail::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
::google::protobuf::int64 Detail::start() const {
  // @@protoc_insertion_point(field_get:protocol.Detail.start)
  return start_;
}
void Detail::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:protocol.Detail.start)
}

// required int64 length = 3;
bool Detail::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Detail::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void Detail::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void Detail::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
::google::protobuf::int64 Detail::length() const {
  // @@protoc_insertion_point(field_get:protocol.Detail.length)
  return length_;
}
void Detail::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:protocol.Detail.length)
}

// required string ext = 4;
bool Detail::has_ext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Detail::set_has_ext() {
  _has_bits_[0] |= 0x00000001u;
}
void Detail::clear_has_ext() {
  _has_bits_[0] &= ~0x00000001u;
}
void Detail::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ext();
}
const ::std::string& Detail::ext() const {
  // @@protoc_insertion_point(field_get:protocol.Detail.ext)
  return ext_.GetNoArena();
}
void Detail::set_ext(const ::std::string& value) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Detail.ext)
}
#if LANG_CXX11
void Detail::set_ext(::std::string&& value) {
  set_has_ext();
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Detail.ext)
}
#endif
void Detail::set_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Detail.ext)
}
void Detail::set_ext(const char* value, size_t size) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Detail.ext)
}
::std::string* Detail::mutable_ext() {
  set_has_ext();
  // @@protoc_insertion_point(field_mutable:protocol.Detail.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Detail::release_ext() {
  // @@protoc_insertion_point(field_release:protocol.Detail.ext)
  clear_has_ext();
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Detail::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:protocol.Detail.ext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Asset::kPropertyFieldNumber;
const int Asset::kAmountFieldNumber;
const int Asset::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Asset::Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Asset)
}
Asset::Asset(const Asset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      details_(from.details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property()) {
    property_ = new ::protocol::AssetProperty(*from.property_);
  } else {
    property_ = NULL;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:protocol.Asset)
}

void Asset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&property_, 0, reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&property_) + sizeof(amount_));
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:protocol.Asset)
  SharedDtor();
}

void Asset::SharedDtor() {
  if (this != internal_default_instance()) {
    delete property_;
  }
}

void Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Asset::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Asset& Asset::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Asset* Asset::New(::google::protobuf::Arena* arena) const {
  Asset* n = new Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Asset)
  details_.Clear();
  if (has_property()) {
    GOOGLE_DCHECK(property_ != NULL);
    property_->::protocol::AssetProperty::Clear();
  }
  amount_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.AssetProperty property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Detail details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Asset)
  return false;
#undef DO_
}

void Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Asset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.AssetProperty property = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->property_, output);
  }

  // required int64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // repeated .protocol.Detail details = 3;
  for (unsigned int i = 0, n = this->details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->details(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Asset)
}

::google::protobuf::uint8* Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Asset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.AssetProperty property = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->property_, deterministic, target);
  }

  // required int64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  // repeated .protocol.Detail details = 3;
  for (unsigned int i = 0, n = this->details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->details(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Asset)
  return target;
}

size_t Asset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Asset)
  size_t total_size = 0;

  if (has_property()) {
    // required .protocol.AssetProperty property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->property_);
  }

  if (has_amount()) {
    // required int64 amount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  return total_size;
}
size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Asset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.AssetProperty property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->property_);

    // required int64 amount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.Detail details = 3;
  {
    unsigned int count = this->details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  details_.MergeFrom(from.details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_property()->::protocol::AssetProperty::MergeFrom(from.property());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->details())) return false;
  if (has_property()) {
    if (!this->property_->IsInitialized()) return false;
  }
  return true;
}

void Asset::Swap(Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Asset::InternalSwap(Asset* other) {
  details_.InternalSwap(&other->details_);
  std::swap(property_, other->property_);
  std::swap(amount_, other->amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Asset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Asset

// required .protocol.AssetProperty property = 1;
bool Asset::has_property() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Asset::set_has_property() {
  _has_bits_[0] |= 0x00000001u;
}
void Asset::clear_has_property() {
  _has_bits_[0] &= ~0x00000001u;
}
void Asset::clear_property() {
  if (property_ != NULL) property_->::protocol::AssetProperty::Clear();
  clear_has_property();
}
const ::protocol::AssetProperty& Asset::property() const {
  // @@protoc_insertion_point(field_get:protocol.Asset.property)
  return property_ != NULL ? *property_
                         : *::protocol::AssetProperty::internal_default_instance();
}
::protocol::AssetProperty* Asset::mutable_property() {
  set_has_property();
  if (property_ == NULL) {
    property_ = new ::protocol::AssetProperty;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Asset.property)
  return property_;
}
::protocol::AssetProperty* Asset::release_property() {
  // @@protoc_insertion_point(field_release:protocol.Asset.property)
  clear_has_property();
  ::protocol::AssetProperty* temp = property_;
  property_ = NULL;
  return temp;
}
void Asset::set_allocated_property(::protocol::AssetProperty* property) {
  delete property_;
  property_ = property;
  if (property) {
    set_has_property();
  } else {
    clear_has_property();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Asset.property)
}

// required int64 amount = 2;
bool Asset::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Asset::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
void Asset::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
void Asset::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
::google::protobuf::int64 Asset::amount() const {
  // @@protoc_insertion_point(field_get:protocol.Asset.amount)
  return amount_;
}
void Asset::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Asset.amount)
}

// repeated .protocol.Detail details = 3;
int Asset::details_size() const {
  return details_.size();
}
void Asset::clear_details() {
  details_.Clear();
}
const ::protocol::Detail& Asset::details(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Asset.details)
  return details_.Get(index);
}
::protocol::Detail* Asset::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Asset.details)
  return details_.Mutable(index);
}
::protocol::Detail* Asset::add_details() {
  // @@protoc_insertion_point(field_add:protocol.Asset.details)
  return details_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Detail >*
Asset::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Asset.details)
  return &details_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Detail >&
Asset::details() const {
  // @@protoc_insertion_point(field_list:protocol.Asset.details)
  return details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationCreateAccount::kDestAddressFieldNumber;
const int OperationCreateAccount::kInitBalanceFieldNumber;
const int OperationCreateAccount::kThresholdsFieldNumber;
const int OperationCreateAccount::kSignersFieldNumber;
const int OperationCreateAccount::kAccountMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationCreateAccount::OperationCreateAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationCreateAccount)
}
OperationCreateAccount::OperationCreateAccount(const OperationCreateAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signers_(from.signers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_address()) {
    dest_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_address_);
  }
  account_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_metadata()) {
    account_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_metadata_);
  }
  if (from.has_thresholds()) {
    thresholds_ = new ::protocol::AccountThreshold(*from.thresholds_);
  } else {
    thresholds_ = NULL;
  }
  init_balance_ = from.init_balance_;
  // @@protoc_insertion_point(copy_constructor:protocol.OperationCreateAccount)
}

void OperationCreateAccount::SharedCtor() {
  _cached_size_ = 0;
  dest_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thresholds_, 0, reinterpret_cast<char*>(&init_balance_) -
    reinterpret_cast<char*>(&thresholds_) + sizeof(init_balance_));
}

OperationCreateAccount::~OperationCreateAccount() {
  // @@protoc_insertion_point(destructor:protocol.OperationCreateAccount)
  SharedDtor();
}

void OperationCreateAccount::SharedDtor() {
  dest_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete thresholds_;
  }
}

void OperationCreateAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationCreateAccount::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationCreateAccount& OperationCreateAccount::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationCreateAccount* OperationCreateAccount::New(::google::protobuf::Arena* arena) const {
  OperationCreateAccount* n = new OperationCreateAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationCreateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationCreateAccount)
  signers_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_dest_address()) {
      GOOGLE_DCHECK(!dest_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_metadata()) {
      GOOGLE_DCHECK(!account_metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_thresholds()) {
      GOOGLE_DCHECK(thresholds_ != NULL);
      thresholds_->::protocol::AccountThreshold::Clear();
    }
  }
  init_balance_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationCreateAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationCreateAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dest_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_address().data(), this->dest_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.OperationCreateAccount.dest_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 init_balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_init_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &init_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.AccountThreshold thresholds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thresholds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Signer signers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account_metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationCreateAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationCreateAccount)
  return false;
#undef DO_
}

void OperationCreateAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationCreateAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string dest_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_address().data(), this->dest_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationCreateAccount.dest_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dest_address(), output);
  }

  // required int64 init_balance = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->init_balance(), output);
  }

  // optional .protocol.AccountThreshold thresholds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->thresholds_, output);
  }

  // repeated .protocol.Signer signers = 4;
  for (unsigned int i = 0, n = this->signers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signers(i), output);
  }

  // optional bytes account_metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->account_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationCreateAccount)
}

::google::protobuf::uint8* OperationCreateAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationCreateAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string dest_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_address().data(), this->dest_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationCreateAccount.dest_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dest_address(), target);
  }

  // required int64 init_balance = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->init_balance(), target);
  }

  // optional .protocol.AccountThreshold thresholds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->thresholds_, deterministic, target);
  }

  // repeated .protocol.Signer signers = 4;
  for (unsigned int i = 0, n = this->signers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->signers(i), deterministic, target);
  }

  // optional bytes account_metadata = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->account_metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationCreateAccount)
  return target;
}

size_t OperationCreateAccount::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.OperationCreateAccount)
  size_t total_size = 0;

  if (has_dest_address()) {
    // required string dest_address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_address());
  }

  if (has_init_balance()) {
    // required int64 init_balance = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->init_balance());
  }

  return total_size;
}
size_t OperationCreateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationCreateAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string dest_address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_address());

    // required int64 init_balance = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->init_balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.Signer signers = 4;
  {
    unsigned int count = this->signers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signers(i));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes account_metadata = 5;
    if (has_account_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_metadata());
    }

    // optional .protocol.AccountThreshold thresholds = 3;
    if (has_thresholds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->thresholds_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationCreateAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationCreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationCreateAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationCreateAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationCreateAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationCreateAccount)
    MergeFrom(*source);
  }
}

void OperationCreateAccount::MergeFrom(const OperationCreateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationCreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signers_.MergeFrom(from.signers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dest_address();
      dest_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account_metadata();
      account_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_thresholds()->::protocol::AccountThreshold::MergeFrom(from.thresholds());
    }
    if (cached_has_bits & 0x00000008u) {
      init_balance_ = from.init_balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationCreateAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationCreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationCreateAccount::CopyFrom(const OperationCreateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationCreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationCreateAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signers())) return false;
  if (has_thresholds()) {
    if (!this->thresholds_->IsInitialized()) return false;
  }
  return true;
}

void OperationCreateAccount::Swap(OperationCreateAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationCreateAccount::InternalSwap(OperationCreateAccount* other) {
  signers_.InternalSwap(&other->signers_);
  dest_address_.Swap(&other->dest_address_);
  account_metadata_.Swap(&other->account_metadata_);
  std::swap(thresholds_, other->thresholds_);
  std::swap(init_balance_, other->init_balance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationCreateAccount::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationCreateAccount

// required string dest_address = 1;
bool OperationCreateAccount::has_dest_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationCreateAccount::set_has_dest_address() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationCreateAccount::clear_has_dest_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationCreateAccount::clear_dest_address() {
  dest_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_address();
}
const ::std::string& OperationCreateAccount::dest_address() const {
  // @@protoc_insertion_point(field_get:protocol.OperationCreateAccount.dest_address)
  return dest_address_.GetNoArena();
}
void OperationCreateAccount::set_dest_address(const ::std::string& value) {
  set_has_dest_address();
  dest_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationCreateAccount.dest_address)
}
#if LANG_CXX11
void OperationCreateAccount::set_dest_address(::std::string&& value) {
  set_has_dest_address();
  dest_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationCreateAccount.dest_address)
}
#endif
void OperationCreateAccount::set_dest_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dest_address();
  dest_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationCreateAccount.dest_address)
}
void OperationCreateAccount::set_dest_address(const char* value, size_t size) {
  set_has_dest_address();
  dest_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationCreateAccount.dest_address)
}
::std::string* OperationCreateAccount::mutable_dest_address() {
  set_has_dest_address();
  // @@protoc_insertion_point(field_mutable:protocol.OperationCreateAccount.dest_address)
  return dest_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationCreateAccount::release_dest_address() {
  // @@protoc_insertion_point(field_release:protocol.OperationCreateAccount.dest_address)
  clear_has_dest_address();
  return dest_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationCreateAccount::set_allocated_dest_address(::std::string* dest_address) {
  if (dest_address != NULL) {
    set_has_dest_address();
  } else {
    clear_has_dest_address();
  }
  dest_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationCreateAccount.dest_address)
}

// required int64 init_balance = 2;
bool OperationCreateAccount::has_init_balance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OperationCreateAccount::set_has_init_balance() {
  _has_bits_[0] |= 0x00000008u;
}
void OperationCreateAccount::clear_has_init_balance() {
  _has_bits_[0] &= ~0x00000008u;
}
void OperationCreateAccount::clear_init_balance() {
  init_balance_ = GOOGLE_LONGLONG(0);
  clear_has_init_balance();
}
::google::protobuf::int64 OperationCreateAccount::init_balance() const {
  // @@protoc_insertion_point(field_get:protocol.OperationCreateAccount.init_balance)
  return init_balance_;
}
void OperationCreateAccount::set_init_balance(::google::protobuf::int64 value) {
  set_has_init_balance();
  init_balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.OperationCreateAccount.init_balance)
}

// optional .protocol.AccountThreshold thresholds = 3;
bool OperationCreateAccount::has_thresholds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OperationCreateAccount::set_has_thresholds() {
  _has_bits_[0] |= 0x00000004u;
}
void OperationCreateAccount::clear_has_thresholds() {
  _has_bits_[0] &= ~0x00000004u;
}
void OperationCreateAccount::clear_thresholds() {
  if (thresholds_ != NULL) thresholds_->::protocol::AccountThreshold::Clear();
  clear_has_thresholds();
}
const ::protocol::AccountThreshold& OperationCreateAccount::thresholds() const {
  // @@protoc_insertion_point(field_get:protocol.OperationCreateAccount.thresholds)
  return thresholds_ != NULL ? *thresholds_
                         : *::protocol::AccountThreshold::internal_default_instance();
}
::protocol::AccountThreshold* OperationCreateAccount::mutable_thresholds() {
  set_has_thresholds();
  if (thresholds_ == NULL) {
    thresholds_ = new ::protocol::AccountThreshold;
  }
  // @@protoc_insertion_point(field_mutable:protocol.OperationCreateAccount.thresholds)
  return thresholds_;
}
::protocol::AccountThreshold* OperationCreateAccount::release_thresholds() {
  // @@protoc_insertion_point(field_release:protocol.OperationCreateAccount.thresholds)
  clear_has_thresholds();
  ::protocol::AccountThreshold* temp = thresholds_;
  thresholds_ = NULL;
  return temp;
}
void OperationCreateAccount::set_allocated_thresholds(::protocol::AccountThreshold* thresholds) {
  delete thresholds_;
  thresholds_ = thresholds;
  if (thresholds) {
    set_has_thresholds();
  } else {
    clear_has_thresholds();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationCreateAccount.thresholds)
}

// repeated .protocol.Signer signers = 4;
int OperationCreateAccount::signers_size() const {
  return signers_.size();
}
void OperationCreateAccount::clear_signers() {
  signers_.Clear();
}
const ::protocol::Signer& OperationCreateAccount::signers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.OperationCreateAccount.signers)
  return signers_.Get(index);
}
::protocol::Signer* OperationCreateAccount::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.OperationCreateAccount.signers)
  return signers_.Mutable(index);
}
::protocol::Signer* OperationCreateAccount::add_signers() {
  // @@protoc_insertion_point(field_add:protocol.OperationCreateAccount.signers)
  return signers_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Signer >*
OperationCreateAccount::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.OperationCreateAccount.signers)
  return &signers_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Signer >&
OperationCreateAccount::signers() const {
  // @@protoc_insertion_point(field_list:protocol.OperationCreateAccount.signers)
  return signers_;
}

// optional bytes account_metadata = 5;
bool OperationCreateAccount::has_account_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperationCreateAccount::set_has_account_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void OperationCreateAccount::clear_has_account_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperationCreateAccount::clear_account_metadata() {
  account_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_metadata();
}
const ::std::string& OperationCreateAccount::account_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.OperationCreateAccount.account_metadata)
  return account_metadata_.GetNoArena();
}
void OperationCreateAccount::set_account_metadata(const ::std::string& value) {
  set_has_account_metadata();
  account_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationCreateAccount.account_metadata)
}
#if LANG_CXX11
void OperationCreateAccount::set_account_metadata(::std::string&& value) {
  set_has_account_metadata();
  account_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationCreateAccount.account_metadata)
}
#endif
void OperationCreateAccount::set_account_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_metadata();
  account_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationCreateAccount.account_metadata)
}
void OperationCreateAccount::set_account_metadata(const void* value, size_t size) {
  set_has_account_metadata();
  account_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationCreateAccount.account_metadata)
}
::std::string* OperationCreateAccount::mutable_account_metadata() {
  set_has_account_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.OperationCreateAccount.account_metadata)
  return account_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationCreateAccount::release_account_metadata() {
  // @@protoc_insertion_point(field_release:protocol.OperationCreateAccount.account_metadata)
  clear_has_account_metadata();
  return account_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationCreateAccount::set_allocated_account_metadata(::std::string* account_metadata) {
  if (account_metadata != NULL) {
    set_has_account_metadata();
  } else {
    clear_has_account_metadata();
  }
  account_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationCreateAccount.account_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationPayment::kDestAddressFieldNumber;
const int OperationPayment::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationPayment::OperationPayment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationPayment)
}
OperationPayment::OperationPayment(const OperationPayment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destaddress()) {
    destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
  }
  if (from.has_asset()) {
    asset_ = new ::protocol::Asset(*from.asset_);
  } else {
    asset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.OperationPayment)
}

void OperationPayment::SharedCtor() {
  _cached_size_ = 0;
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_ = NULL;
}

OperationPayment::~OperationPayment() {
  // @@protoc_insertion_point(destructor:protocol.OperationPayment)
  SharedDtor();
}

void OperationPayment::SharedDtor() {
  destaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete asset_;
  }
}

void OperationPayment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationPayment::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationPayment& OperationPayment::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationPayment* OperationPayment::New(::google::protobuf::Arena* arena) const {
  OperationPayment* n = new OperationPayment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationPayment)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_destaddress()) {
      GOOGLE_DCHECK(!destaddress_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*destaddress_.UnsafeRawStringPointer())->clear();
    }
    if (has_asset()) {
      GOOGLE_DCHECK(asset_ != NULL);
      asset_->::protocol::Asset::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationPayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationPayment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string destAddress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destaddress().data(), this->destaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.OperationPayment.destAddress");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Asset asset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationPayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationPayment)
  return false;
#undef DO_
}

void OperationPayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string destAddress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destaddress().data(), this->destaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationPayment.destAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destaddress(), output);
  }

  // required .protocol.Asset asset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->asset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationPayment)
}

::google::protobuf::uint8* OperationPayment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string destAddress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destaddress().data(), this->destaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationPayment.destAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destaddress(), target);
  }

  // required .protocol.Asset asset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->asset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationPayment)
  return target;
}

size_t OperationPayment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.OperationPayment)
  size_t total_size = 0;

  if (has_destaddress()) {
    // required string destAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());
  }

  if (has_asset()) {
    // required .protocol.Asset asset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }

  return total_size;
}
size_t OperationPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationPayment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string destAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());

    // required .protocol.Asset asset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationPayment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationPayment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationPayment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationPayment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationPayment)
    MergeFrom(*source);
  }
}

void OperationPayment::MergeFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_destaddress();
      destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_asset()->::protocol::Asset::MergeFrom(from.asset());
    }
  }
}

void OperationPayment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationPayment::CopyFrom(const OperationPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationPayment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_asset()) {
    if (!this->asset_->IsInitialized()) return false;
  }
  return true;
}

void OperationPayment::Swap(OperationPayment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationPayment::InternalSwap(OperationPayment* other) {
  destaddress_.Swap(&other->destaddress_);
  std::swap(asset_, other->asset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationPayment::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationPayment

// required string destAddress = 1;
bool OperationPayment::has_destaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationPayment::set_has_destaddress() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationPayment::clear_has_destaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationPayment::clear_destaddress() {
  destaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destaddress();
}
const ::std::string& OperationPayment::destaddress() const {
  // @@protoc_insertion_point(field_get:protocol.OperationPayment.destAddress)
  return destaddress_.GetNoArena();
}
void OperationPayment::set_destaddress(const ::std::string& value) {
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationPayment.destAddress)
}
#if LANG_CXX11
void OperationPayment::set_destaddress(::std::string&& value) {
  set_has_destaddress();
  destaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationPayment.destAddress)
}
#endif
void OperationPayment::set_destaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationPayment.destAddress)
}
void OperationPayment::set_destaddress(const char* value, size_t size) {
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationPayment.destAddress)
}
::std::string* OperationPayment::mutable_destaddress() {
  set_has_destaddress();
  // @@protoc_insertion_point(field_mutable:protocol.OperationPayment.destAddress)
  return destaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationPayment::release_destaddress() {
  // @@protoc_insertion_point(field_release:protocol.OperationPayment.destAddress)
  clear_has_destaddress();
  return destaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationPayment::set_allocated_destaddress(::std::string* destaddress) {
  if (destaddress != NULL) {
    set_has_destaddress();
  } else {
    clear_has_destaddress();
  }
  destaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destaddress);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationPayment.destAddress)
}

// required .protocol.Asset asset = 2;
bool OperationPayment::has_asset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperationPayment::set_has_asset() {
  _has_bits_[0] |= 0x00000002u;
}
void OperationPayment::clear_has_asset() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperationPayment::clear_asset() {
  if (asset_ != NULL) asset_->::protocol::Asset::Clear();
  clear_has_asset();
}
const ::protocol::Asset& OperationPayment::asset() const {
  // @@protoc_insertion_point(field_get:protocol.OperationPayment.asset)
  return asset_ != NULL ? *asset_
                         : *::protocol::Asset::internal_default_instance();
}
::protocol::Asset* OperationPayment::mutable_asset() {
  set_has_asset();
  if (asset_ == NULL) {
    asset_ = new ::protocol::Asset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.OperationPayment.asset)
  return asset_;
}
::protocol::Asset* OperationPayment::release_asset() {
  // @@protoc_insertion_point(field_release:protocol.OperationPayment.asset)
  clear_has_asset();
  ::protocol::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void OperationPayment::set_allocated_asset(::protocol::Asset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    set_has_asset();
  } else {
    clear_has_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationPayment.asset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationInitPayment::kDestAddressFieldNumber;
const int OperationInitPayment::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationInitPayment::OperationInitPayment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationInitPayment)
}
OperationInitPayment::OperationInitPayment(const OperationInitPayment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destaddress()) {
    destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
  }
  if (from.has_asset()) {
    asset_ = new ::protocol::Asset(*from.asset_);
  } else {
    asset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.OperationInitPayment)
}

void OperationInitPayment::SharedCtor() {
  _cached_size_ = 0;
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_ = NULL;
}

OperationInitPayment::~OperationInitPayment() {
  // @@protoc_insertion_point(destructor:protocol.OperationInitPayment)
  SharedDtor();
}

void OperationInitPayment::SharedDtor() {
  destaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete asset_;
  }
}

void OperationInitPayment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationInitPayment::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationInitPayment& OperationInitPayment::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationInitPayment* OperationInitPayment::New(::google::protobuf::Arena* arena) const {
  OperationInitPayment* n = new OperationInitPayment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationInitPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationInitPayment)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_destaddress()) {
      GOOGLE_DCHECK(!destaddress_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*destaddress_.UnsafeRawStringPointer())->clear();
    }
    if (has_asset()) {
      GOOGLE_DCHECK(asset_ != NULL);
      asset_->::protocol::Asset::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationInitPayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationInitPayment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string destAddress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destaddress().data(), this->destaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.OperationInitPayment.destAddress");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Asset asset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationInitPayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationInitPayment)
  return false;
#undef DO_
}

void OperationInitPayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationInitPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string destAddress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destaddress().data(), this->destaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationInitPayment.destAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destaddress(), output);
  }

  // required .protocol.Asset asset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->asset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationInitPayment)
}

::google::protobuf::uint8* OperationInitPayment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationInitPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string destAddress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destaddress().data(), this->destaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationInitPayment.destAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destaddress(), target);
  }

  // required .protocol.Asset asset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->asset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationInitPayment)
  return target;
}

size_t OperationInitPayment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.OperationInitPayment)
  size_t total_size = 0;

  if (has_destaddress()) {
    // required string destAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());
  }

  if (has_asset()) {
    // required .protocol.Asset asset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }

  return total_size;
}
size_t OperationInitPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationInitPayment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string destAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());

    // required .protocol.Asset asset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationInitPayment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationInitPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationInitPayment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationInitPayment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationInitPayment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationInitPayment)
    MergeFrom(*source);
  }
}

void OperationInitPayment::MergeFrom(const OperationInitPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationInitPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_destaddress();
      destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_asset()->::protocol::Asset::MergeFrom(from.asset());
    }
  }
}

void OperationInitPayment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationInitPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationInitPayment::CopyFrom(const OperationInitPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationInitPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationInitPayment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_asset()) {
    if (!this->asset_->IsInitialized()) return false;
  }
  return true;
}

void OperationInitPayment::Swap(OperationInitPayment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationInitPayment::InternalSwap(OperationInitPayment* other) {
  destaddress_.Swap(&other->destaddress_);
  std::swap(asset_, other->asset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationInitPayment::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationInitPayment

// required string destAddress = 1;
bool OperationInitPayment::has_destaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationInitPayment::set_has_destaddress() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationInitPayment::clear_has_destaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationInitPayment::clear_destaddress() {
  destaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destaddress();
}
const ::std::string& OperationInitPayment::destaddress() const {
  // @@protoc_insertion_point(field_get:protocol.OperationInitPayment.destAddress)
  return destaddress_.GetNoArena();
}
void OperationInitPayment::set_destaddress(const ::std::string& value) {
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationInitPayment.destAddress)
}
#if LANG_CXX11
void OperationInitPayment::set_destaddress(::std::string&& value) {
  set_has_destaddress();
  destaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationInitPayment.destAddress)
}
#endif
void OperationInitPayment::set_destaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationInitPayment.destAddress)
}
void OperationInitPayment::set_destaddress(const char* value, size_t size) {
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationInitPayment.destAddress)
}
::std::string* OperationInitPayment::mutable_destaddress() {
  set_has_destaddress();
  // @@protoc_insertion_point(field_mutable:protocol.OperationInitPayment.destAddress)
  return destaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationInitPayment::release_destaddress() {
  // @@protoc_insertion_point(field_release:protocol.OperationInitPayment.destAddress)
  clear_has_destaddress();
  return destaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationInitPayment::set_allocated_destaddress(::std::string* destaddress) {
  if (destaddress != NULL) {
    set_has_destaddress();
  } else {
    clear_has_destaddress();
  }
  destaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destaddress);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationInitPayment.destAddress)
}

// required .protocol.Asset asset = 2;
bool OperationInitPayment::has_asset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperationInitPayment::set_has_asset() {
  _has_bits_[0] |= 0x00000002u;
}
void OperationInitPayment::clear_has_asset() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperationInitPayment::clear_asset() {
  if (asset_ != NULL) asset_->::protocol::Asset::Clear();
  clear_has_asset();
}
const ::protocol::Asset& OperationInitPayment::asset() const {
  // @@protoc_insertion_point(field_get:protocol.OperationInitPayment.asset)
  return asset_ != NULL ? *asset_
                         : *::protocol::Asset::internal_default_instance();
}
::protocol::Asset* OperationInitPayment::mutable_asset() {
  set_has_asset();
  if (asset_ == NULL) {
    asset_ = new ::protocol::Asset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.OperationInitPayment.asset)
  return asset_;
}
::protocol::Asset* OperationInitPayment::release_asset() {
  // @@protoc_insertion_point(field_release:protocol.OperationInitPayment.asset)
  clear_has_asset();
  ::protocol::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void OperationInitPayment::set_allocated_asset(::protocol::Asset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    set_has_asset();
  } else {
    clear_has_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationInitPayment.asset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationIssueAsset::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationIssueAsset::OperationIssueAsset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationIssueAsset)
}
OperationIssueAsset::OperationIssueAsset(const OperationIssueAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_asset()) {
    asset_ = new ::protocol::Asset(*from.asset_);
  } else {
    asset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.OperationIssueAsset)
}

void OperationIssueAsset::SharedCtor() {
  _cached_size_ = 0;
  asset_ = NULL;
}

OperationIssueAsset::~OperationIssueAsset() {
  // @@protoc_insertion_point(destructor:protocol.OperationIssueAsset)
  SharedDtor();
}

void OperationIssueAsset::SharedDtor() {
  if (this != internal_default_instance()) {
    delete asset_;
  }
}

void OperationIssueAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationIssueAsset::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationIssueAsset& OperationIssueAsset::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationIssueAsset* OperationIssueAsset::New(::google::protobuf::Arena* arena) const {
  OperationIssueAsset* n = new OperationIssueAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationIssueAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationIssueAsset)
  if (has_asset()) {
    GOOGLE_DCHECK(asset_ != NULL);
    asset_->::protocol::Asset::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationIssueAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationIssueAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.Asset asset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationIssueAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationIssueAsset)
  return false;
#undef DO_
}

void OperationIssueAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationIssueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Asset asset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->asset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationIssueAsset)
}

::google::protobuf::uint8* OperationIssueAsset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationIssueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Asset asset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->asset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationIssueAsset)
  return target;
}

size_t OperationIssueAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationIssueAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.Asset asset = 1;
  if (has_asset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationIssueAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationIssueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationIssueAsset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationIssueAsset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationIssueAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationIssueAsset)
    MergeFrom(*source);
  }
}

void OperationIssueAsset::MergeFrom(const OperationIssueAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationIssueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    mutable_asset()->::protocol::Asset::MergeFrom(from.asset());
  }
}

void OperationIssueAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationIssueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationIssueAsset::CopyFrom(const OperationIssueAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationIssueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationIssueAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_asset()) {
    if (!this->asset_->IsInitialized()) return false;
  }
  return true;
}

void OperationIssueAsset::Swap(OperationIssueAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationIssueAsset::InternalSwap(OperationIssueAsset* other) {
  std::swap(asset_, other->asset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationIssueAsset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationIssueAsset

// required .protocol.Asset asset = 1;
bool OperationIssueAsset::has_asset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationIssueAsset::set_has_asset() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationIssueAsset::clear_has_asset() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationIssueAsset::clear_asset() {
  if (asset_ != NULL) asset_->::protocol::Asset::Clear();
  clear_has_asset();
}
const ::protocol::Asset& OperationIssueAsset::asset() const {
  // @@protoc_insertion_point(field_get:protocol.OperationIssueAsset.asset)
  return asset_ != NULL ? *asset_
                         : *::protocol::Asset::internal_default_instance();
}
::protocol::Asset* OperationIssueAsset::mutable_asset() {
  set_has_asset();
  if (asset_ == NULL) {
    asset_ = new ::protocol::Asset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.OperationIssueAsset.asset)
  return asset_;
}
::protocol::Asset* OperationIssueAsset::release_asset() {
  // @@protoc_insertion_point(field_release:protocol.OperationIssueAsset.asset)
  clear_has_asset();
  ::protocol::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void OperationIssueAsset::set_allocated_asset(::protocol::Asset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    set_has_asset();
  } else {
    clear_has_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationIssueAsset.asset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UniqueAsset::kPropertyFieldNumber;
const int UniqueAsset::kDetailedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UniqueAsset::UniqueAsset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.UniqueAsset)
}
UniqueAsset::UniqueAsset(const UniqueAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detailed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_detailed()) {
    detailed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detailed_);
  }
  if (from.has_property()) {
    property_ = new ::protocol::AssetProperty(*from.property_);
  } else {
    property_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.UniqueAsset)
}

void UniqueAsset::SharedCtor() {
  _cached_size_ = 0;
  detailed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  property_ = NULL;
}

UniqueAsset::~UniqueAsset() {
  // @@protoc_insertion_point(destructor:protocol.UniqueAsset)
  SharedDtor();
}

void UniqueAsset::SharedDtor() {
  detailed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete property_;
  }
}

void UniqueAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueAsset::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UniqueAsset& UniqueAsset::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

UniqueAsset* UniqueAsset::New(::google::protobuf::Arena* arena) const {
  UniqueAsset* n = new UniqueAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UniqueAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.UniqueAsset)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_detailed()) {
      GOOGLE_DCHECK(!detailed_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*detailed_.UnsafeRawStringPointer())->clear();
    }
    if (has_property()) {
      GOOGLE_DCHECK(property_ != NULL);
      property_->::protocol::AssetProperty::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UniqueAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.UniqueAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.AssetProperty property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes detailed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detailed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.UniqueAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.UniqueAsset)
  return false;
#undef DO_
}

void UniqueAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.UniqueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.AssetProperty property = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->property_, output);
  }

  // required bytes detailed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->detailed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.UniqueAsset)
}

::google::protobuf::uint8* UniqueAsset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.UniqueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.AssetProperty property = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->property_, deterministic, target);
  }

  // required bytes detailed = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->detailed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.UniqueAsset)
  return target;
}

size_t UniqueAsset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.UniqueAsset)
  size_t total_size = 0;

  if (has_detailed()) {
    // required bytes detailed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->detailed());
  }

  if (has_property()) {
    // required .protocol.AssetProperty property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->property_);
  }

  return total_size;
}
size_t UniqueAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.UniqueAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes detailed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->detailed());

    // required .protocol.AssetProperty property = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->property_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.UniqueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const UniqueAsset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UniqueAsset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.UniqueAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.UniqueAsset)
    MergeFrom(*source);
  }
}

void UniqueAsset::MergeFrom(const UniqueAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.UniqueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_detailed();
      detailed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detailed_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_property()->::protocol::AssetProperty::MergeFrom(from.property());
    }
  }
}

void UniqueAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.UniqueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueAsset::CopyFrom(const UniqueAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.UniqueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_property()) {
    if (!this->property_->IsInitialized()) return false;
  }
  return true;
}

void UniqueAsset::Swap(UniqueAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UniqueAsset::InternalSwap(UniqueAsset* other) {
  detailed_.Swap(&other->detailed_);
  std::swap(property_, other->property_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UniqueAsset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UniqueAsset

// required .protocol.AssetProperty property = 1;
bool UniqueAsset::has_property() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UniqueAsset::set_has_property() {
  _has_bits_[0] |= 0x00000002u;
}
void UniqueAsset::clear_has_property() {
  _has_bits_[0] &= ~0x00000002u;
}
void UniqueAsset::clear_property() {
  if (property_ != NULL) property_->::protocol::AssetProperty::Clear();
  clear_has_property();
}
const ::protocol::AssetProperty& UniqueAsset::property() const {
  // @@protoc_insertion_point(field_get:protocol.UniqueAsset.property)
  return property_ != NULL ? *property_
                         : *::protocol::AssetProperty::internal_default_instance();
}
::protocol::AssetProperty* UniqueAsset::mutable_property() {
  set_has_property();
  if (property_ == NULL) {
    property_ = new ::protocol::AssetProperty;
  }
  // @@protoc_insertion_point(field_mutable:protocol.UniqueAsset.property)
  return property_;
}
::protocol::AssetProperty* UniqueAsset::release_property() {
  // @@protoc_insertion_point(field_release:protocol.UniqueAsset.property)
  clear_has_property();
  ::protocol::AssetProperty* temp = property_;
  property_ = NULL;
  return temp;
}
void UniqueAsset::set_allocated_property(::protocol::AssetProperty* property) {
  delete property_;
  property_ = property;
  if (property) {
    set_has_property();
  } else {
    clear_has_property();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.UniqueAsset.property)
}

// required bytes detailed = 2;
bool UniqueAsset::has_detailed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UniqueAsset::set_has_detailed() {
  _has_bits_[0] |= 0x00000001u;
}
void UniqueAsset::clear_has_detailed() {
  _has_bits_[0] &= ~0x00000001u;
}
void UniqueAsset::clear_detailed() {
  detailed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detailed();
}
const ::std::string& UniqueAsset::detailed() const {
  // @@protoc_insertion_point(field_get:protocol.UniqueAsset.detailed)
  return detailed_.GetNoArena();
}
void UniqueAsset::set_detailed(const ::std::string& value) {
  set_has_detailed();
  detailed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UniqueAsset.detailed)
}
#if LANG_CXX11
void UniqueAsset::set_detailed(::std::string&& value) {
  set_has_detailed();
  detailed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UniqueAsset.detailed)
}
#endif
void UniqueAsset::set_detailed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_detailed();
  detailed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UniqueAsset.detailed)
}
void UniqueAsset::set_detailed(const void* value, size_t size) {
  set_has_detailed();
  detailed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UniqueAsset.detailed)
}
::std::string* UniqueAsset::mutable_detailed() {
  set_has_detailed();
  // @@protoc_insertion_point(field_mutable:protocol.UniqueAsset.detailed)
  return detailed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UniqueAsset::release_detailed() {
  // @@protoc_insertion_point(field_release:protocol.UniqueAsset.detailed)
  clear_has_detailed();
  return detailed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UniqueAsset::set_allocated_detailed(::std::string* detailed) {
  if (detailed != NULL) {
    set_has_detailed();
  } else {
    clear_has_detailed();
  }
  detailed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detailed);
  // @@protoc_insertion_point(field_set_allocated:protocol.UniqueAsset.detailed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationPaymentUniqueAsset::kDestAddressFieldNumber;
const int OperationPaymentUniqueAsset::kAssetProFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationPaymentUniqueAsset::OperationPaymentUniqueAsset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationPaymentUniqueAsset)
}
OperationPaymentUniqueAsset::OperationPaymentUniqueAsset(const OperationPaymentUniqueAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destaddress()) {
    destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
  }
  if (from.has_asset_pro()) {
    asset_pro_ = new ::protocol::AssetProperty(*from.asset_pro_);
  } else {
    asset_pro_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.OperationPaymentUniqueAsset)
}

void OperationPaymentUniqueAsset::SharedCtor() {
  _cached_size_ = 0;
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_pro_ = NULL;
}

OperationPaymentUniqueAsset::~OperationPaymentUniqueAsset() {
  // @@protoc_insertion_point(destructor:protocol.OperationPaymentUniqueAsset)
  SharedDtor();
}

void OperationPaymentUniqueAsset::SharedDtor() {
  destaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete asset_pro_;
  }
}

void OperationPaymentUniqueAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationPaymentUniqueAsset::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationPaymentUniqueAsset& OperationPaymentUniqueAsset::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationPaymentUniqueAsset* OperationPaymentUniqueAsset::New(::google::protobuf::Arena* arena) const {
  OperationPaymentUniqueAsset* n = new OperationPaymentUniqueAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationPaymentUniqueAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationPaymentUniqueAsset)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_destaddress()) {
      GOOGLE_DCHECK(!destaddress_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*destaddress_.UnsafeRawStringPointer())->clear();
    }
    if (has_asset_pro()) {
      GOOGLE_DCHECK(asset_pro_ != NULL);
      asset_pro_->::protocol::AssetProperty::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationPaymentUniqueAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationPaymentUniqueAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string destAddress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destaddress().data(), this->destaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.OperationPaymentUniqueAsset.destAddress");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.AssetProperty asset_pro = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset_pro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationPaymentUniqueAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationPaymentUniqueAsset)
  return false;
#undef DO_
}

void OperationPaymentUniqueAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationPaymentUniqueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string destAddress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destaddress().data(), this->destaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationPaymentUniqueAsset.destAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destaddress(), output);
  }

  // required .protocol.AssetProperty asset_pro = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->asset_pro_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationPaymentUniqueAsset)
}

::google::protobuf::uint8* OperationPaymentUniqueAsset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationPaymentUniqueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string destAddress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destaddress().data(), this->destaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationPaymentUniqueAsset.destAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destaddress(), target);
  }

  // required .protocol.AssetProperty asset_pro = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->asset_pro_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationPaymentUniqueAsset)
  return target;
}

size_t OperationPaymentUniqueAsset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.OperationPaymentUniqueAsset)
  size_t total_size = 0;

  if (has_destaddress()) {
    // required string destAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());
  }

  if (has_asset_pro()) {
    // required .protocol.AssetProperty asset_pro = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_pro_);
  }

  return total_size;
}
size_t OperationPaymentUniqueAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationPaymentUniqueAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string destAddress = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());

    // required .protocol.AssetProperty asset_pro = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_pro_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationPaymentUniqueAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationPaymentUniqueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationPaymentUniqueAsset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationPaymentUniqueAsset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationPaymentUniqueAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationPaymentUniqueAsset)
    MergeFrom(*source);
  }
}

void OperationPaymentUniqueAsset::MergeFrom(const OperationPaymentUniqueAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationPaymentUniqueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_destaddress();
      destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_asset_pro()->::protocol::AssetProperty::MergeFrom(from.asset_pro());
    }
  }
}

void OperationPaymentUniqueAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationPaymentUniqueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationPaymentUniqueAsset::CopyFrom(const OperationPaymentUniqueAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationPaymentUniqueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationPaymentUniqueAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_asset_pro()) {
    if (!this->asset_pro_->IsInitialized()) return false;
  }
  return true;
}

void OperationPaymentUniqueAsset::Swap(OperationPaymentUniqueAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationPaymentUniqueAsset::InternalSwap(OperationPaymentUniqueAsset* other) {
  destaddress_.Swap(&other->destaddress_);
  std::swap(asset_pro_, other->asset_pro_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationPaymentUniqueAsset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationPaymentUniqueAsset

// required string destAddress = 1;
bool OperationPaymentUniqueAsset::has_destaddress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationPaymentUniqueAsset::set_has_destaddress() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationPaymentUniqueAsset::clear_has_destaddress() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationPaymentUniqueAsset::clear_destaddress() {
  destaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destaddress();
}
const ::std::string& OperationPaymentUniqueAsset::destaddress() const {
  // @@protoc_insertion_point(field_get:protocol.OperationPaymentUniqueAsset.destAddress)
  return destaddress_.GetNoArena();
}
void OperationPaymentUniqueAsset::set_destaddress(const ::std::string& value) {
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationPaymentUniqueAsset.destAddress)
}
#if LANG_CXX11
void OperationPaymentUniqueAsset::set_destaddress(::std::string&& value) {
  set_has_destaddress();
  destaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationPaymentUniqueAsset.destAddress)
}
#endif
void OperationPaymentUniqueAsset::set_destaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationPaymentUniqueAsset.destAddress)
}
void OperationPaymentUniqueAsset::set_destaddress(const char* value, size_t size) {
  set_has_destaddress();
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationPaymentUniqueAsset.destAddress)
}
::std::string* OperationPaymentUniqueAsset::mutable_destaddress() {
  set_has_destaddress();
  // @@protoc_insertion_point(field_mutable:protocol.OperationPaymentUniqueAsset.destAddress)
  return destaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationPaymentUniqueAsset::release_destaddress() {
  // @@protoc_insertion_point(field_release:protocol.OperationPaymentUniqueAsset.destAddress)
  clear_has_destaddress();
  return destaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationPaymentUniqueAsset::set_allocated_destaddress(::std::string* destaddress) {
  if (destaddress != NULL) {
    set_has_destaddress();
  } else {
    clear_has_destaddress();
  }
  destaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destaddress);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationPaymentUniqueAsset.destAddress)
}

// required .protocol.AssetProperty asset_pro = 2;
bool OperationPaymentUniqueAsset::has_asset_pro() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperationPaymentUniqueAsset::set_has_asset_pro() {
  _has_bits_[0] |= 0x00000002u;
}
void OperationPaymentUniqueAsset::clear_has_asset_pro() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperationPaymentUniqueAsset::clear_asset_pro() {
  if (asset_pro_ != NULL) asset_pro_->::protocol::AssetProperty::Clear();
  clear_has_asset_pro();
}
const ::protocol::AssetProperty& OperationPaymentUniqueAsset::asset_pro() const {
  // @@protoc_insertion_point(field_get:protocol.OperationPaymentUniqueAsset.asset_pro)
  return asset_pro_ != NULL ? *asset_pro_
                         : *::protocol::AssetProperty::internal_default_instance();
}
::protocol::AssetProperty* OperationPaymentUniqueAsset::mutable_asset_pro() {
  set_has_asset_pro();
  if (asset_pro_ == NULL) {
    asset_pro_ = new ::protocol::AssetProperty;
  }
  // @@protoc_insertion_point(field_mutable:protocol.OperationPaymentUniqueAsset.asset_pro)
  return asset_pro_;
}
::protocol::AssetProperty* OperationPaymentUniqueAsset::release_asset_pro() {
  // @@protoc_insertion_point(field_release:protocol.OperationPaymentUniqueAsset.asset_pro)
  clear_has_asset_pro();
  ::protocol::AssetProperty* temp = asset_pro_;
  asset_pro_ = NULL;
  return temp;
}
void OperationPaymentUniqueAsset::set_allocated_asset_pro(::protocol::AssetProperty* asset_pro) {
  delete asset_pro_;
  asset_pro_ = asset_pro;
  if (asset_pro) {
    set_has_asset_pro();
  } else {
    clear_has_asset_pro();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationPaymentUniqueAsset.asset_pro)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationRecord::kAddressFieldNumber;
const int OperationRecord::kIdFieldNumber;
const int OperationRecord::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationRecord::OperationRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationRecord)
}
OperationRecord::OperationRecord(const OperationRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ext()) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.OperationRecord)
}

void OperationRecord::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OperationRecord::~OperationRecord() {
  // @@protoc_insertion_point(destructor:protocol.OperationRecord)
  SharedDtor();
}

void OperationRecord::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperationRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationRecord::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationRecord& OperationRecord::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationRecord* OperationRecord::New(::google::protobuf::Arena* arena) const {
  OperationRecord* n = new OperationRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationRecord)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_address()) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_ext()) {
      GOOGLE_DCHECK(!ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ext_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.OperationRecord.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.OperationRecord.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes ext = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationRecord)
  return false;
#undef DO_
}

void OperationRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationRecord.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationRecord.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // required bytes ext = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationRecord)
}

::google::protobuf::uint8* OperationRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationRecord.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.OperationRecord.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required bytes ext = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationRecord)
  return target;
}

size_t OperationRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.OperationRecord)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_ext()) {
    // required bytes ext = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ext());
  }

  return total_size;
}
size_t OperationRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required bytes ext = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ext());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationRecord)
    MergeFrom(*source);
  }
}

void OperationRecord::MergeFrom(const OperationRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ext();
      ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
    }
  }
}

void OperationRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationRecord::CopyFrom(const OperationRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void OperationRecord::Swap(OperationRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationRecord::InternalSwap(OperationRecord* other) {
  address_.Swap(&other->address_);
  id_.Swap(&other->id_);
  ext_.Swap(&other->ext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationRecord::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationRecord

// optional string address = 1;
bool OperationRecord::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationRecord::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationRecord::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationRecord::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& OperationRecord::address() const {
  // @@protoc_insertion_point(field_get:protocol.OperationRecord.address)
  return address_.GetNoArena();
}
void OperationRecord::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationRecord.address)
}
#if LANG_CXX11
void OperationRecord::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationRecord.address)
}
#endif
void OperationRecord::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationRecord.address)
}
void OperationRecord::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationRecord.address)
}
::std::string* OperationRecord::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:protocol.OperationRecord.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationRecord::release_address() {
  // @@protoc_insertion_point(field_release:protocol.OperationRecord.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationRecord::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationRecord.address)
}

// required string id = 2;
bool OperationRecord::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperationRecord::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void OperationRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperationRecord::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& OperationRecord::id() const {
  // @@protoc_insertion_point(field_get:protocol.OperationRecord.id)
  return id_.GetNoArena();
}
void OperationRecord::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationRecord.id)
}
#if LANG_CXX11
void OperationRecord::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationRecord.id)
}
#endif
void OperationRecord::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationRecord.id)
}
void OperationRecord::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationRecord.id)
}
::std::string* OperationRecord::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.OperationRecord.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationRecord::release_id() {
  // @@protoc_insertion_point(field_release:protocol.OperationRecord.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationRecord::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationRecord.id)
}

// required bytes ext = 3;
bool OperationRecord::has_ext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OperationRecord::set_has_ext() {
  _has_bits_[0] |= 0x00000004u;
}
void OperationRecord::clear_has_ext() {
  _has_bits_[0] &= ~0x00000004u;
}
void OperationRecord::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ext();
}
const ::std::string& OperationRecord::ext() const {
  // @@protoc_insertion_point(field_get:protocol.OperationRecord.ext)
  return ext_.GetNoArena();
}
void OperationRecord::set_ext(const ::std::string& value) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationRecord.ext)
}
#if LANG_CXX11
void OperationRecord::set_ext(::std::string&& value) {
  set_has_ext();
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationRecord.ext)
}
#endif
void OperationRecord::set_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationRecord.ext)
}
void OperationRecord::set_ext(const void* value, size_t size) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationRecord.ext)
}
::std::string* OperationRecord::mutable_ext() {
  set_has_ext();
  // @@protoc_insertion_point(field_mutable:protocol.OperationRecord.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationRecord::release_ext() {
  // @@protoc_insertion_point(field_release:protocol.OperationRecord.ext)
  clear_has_ext();
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationRecord::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationRecord.ext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationIssueUniqueAsset::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationIssueUniqueAsset::OperationIssueUniqueAsset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationIssueUniqueAsset)
}
OperationIssueUniqueAsset::OperationIssueUniqueAsset(const OperationIssueUniqueAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_asset()) {
    asset_ = new ::protocol::UniqueAsset(*from.asset_);
  } else {
    asset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.OperationIssueUniqueAsset)
}

void OperationIssueUniqueAsset::SharedCtor() {
  _cached_size_ = 0;
  asset_ = NULL;
}

OperationIssueUniqueAsset::~OperationIssueUniqueAsset() {
  // @@protoc_insertion_point(destructor:protocol.OperationIssueUniqueAsset)
  SharedDtor();
}

void OperationIssueUniqueAsset::SharedDtor() {
  if (this != internal_default_instance()) {
    delete asset_;
  }
}

void OperationIssueUniqueAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationIssueUniqueAsset::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationIssueUniqueAsset& OperationIssueUniqueAsset::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationIssueUniqueAsset* OperationIssueUniqueAsset::New(::google::protobuf::Arena* arena) const {
  OperationIssueUniqueAsset* n = new OperationIssueUniqueAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationIssueUniqueAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationIssueUniqueAsset)
  if (has_asset()) {
    GOOGLE_DCHECK(asset_ != NULL);
    asset_->::protocol::UniqueAsset::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationIssueUniqueAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationIssueUniqueAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.UniqueAsset asset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationIssueUniqueAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationIssueUniqueAsset)
  return false;
#undef DO_
}

void OperationIssueUniqueAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationIssueUniqueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.UniqueAsset asset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->asset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationIssueUniqueAsset)
}

::google::protobuf::uint8* OperationIssueUniqueAsset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationIssueUniqueAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.UniqueAsset asset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->asset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationIssueUniqueAsset)
  return target;
}

size_t OperationIssueUniqueAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationIssueUniqueAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.UniqueAsset asset = 1;
  if (has_asset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationIssueUniqueAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationIssueUniqueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationIssueUniqueAsset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationIssueUniqueAsset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationIssueUniqueAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationIssueUniqueAsset)
    MergeFrom(*source);
  }
}

void OperationIssueUniqueAsset::MergeFrom(const OperationIssueUniqueAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationIssueUniqueAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    mutable_asset()->::protocol::UniqueAsset::MergeFrom(from.asset());
  }
}

void OperationIssueUniqueAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationIssueUniqueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationIssueUniqueAsset::CopyFrom(const OperationIssueUniqueAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationIssueUniqueAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationIssueUniqueAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_asset()) {
    if (!this->asset_->IsInitialized()) return false;
  }
  return true;
}

void OperationIssueUniqueAsset::Swap(OperationIssueUniqueAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationIssueUniqueAsset::InternalSwap(OperationIssueUniqueAsset* other) {
  std::swap(asset_, other->asset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationIssueUniqueAsset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationIssueUniqueAsset

// required .protocol.UniqueAsset asset = 1;
bool OperationIssueUniqueAsset::has_asset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationIssueUniqueAsset::set_has_asset() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationIssueUniqueAsset::clear_has_asset() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationIssueUniqueAsset::clear_asset() {
  if (asset_ != NULL) asset_->::protocol::UniqueAsset::Clear();
  clear_has_asset();
}
const ::protocol::UniqueAsset& OperationIssueUniqueAsset::asset() const {
  // @@protoc_insertion_point(field_get:protocol.OperationIssueUniqueAsset.asset)
  return asset_ != NULL ? *asset_
                         : *::protocol::UniqueAsset::internal_default_instance();
}
::protocol::UniqueAsset* OperationIssueUniqueAsset::mutable_asset() {
  set_has_asset();
  if (asset_ == NULL) {
    asset_ = new ::protocol::UniqueAsset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.OperationIssueUniqueAsset.asset)
  return asset_;
}
::protocol::UniqueAsset* OperationIssueUniqueAsset::release_asset() {
  // @@protoc_insertion_point(field_release:protocol.OperationIssueUniqueAsset.asset)
  clear_has_asset();
  ::protocol::UniqueAsset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void OperationIssueUniqueAsset::set_allocated_asset(::protocol::UniqueAsset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    set_has_asset();
  } else {
    clear_has_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationIssueUniqueAsset.asset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationSetOptions::kMasterWeightFieldNumber;
const int OperationSetOptions::kLowThresholdFieldNumber;
const int OperationSetOptions::kMedThresholdFieldNumber;
const int OperationSetOptions::kHighThresholdFieldNumber;
const int OperationSetOptions::kSignersFieldNumber;
const int OperationSetOptions::kAccountMetadataFieldNumber;
const int OperationSetOptions::kAccountMetadataVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationSetOptions::OperationSetOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationSetOptions)
}
OperationSetOptions::OperationSetOptions(const OperationSetOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signers_(from.signers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_metadata()) {
    account_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_metadata_);
  }
  ::memcpy(&master_weight_, &from.master_weight_,
    reinterpret_cast<char*>(&account_metadata_version_) -
    reinterpret_cast<char*>(&master_weight_) + sizeof(account_metadata_version_));
  // @@protoc_insertion_point(copy_constructor:protocol.OperationSetOptions)
}

void OperationSetOptions::SharedCtor() {
  _cached_size_ = 0;
  account_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&master_weight_, 0, reinterpret_cast<char*>(&account_metadata_version_) -
    reinterpret_cast<char*>(&master_weight_) + sizeof(account_metadata_version_));
}

OperationSetOptions::~OperationSetOptions() {
  // @@protoc_insertion_point(destructor:protocol.OperationSetOptions)
  SharedDtor();
}

void OperationSetOptions::SharedDtor() {
  account_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperationSetOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationSetOptions::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationSetOptions& OperationSetOptions::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationSetOptions* OperationSetOptions::New(::google::protobuf::Arena* arena) const {
  OperationSetOptions* n = new OperationSetOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationSetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationSetOptions)
  signers_.Clear();
  if (has_account_metadata()) {
    GOOGLE_DCHECK(!account_metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*account_metadata_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&master_weight_, 0, reinterpret_cast<char*>(&account_metadata_version_) -
      reinterpret_cast<char*>(&master_weight_) + sizeof(account_metadata_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationSetOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationSetOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 master_weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_master_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_low_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 med_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_med_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &med_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 high_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_high_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Signer signers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes account_metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 account_metadata_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_account_metadata_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_metadata_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationSetOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationSetOptions)
  return false;
#undef DO_
}

void OperationSetOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_weight = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_weight(), output);
  }

  // optional uint32 low_threshold = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->low_threshold(), output);
  }

  // optional uint32 med_threshold = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->med_threshold(), output);
  }

  // optional uint32 high_threshold = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->high_threshold(), output);
  }

  // repeated .protocol.Signer signers = 5;
  for (unsigned int i = 0, n = this->signers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signers(i), output);
  }

  // optional bytes account_metadata = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->account_metadata(), output);
  }

  // optional int64 account_metadata_version = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->account_metadata_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationSetOptions)
}

::google::protobuf::uint8* OperationSetOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_weight = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_weight(), target);
  }

  // optional uint32 low_threshold = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->low_threshold(), target);
  }

  // optional uint32 med_threshold = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->med_threshold(), target);
  }

  // optional uint32 high_threshold = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->high_threshold(), target);
  }

  // repeated .protocol.Signer signers = 5;
  for (unsigned int i = 0, n = this->signers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->signers(i), deterministic, target);
  }

  // optional bytes account_metadata = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->account_metadata(), target);
  }

  // optional int64 account_metadata_version = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->account_metadata_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationSetOptions)
  return target;
}

size_t OperationSetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationSetOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.Signer signers = 5;
  {
    unsigned int count = this->signers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signers(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes account_metadata = 6;
    if (has_account_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account_metadata());
    }

    // optional uint32 master_weight = 1;
    if (has_master_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_weight());
    }

    // optional uint32 low_threshold = 2;
    if (has_low_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_threshold());
    }

    // optional uint32 med_threshold = 3;
    if (has_med_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->med_threshold());
    }

    // optional uint32 high_threshold = 4;
    if (has_high_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_threshold());
    }

    // optional int64 account_metadata_version = 7;
    if (has_account_metadata_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_metadata_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationSetOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationSetOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationSetOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationSetOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationSetOptions)
    MergeFrom(*source);
  }
}

void OperationSetOptions::MergeFrom(const OperationSetOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signers_.MergeFrom(from.signers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account_metadata();
      account_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      master_weight_ = from.master_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_threshold_ = from.low_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      med_threshold_ = from.med_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      high_threshold_ = from.high_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_metadata_version_ = from.account_metadata_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationSetOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationSetOptions::CopyFrom(const OperationSetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationSetOptions::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->signers())) return false;
  return true;
}

void OperationSetOptions::Swap(OperationSetOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationSetOptions::InternalSwap(OperationSetOptions* other) {
  signers_.InternalSwap(&other->signers_);
  account_metadata_.Swap(&other->account_metadata_);
  std::swap(master_weight_, other->master_weight_);
  std::swap(low_threshold_, other->low_threshold_);
  std::swap(med_threshold_, other->med_threshold_);
  std::swap(high_threshold_, other->high_threshold_);
  std::swap(account_metadata_version_, other->account_metadata_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationSetOptions::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationSetOptions

// optional uint32 master_weight = 1;
bool OperationSetOptions::has_master_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OperationSetOptions::set_has_master_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void OperationSetOptions::clear_has_master_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void OperationSetOptions::clear_master_weight() {
  master_weight_ = 0u;
  clear_has_master_weight();
}
::google::protobuf::uint32 OperationSetOptions::master_weight() const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.master_weight)
  return master_weight_;
}
void OperationSetOptions::set_master_weight(::google::protobuf::uint32 value) {
  set_has_master_weight();
  master_weight_ = value;
  // @@protoc_insertion_point(field_set:protocol.OperationSetOptions.master_weight)
}

// optional uint32 low_threshold = 2;
bool OperationSetOptions::has_low_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OperationSetOptions::set_has_low_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void OperationSetOptions::clear_has_low_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void OperationSetOptions::clear_low_threshold() {
  low_threshold_ = 0u;
  clear_has_low_threshold();
}
::google::protobuf::uint32 OperationSetOptions::low_threshold() const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.low_threshold)
  return low_threshold_;
}
void OperationSetOptions::set_low_threshold(::google::protobuf::uint32 value) {
  set_has_low_threshold();
  low_threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.OperationSetOptions.low_threshold)
}

// optional uint32 med_threshold = 3;
bool OperationSetOptions::has_med_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OperationSetOptions::set_has_med_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void OperationSetOptions::clear_has_med_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void OperationSetOptions::clear_med_threshold() {
  med_threshold_ = 0u;
  clear_has_med_threshold();
}
::google::protobuf::uint32 OperationSetOptions::med_threshold() const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.med_threshold)
  return med_threshold_;
}
void OperationSetOptions::set_med_threshold(::google::protobuf::uint32 value) {
  set_has_med_threshold();
  med_threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.OperationSetOptions.med_threshold)
}

// optional uint32 high_threshold = 4;
bool OperationSetOptions::has_high_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OperationSetOptions::set_has_high_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void OperationSetOptions::clear_has_high_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void OperationSetOptions::clear_high_threshold() {
  high_threshold_ = 0u;
  clear_has_high_threshold();
}
::google::protobuf::uint32 OperationSetOptions::high_threshold() const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.high_threshold)
  return high_threshold_;
}
void OperationSetOptions::set_high_threshold(::google::protobuf::uint32 value) {
  set_has_high_threshold();
  high_threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.OperationSetOptions.high_threshold)
}

// repeated .protocol.Signer signers = 5;
int OperationSetOptions::signers_size() const {
  return signers_.size();
}
void OperationSetOptions::clear_signers() {
  signers_.Clear();
}
const ::protocol::Signer& OperationSetOptions::signers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.signers)
  return signers_.Get(index);
}
::protocol::Signer* OperationSetOptions::mutable_signers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.OperationSetOptions.signers)
  return signers_.Mutable(index);
}
::protocol::Signer* OperationSetOptions::add_signers() {
  // @@protoc_insertion_point(field_add:protocol.OperationSetOptions.signers)
  return signers_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Signer >*
OperationSetOptions::mutable_signers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.OperationSetOptions.signers)
  return &signers_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Signer >&
OperationSetOptions::signers() const {
  // @@protoc_insertion_point(field_list:protocol.OperationSetOptions.signers)
  return signers_;
}

// optional bytes account_metadata = 6;
bool OperationSetOptions::has_account_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OperationSetOptions::set_has_account_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void OperationSetOptions::clear_has_account_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void OperationSetOptions::clear_account_metadata() {
  account_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_metadata();
}
const ::std::string& OperationSetOptions::account_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.account_metadata)
  return account_metadata_.GetNoArena();
}
void OperationSetOptions::set_account_metadata(const ::std::string& value) {
  set_has_account_metadata();
  account_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.OperationSetOptions.account_metadata)
}
#if LANG_CXX11
void OperationSetOptions::set_account_metadata(::std::string&& value) {
  set_has_account_metadata();
  account_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.OperationSetOptions.account_metadata)
}
#endif
void OperationSetOptions::set_account_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_metadata();
  account_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.OperationSetOptions.account_metadata)
}
void OperationSetOptions::set_account_metadata(const void* value, size_t size) {
  set_has_account_metadata();
  account_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.OperationSetOptions.account_metadata)
}
::std::string* OperationSetOptions::mutable_account_metadata() {
  set_has_account_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.OperationSetOptions.account_metadata)
  return account_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationSetOptions::release_account_metadata() {
  // @@protoc_insertion_point(field_release:protocol.OperationSetOptions.account_metadata)
  clear_has_account_metadata();
  return account_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationSetOptions::set_allocated_account_metadata(::std::string* account_metadata) {
  if (account_metadata != NULL) {
    set_has_account_metadata();
  } else {
    clear_has_account_metadata();
  }
  account_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.OperationSetOptions.account_metadata)
}

// optional int64 account_metadata_version = 7;
bool OperationSetOptions::has_account_metadata_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OperationSetOptions::set_has_account_metadata_version() {
  _has_bits_[0] |= 0x00000020u;
}
void OperationSetOptions::clear_has_account_metadata_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void OperationSetOptions::clear_account_metadata_version() {
  account_metadata_version_ = GOOGLE_LONGLONG(0);
  clear_has_account_metadata_version();
}
::google::protobuf::int64 OperationSetOptions::account_metadata_version() const {
  // @@protoc_insertion_point(field_get:protocol.OperationSetOptions.account_metadata_version)
  return account_metadata_version_;
}
void OperationSetOptions::set_account_metadata_version(::google::protobuf::int64 value) {
  set_has_account_metadata_version();
  account_metadata_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.OperationSetOptions.account_metadata_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kHashFieldNumber;
const int Input::kIndexFieldNumber;
const int Input::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Input)
}
Input::Input(const Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protocol.Input)
}

void Input::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_LONGLONG(0);
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:protocol.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Input& Input::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Input* Input::New(::google::protobuf::Arena* arena) const {
  Input* n = new Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Input)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hash()) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
  }
  index_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Input)
  return false;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // required int64 index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Input)
}

::google::protobuf::uint8* Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // required int64 index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  // optional bytes metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Input)
  return target;
}

size_t Input::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Input)
  size_t total_size = 0;

  if (has_hash()) {
    // required bytes hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  if (has_index()) {
    // required int64 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  return total_size;
}
size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Input)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

    // required int64 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes metadata = 3;
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  hash_.Swap(&other->hash_);
  metadata_.Swap(&other->metadata_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Input

// required bytes hash = 1;
bool Input::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Input::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Input::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Input::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& Input::hash() const {
  // @@protoc_insertion_point(field_get:protocol.Input.hash)
  return hash_.GetNoArena();
}
void Input::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Input.hash)
}
#if LANG_CXX11
void Input::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Input.hash)
}
#endif
void Input::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Input.hash)
}
void Input::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Input.hash)
}
::std::string* Input::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.Input.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Input::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.Input.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Input::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.Input.hash)
}

// required int64 index = 2;
bool Input::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Input::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void Input::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void Input::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
::google::protobuf::int64 Input::index() const {
  // @@protoc_insertion_point(field_get:protocol.Input.index)
  return index_;
}
void Input::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:protocol.Input.index)
}

// optional bytes metadata = 3;
bool Input::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Input::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void Input::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Input::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& Input::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.Input.metadata)
  return metadata_.GetNoArena();
}
void Input::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Input.metadata)
}
#if LANG_CXX11
void Input::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Input.metadata)
}
#endif
void Input::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Input.metadata)
}
void Input::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Input.metadata)
}
::std::string* Input::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.Input.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Input::release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.Input.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Input::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.Input.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output::kAddressFieldNumber;
const int Output::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output::Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Output)
}
Output::Output(const Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Output)
}

void Output::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:protocol.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Output& Output::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Output* Output::New(::google::protobuf::Arena* arena) const {
  Output* n = new Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Output)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_address()) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Output.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Output)
  return false;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Output.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Output)
}

::google::protobuf::uint8* Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Output.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }
  // optional bytes metadata = 2;
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
  }
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Output::Swap(Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output::InternalSwap(Output* other) {
  address_.Swap(&other->address_);
  metadata_.Swap(&other->metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Output

// required string address = 1;
bool Output::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Output::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Output::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Output::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Output::address() const {
  // @@protoc_insertion_point(field_get:protocol.Output.address)
  return address_.GetNoArena();
}
void Output::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Output.address)
}
#if LANG_CXX11
void Output::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Output.address)
}
#endif
void Output::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Output.address)
}
void Output::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Output.address)
}
::std::string* Output::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:protocol.Output.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Output::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Output.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Output::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Output.address)
}

// optional bytes metadata = 2;
bool Output::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Output::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void Output::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Output::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& Output::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.Output.metadata)
  return metadata_.GetNoArena();
}
void Output::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Output.metadata)
}
#if LANG_CXX11
void Output::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Output.metadata)
}
#endif
void Output::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Output.metadata)
}
void Output::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Output.metadata)
}
::std::string* Output::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.Output.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Output::release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.Output.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Output::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.Output.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationProduction::kInputsFieldNumber;
const int OperationProduction::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationProduction::OperationProduction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationProduction)
}
OperationProduction::OperationProduction(const OperationProduction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.OperationProduction)
}

void OperationProduction::SharedCtor() {
  _cached_size_ = 0;
}

OperationProduction::~OperationProduction() {
  // @@protoc_insertion_point(destructor:protocol.OperationProduction)
  SharedDtor();
}

void OperationProduction::SharedDtor() {
}

void OperationProduction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationProduction::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationProduction& OperationProduction::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationProduction* OperationProduction::New(::google::protobuf::Arena* arena) const {
  OperationProduction* n = new OperationProduction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationProduction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationProduction)
  inputs_.Clear();
  outputs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationProduction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationProduction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Input inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Output outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationProduction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationProduction)
  return false;
#undef DO_
}

void OperationProduction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationProduction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Input inputs = 1;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inputs(i), output);
  }

  // repeated .protocol.Output outputs = 2;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outputs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationProduction)
}

::google::protobuf::uint8* OperationProduction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationProduction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Input inputs = 1;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->inputs(i), deterministic, target);
  }

  // repeated .protocol.Output outputs = 2;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->outputs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationProduction)
  return target;
}

size_t OperationProduction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationProduction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.Input inputs = 1;
  {
    unsigned int count = this->inputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(i));
    }
  }

  // repeated .protocol.Output outputs = 2;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationProduction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationProduction)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationProduction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationProduction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationProduction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationProduction)
    MergeFrom(*source);
  }
}

void OperationProduction::MergeFrom(const OperationProduction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationProduction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
}

void OperationProduction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationProduction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationProduction::CopyFrom(const OperationProduction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationProduction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationProduction::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->inputs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->outputs())) return false;
  return true;
}

void OperationProduction::Swap(OperationProduction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationProduction::InternalSwap(OperationProduction* other) {
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationProduction::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationProduction

// repeated .protocol.Input inputs = 1;
int OperationProduction::inputs_size() const {
  return inputs_.size();
}
void OperationProduction::clear_inputs() {
  inputs_.Clear();
}
const ::protocol::Input& OperationProduction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.OperationProduction.inputs)
  return inputs_.Get(index);
}
::protocol::Input* OperationProduction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.OperationProduction.inputs)
  return inputs_.Mutable(index);
}
::protocol::Input* OperationProduction::add_inputs() {
  // @@protoc_insertion_point(field_add:protocol.OperationProduction.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Input >*
OperationProduction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.OperationProduction.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Input >&
OperationProduction::inputs() const {
  // @@protoc_insertion_point(field_list:protocol.OperationProduction.inputs)
  return inputs_;
}

// repeated .protocol.Output outputs = 2;
int OperationProduction::outputs_size() const {
  return outputs_.size();
}
void OperationProduction::clear_outputs() {
  outputs_.Clear();
}
const ::protocol::Output& OperationProduction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.OperationProduction.outputs)
  return outputs_.Get(index);
}
::protocol::Output* OperationProduction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.OperationProduction.outputs)
  return outputs_.Mutable(index);
}
::protocol::Output* OperationProduction::add_outputs() {
  // @@protoc_insertion_point(field_add:protocol.OperationProduction.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Output >*
OperationProduction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.OperationProduction.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Output >&
OperationProduction::outputs() const {
  // @@protoc_insertion_point(field_list:protocol.OperationProduction.outputs)
  return outputs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationManageOrder::OperationManageOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OperationManageOrder)
}
OperationManageOrder::OperationManageOrder(const OperationManageOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.OperationManageOrder)
}

void OperationManageOrder::SharedCtor() {
  _cached_size_ = 0;
}

OperationManageOrder::~OperationManageOrder() {
  // @@protoc_insertion_point(destructor:protocol.OperationManageOrder)
  SharedDtor();
}

void OperationManageOrder::SharedDtor() {
}

void OperationManageOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationManageOrder::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationManageOrder& OperationManageOrder::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationManageOrder* OperationManageOrder::New(::google::protobuf::Arena* arena) const {
  OperationManageOrder* n = new OperationManageOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationManageOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OperationManageOrder)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OperationManageOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OperationManageOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OperationManageOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OperationManageOrder)
  return false;
#undef DO_
}

void OperationManageOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OperationManageOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OperationManageOrder)
}

::google::protobuf::uint8* OperationManageOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OperationManageOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OperationManageOrder)
  return target;
}

size_t OperationManageOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OperationManageOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationManageOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OperationManageOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationManageOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationManageOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OperationManageOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OperationManageOrder)
    MergeFrom(*source);
  }
}

void OperationManageOrder::MergeFrom(const OperationManageOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OperationManageOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OperationManageOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OperationManageOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationManageOrder::CopyFrom(const OperationManageOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OperationManageOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationManageOrder::IsInitialized() const {
  return true;
}

void OperationManageOrder::Swap(OperationManageOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationManageOrder::InternalSwap(OperationManageOrder* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationManageOrder::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationManageOrder

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operation::kTypeFieldNumber;
const int Operation::kSourceAddressFieldNumber;
const int Operation::kCreateAccountFieldNumber;
const int Operation::kPaymentFieldNumber;
const int Operation::kIssueAssetFieldNumber;
const int Operation::kSetoptionsFieldNumber;
const int Operation::kManageOrderFieldNumber;
const int Operation::kInitPaymentFieldNumber;
const int Operation::kProductionFieldNumber;
const int Operation::kMetadataFieldNumber;
const int Operation::kRecordFieldNumber;
const int Operation::kIssueUniqueAssetFieldNumber;
const int Operation::kPaymentUniqueAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operation::Operation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Operation)
}
Operation::Operation(const Operation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_address()) {
    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_create_account()) {
    create_account_ = new ::protocol::OperationCreateAccount(*from.create_account_);
  } else {
    create_account_ = NULL;
  }
  if (from.has_payment()) {
    payment_ = new ::protocol::OperationPayment(*from.payment_);
  } else {
    payment_ = NULL;
  }
  if (from.has_issue_asset()) {
    issue_asset_ = new ::protocol::OperationIssueAsset(*from.issue_asset_);
  } else {
    issue_asset_ = NULL;
  }
  if (from.has_setoptions()) {
    setoptions_ = new ::protocol::OperationSetOptions(*from.setoptions_);
  } else {
    setoptions_ = NULL;
  }
  if (from.has_manage_order()) {
    manage_order_ = new ::protocol::OperationManageOrder(*from.manage_order_);
  } else {
    manage_order_ = NULL;
  }
  if (from.has_init_payment()) {
    init_payment_ = new ::protocol::OperationInitPayment(*from.init_payment_);
  } else {
    init_payment_ = NULL;
  }
  if (from.has_production()) {
    production_ = new ::protocol::OperationProduction(*from.production_);
  } else {
    production_ = NULL;
  }
  if (from.has_record()) {
    record_ = new ::protocol::OperationRecord(*from.record_);
  } else {
    record_ = NULL;
  }
  if (from.has_issue_unique_asset()) {
    issue_unique_asset_ = new ::protocol::OperationIssueUniqueAsset(*from.issue_unique_asset_);
  } else {
    issue_unique_asset_ = NULL;
  }
  if (from.has_payment_unique_asset()) {
    payment_unique_asset_ = new ::protocol::OperationPaymentUniqueAsset(*from.payment_unique_asset_);
  } else {
    payment_unique_asset_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.Operation)
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_account_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&create_account_) + sizeof(type_));
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:protocol.Operation)
  SharedDtor();
}

void Operation::SharedDtor() {
  source_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete create_account_;
  }
  if (this != internal_default_instance()) {
    delete payment_;
  }
  if (this != internal_default_instance()) {
    delete issue_asset_;
  }
  if (this != internal_default_instance()) {
    delete setoptions_;
  }
  if (this != internal_default_instance()) {
    delete manage_order_;
  }
  if (this != internal_default_instance()) {
    delete init_payment_;
  }
  if (this != internal_default_instance()) {
    delete production_;
  }
  if (this != internal_default_instance()) {
    delete record_;
  }
  if (this != internal_default_instance()) {
    delete issue_unique_asset_;
  }
  if (this != internal_default_instance()) {
    delete payment_unique_asset_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Operation& Operation::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Operation* Operation::New(::google::protobuf::Arena* arena) const {
  Operation* n = new Operation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Operation)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_source_address()) {
      GOOGLE_DCHECK(!source_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_create_account()) {
      GOOGLE_DCHECK(create_account_ != NULL);
      create_account_->::protocol::OperationCreateAccount::Clear();
    }
    if (has_payment()) {
      GOOGLE_DCHECK(payment_ != NULL);
      payment_->::protocol::OperationPayment::Clear();
    }
    if (has_issue_asset()) {
      GOOGLE_DCHECK(issue_asset_ != NULL);
      issue_asset_->::protocol::OperationIssueAsset::Clear();
    }
    if (has_setoptions()) {
      GOOGLE_DCHECK(setoptions_ != NULL);
      setoptions_->::protocol::OperationSetOptions::Clear();
    }
    if (has_manage_order()) {
      GOOGLE_DCHECK(manage_order_ != NULL);
      manage_order_->::protocol::OperationManageOrder::Clear();
    }
    if (has_init_payment()) {
      GOOGLE_DCHECK(init_payment_ != NULL);
      init_payment_->::protocol::OperationInitPayment::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_production()) {
      GOOGLE_DCHECK(production_ != NULL);
      production_->::protocol::OperationProduction::Clear();
    }
    if (has_record()) {
      GOOGLE_DCHECK(record_ != NULL);
      record_->::protocol::OperationRecord::Clear();
    }
    if (has_issue_unique_asset()) {
      GOOGLE_DCHECK(issue_unique_asset_ != NULL);
      issue_unique_asset_->::protocol::OperationIssueUniqueAsset::Clear();
    }
    if (has_payment_unique_asset()) {
      GOOGLE_DCHECK(payment_unique_asset_ != NULL);
      payment_unique_asset_->::protocol::OperationPaymentUniqueAsset::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Operation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.Operation.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Operation_Type_IsValid(value)) {
            set_type(static_cast< ::protocol::Operation_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_address().data(), this->source_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Operation.source_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationCreateAccount create_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationPayment payment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationIssueAsset issue_asset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_issue_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationSetOptions setoptions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setoptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationManageOrder manage_order = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manage_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationInitPayment init_payment = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationProduction production = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_production()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationRecord record = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationIssueUniqueAsset issue_unique_asset = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_issue_unique_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.OperationPaymentUniqueAsset payment_unique_asset = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payment_unique_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Operation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Operation)
  return false;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Operation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Operation.Type type = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string source_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Operation.source_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_address(), output);
  }

  // optional .protocol.OperationCreateAccount create_account = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->create_account_, output);
  }

  // optional .protocol.OperationPayment payment = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->payment_, output);
  }

  // optional .protocol.OperationIssueAsset issue_asset = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->issue_asset_, output);
  }

  // optional .protocol.OperationSetOptions setoptions = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->setoptions_, output);
  }

  // optional .protocol.OperationManageOrder manage_order = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->manage_order_, output);
  }

  // optional .protocol.OperationInitPayment init_payment = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->init_payment_, output);
  }

  // optional .protocol.OperationProduction production = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->production_, output);
  }

  // optional bytes metadata = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->metadata(), output);
  }

  // optional .protocol.OperationRecord record = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->record_, output);
  }

  // optional .protocol.OperationIssueUniqueAsset issue_unique_asset = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->issue_unique_asset_, output);
  }

  // optional .protocol.OperationPaymentUniqueAsset payment_unique_asset = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->payment_unique_asset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Operation)
}

::google::protobuf::uint8* Operation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Operation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Operation.Type type = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string source_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Operation.source_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_address(), target);
  }

  // optional .protocol.OperationCreateAccount create_account = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->create_account_, deterministic, target);
  }

  // optional .protocol.OperationPayment payment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->payment_, deterministic, target);
  }

  // optional .protocol.OperationIssueAsset issue_asset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->issue_asset_, deterministic, target);
  }

  // optional .protocol.OperationSetOptions setoptions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->setoptions_, deterministic, target);
  }

  // optional .protocol.OperationManageOrder manage_order = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->manage_order_, deterministic, target);
  }

  // optional .protocol.OperationInitPayment init_payment = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->init_payment_, deterministic, target);
  }

  // optional .protocol.OperationProduction production = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->production_, deterministic, target);
  }

  // optional bytes metadata = 10;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->metadata(), target);
  }

  // optional .protocol.OperationRecord record = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->record_, deterministic, target);
  }

  // optional .protocol.OperationIssueUniqueAsset issue_unique_asset = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->issue_unique_asset_, deterministic, target);
  }

  // optional .protocol.OperationPaymentUniqueAsset payment_unique_asset = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->payment_unique_asset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Operation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.Operation.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source_address = 2;
    if (has_source_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_address());
    }

    // optional bytes metadata = 10;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional .protocol.OperationCreateAccount create_account = 3;
    if (has_create_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->create_account_);
    }

    // optional .protocol.OperationPayment payment = 4;
    if (has_payment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->payment_);
    }

    // optional .protocol.OperationIssueAsset issue_asset = 5;
    if (has_issue_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->issue_asset_);
    }

    // optional .protocol.OperationSetOptions setoptions = 6;
    if (has_setoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->setoptions_);
    }

    // optional .protocol.OperationManageOrder manage_order = 7;
    if (has_manage_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->manage_order_);
    }

    // optional .protocol.OperationInitPayment init_payment = 8;
    if (has_init_payment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->init_payment_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .protocol.OperationProduction production = 9;
    if (has_production()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->production_);
    }

    // optional .protocol.OperationRecord record = 11;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->record_);
    }

    // optional .protocol.OperationIssueUniqueAsset issue_unique_asset = 12;
    if (has_issue_unique_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->issue_unique_asset_);
    }

    // optional .protocol.OperationPaymentUniqueAsset payment_unique_asset = 13;
    if (has_payment_unique_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->payment_unique_asset_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Operation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_address();
      source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_create_account()->::protocol::OperationCreateAccount::MergeFrom(from.create_account());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_payment()->::protocol::OperationPayment::MergeFrom(from.payment());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_issue_asset()->::protocol::OperationIssueAsset::MergeFrom(from.issue_asset());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_setoptions()->::protocol::OperationSetOptions::MergeFrom(from.setoptions());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_manage_order()->::protocol::OperationManageOrder::MergeFrom(from.manage_order());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_init_payment()->::protocol::OperationInitPayment::MergeFrom(from.init_payment());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_production()->::protocol::OperationProduction::MergeFrom(from.production());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_record()->::protocol::OperationRecord::MergeFrom(from.record());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_issue_unique_asset()->::protocol::OperationIssueUniqueAsset::MergeFrom(from.issue_unique_asset());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_payment_unique_asset()->::protocol::OperationPaymentUniqueAsset::MergeFrom(from.payment_unique_asset());
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001000) != 0x00001000) return false;
  if (has_create_account()) {
    if (!this->create_account_->IsInitialized()) return false;
  }
  if (has_payment()) {
    if (!this->payment_->IsInitialized()) return false;
  }
  if (has_issue_asset()) {
    if (!this->issue_asset_->IsInitialized()) return false;
  }
  if (has_setoptions()) {
    if (!this->setoptions_->IsInitialized()) return false;
  }
  if (has_init_payment()) {
    if (!this->init_payment_->IsInitialized()) return false;
  }
  if (has_production()) {
    if (!this->production_->IsInitialized()) return false;
  }
  if (has_record()) {
    if (!this->record_->IsInitialized()) return false;
  }
  if (has_issue_unique_asset()) {
    if (!this->issue_unique_asset_->IsInitialized()) return false;
  }
  if (has_payment_unique_asset()) {
    if (!this->payment_unique_asset_->IsInitialized()) return false;
  }
  return true;
}

void Operation::Swap(Operation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operation::InternalSwap(Operation* other) {
  source_address_.Swap(&other->source_address_);
  metadata_.Swap(&other->metadata_);
  std::swap(create_account_, other->create_account_);
  std::swap(payment_, other->payment_);
  std::swap(issue_asset_, other->issue_asset_);
  std::swap(setoptions_, other->setoptions_);
  std::swap(manage_order_, other->manage_order_);
  std::swap(init_payment_, other->init_payment_);
  std::swap(production_, other->production_);
  std::swap(record_, other->record_);
  std::swap(issue_unique_asset_, other->issue_unique_asset_);
  std::swap(payment_unique_asset_, other->payment_unique_asset_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Operation

// required .protocol.Operation.Type type = 1;
bool Operation::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Operation::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
void Operation::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void Operation::clear_type() {
  type_ = 0;
  clear_has_type();
}
::protocol::Operation_Type Operation::type() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.type)
  return static_cast< ::protocol::Operation_Type >(type_);
}
void Operation::set_type(::protocol::Operation_Type value) {
  assert(::protocol::Operation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Operation.type)
}

// optional string source_address = 2;
bool Operation::has_source_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Operation::set_has_source_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Operation::clear_has_source_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Operation::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_address();
}
const ::std::string& Operation::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.source_address)
  return source_address_.GetNoArena();
}
void Operation::set_source_address(const ::std::string& value) {
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Operation.source_address)
}
#if LANG_CXX11
void Operation::set_source_address(::std::string&& value) {
  set_has_source_address();
  source_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Operation.source_address)
}
#endif
void Operation::set_source_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Operation.source_address)
}
void Operation::set_source_address(const char* value, size_t size) {
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Operation.source_address)
}
::std::string* Operation::mutable_source_address() {
  set_has_source_address();
  // @@protoc_insertion_point(field_mutable:protocol.Operation.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.Operation.source_address)
  clear_has_source_address();
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    set_has_source_address();
  } else {
    clear_has_source_address();
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.source_address)
}

// optional .protocol.OperationCreateAccount create_account = 3;
bool Operation::has_create_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Operation::set_has_create_account() {
  _has_bits_[0] |= 0x00000004u;
}
void Operation::clear_has_create_account() {
  _has_bits_[0] &= ~0x00000004u;
}
void Operation::clear_create_account() {
  if (create_account_ != NULL) create_account_->::protocol::OperationCreateAccount::Clear();
  clear_has_create_account();
}
const ::protocol::OperationCreateAccount& Operation::create_account() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.create_account)
  return create_account_ != NULL ? *create_account_
                         : *::protocol::OperationCreateAccount::internal_default_instance();
}
::protocol::OperationCreateAccount* Operation::mutable_create_account() {
  set_has_create_account();
  if (create_account_ == NULL) {
    create_account_ = new ::protocol::OperationCreateAccount;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.create_account)
  return create_account_;
}
::protocol::OperationCreateAccount* Operation::release_create_account() {
  // @@protoc_insertion_point(field_release:protocol.Operation.create_account)
  clear_has_create_account();
  ::protocol::OperationCreateAccount* temp = create_account_;
  create_account_ = NULL;
  return temp;
}
void Operation::set_allocated_create_account(::protocol::OperationCreateAccount* create_account) {
  delete create_account_;
  create_account_ = create_account;
  if (create_account) {
    set_has_create_account();
  } else {
    clear_has_create_account();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.create_account)
}

// optional .protocol.OperationPayment payment = 4;
bool Operation::has_payment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Operation::set_has_payment() {
  _has_bits_[0] |= 0x00000008u;
}
void Operation::clear_has_payment() {
  _has_bits_[0] &= ~0x00000008u;
}
void Operation::clear_payment() {
  if (payment_ != NULL) payment_->::protocol::OperationPayment::Clear();
  clear_has_payment();
}
const ::protocol::OperationPayment& Operation::payment() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.payment)
  return payment_ != NULL ? *payment_
                         : *::protocol::OperationPayment::internal_default_instance();
}
::protocol::OperationPayment* Operation::mutable_payment() {
  set_has_payment();
  if (payment_ == NULL) {
    payment_ = new ::protocol::OperationPayment;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.payment)
  return payment_;
}
::protocol::OperationPayment* Operation::release_payment() {
  // @@protoc_insertion_point(field_release:protocol.Operation.payment)
  clear_has_payment();
  ::protocol::OperationPayment* temp = payment_;
  payment_ = NULL;
  return temp;
}
void Operation::set_allocated_payment(::protocol::OperationPayment* payment) {
  delete payment_;
  payment_ = payment;
  if (payment) {
    set_has_payment();
  } else {
    clear_has_payment();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.payment)
}

// optional .protocol.OperationIssueAsset issue_asset = 5;
bool Operation::has_issue_asset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Operation::set_has_issue_asset() {
  _has_bits_[0] |= 0x00000010u;
}
void Operation::clear_has_issue_asset() {
  _has_bits_[0] &= ~0x00000010u;
}
void Operation::clear_issue_asset() {
  if (issue_asset_ != NULL) issue_asset_->::protocol::OperationIssueAsset::Clear();
  clear_has_issue_asset();
}
const ::protocol::OperationIssueAsset& Operation::issue_asset() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.issue_asset)
  return issue_asset_ != NULL ? *issue_asset_
                         : *::protocol::OperationIssueAsset::internal_default_instance();
}
::protocol::OperationIssueAsset* Operation::mutable_issue_asset() {
  set_has_issue_asset();
  if (issue_asset_ == NULL) {
    issue_asset_ = new ::protocol::OperationIssueAsset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.issue_asset)
  return issue_asset_;
}
::protocol::OperationIssueAsset* Operation::release_issue_asset() {
  // @@protoc_insertion_point(field_release:protocol.Operation.issue_asset)
  clear_has_issue_asset();
  ::protocol::OperationIssueAsset* temp = issue_asset_;
  issue_asset_ = NULL;
  return temp;
}
void Operation::set_allocated_issue_asset(::protocol::OperationIssueAsset* issue_asset) {
  delete issue_asset_;
  issue_asset_ = issue_asset;
  if (issue_asset) {
    set_has_issue_asset();
  } else {
    clear_has_issue_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.issue_asset)
}

// optional .protocol.OperationSetOptions setoptions = 6;
bool Operation::has_setoptions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Operation::set_has_setoptions() {
  _has_bits_[0] |= 0x00000020u;
}
void Operation::clear_has_setoptions() {
  _has_bits_[0] &= ~0x00000020u;
}
void Operation::clear_setoptions() {
  if (setoptions_ != NULL) setoptions_->::protocol::OperationSetOptions::Clear();
  clear_has_setoptions();
}
const ::protocol::OperationSetOptions& Operation::setoptions() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.setoptions)
  return setoptions_ != NULL ? *setoptions_
                         : *::protocol::OperationSetOptions::internal_default_instance();
}
::protocol::OperationSetOptions* Operation::mutable_setoptions() {
  set_has_setoptions();
  if (setoptions_ == NULL) {
    setoptions_ = new ::protocol::OperationSetOptions;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.setoptions)
  return setoptions_;
}
::protocol::OperationSetOptions* Operation::release_setoptions() {
  // @@protoc_insertion_point(field_release:protocol.Operation.setoptions)
  clear_has_setoptions();
  ::protocol::OperationSetOptions* temp = setoptions_;
  setoptions_ = NULL;
  return temp;
}
void Operation::set_allocated_setoptions(::protocol::OperationSetOptions* setoptions) {
  delete setoptions_;
  setoptions_ = setoptions;
  if (setoptions) {
    set_has_setoptions();
  } else {
    clear_has_setoptions();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.setoptions)
}

// optional .protocol.OperationManageOrder manage_order = 7;
bool Operation::has_manage_order() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Operation::set_has_manage_order() {
  _has_bits_[0] |= 0x00000040u;
}
void Operation::clear_has_manage_order() {
  _has_bits_[0] &= ~0x00000040u;
}
void Operation::clear_manage_order() {
  if (manage_order_ != NULL) manage_order_->::protocol::OperationManageOrder::Clear();
  clear_has_manage_order();
}
const ::protocol::OperationManageOrder& Operation::manage_order() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.manage_order)
  return manage_order_ != NULL ? *manage_order_
                         : *::protocol::OperationManageOrder::internal_default_instance();
}
::protocol::OperationManageOrder* Operation::mutable_manage_order() {
  set_has_manage_order();
  if (manage_order_ == NULL) {
    manage_order_ = new ::protocol::OperationManageOrder;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.manage_order)
  return manage_order_;
}
::protocol::OperationManageOrder* Operation::release_manage_order() {
  // @@protoc_insertion_point(field_release:protocol.Operation.manage_order)
  clear_has_manage_order();
  ::protocol::OperationManageOrder* temp = manage_order_;
  manage_order_ = NULL;
  return temp;
}
void Operation::set_allocated_manage_order(::protocol::OperationManageOrder* manage_order) {
  delete manage_order_;
  manage_order_ = manage_order;
  if (manage_order) {
    set_has_manage_order();
  } else {
    clear_has_manage_order();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.manage_order)
}

// optional .protocol.OperationInitPayment init_payment = 8;
bool Operation::has_init_payment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Operation::set_has_init_payment() {
  _has_bits_[0] |= 0x00000080u;
}
void Operation::clear_has_init_payment() {
  _has_bits_[0] &= ~0x00000080u;
}
void Operation::clear_init_payment() {
  if (init_payment_ != NULL) init_payment_->::protocol::OperationInitPayment::Clear();
  clear_has_init_payment();
}
const ::protocol::OperationInitPayment& Operation::init_payment() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.init_payment)
  return init_payment_ != NULL ? *init_payment_
                         : *::protocol::OperationInitPayment::internal_default_instance();
}
::protocol::OperationInitPayment* Operation::mutable_init_payment() {
  set_has_init_payment();
  if (init_payment_ == NULL) {
    init_payment_ = new ::protocol::OperationInitPayment;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.init_payment)
  return init_payment_;
}
::protocol::OperationInitPayment* Operation::release_init_payment() {
  // @@protoc_insertion_point(field_release:protocol.Operation.init_payment)
  clear_has_init_payment();
  ::protocol::OperationInitPayment* temp = init_payment_;
  init_payment_ = NULL;
  return temp;
}
void Operation::set_allocated_init_payment(::protocol::OperationInitPayment* init_payment) {
  delete init_payment_;
  init_payment_ = init_payment;
  if (init_payment) {
    set_has_init_payment();
  } else {
    clear_has_init_payment();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.init_payment)
}

// optional .protocol.OperationProduction production = 9;
bool Operation::has_production() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Operation::set_has_production() {
  _has_bits_[0] |= 0x00000100u;
}
void Operation::clear_has_production() {
  _has_bits_[0] &= ~0x00000100u;
}
void Operation::clear_production() {
  if (production_ != NULL) production_->::protocol::OperationProduction::Clear();
  clear_has_production();
}
const ::protocol::OperationProduction& Operation::production() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.production)
  return production_ != NULL ? *production_
                         : *::protocol::OperationProduction::internal_default_instance();
}
::protocol::OperationProduction* Operation::mutable_production() {
  set_has_production();
  if (production_ == NULL) {
    production_ = new ::protocol::OperationProduction;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.production)
  return production_;
}
::protocol::OperationProduction* Operation::release_production() {
  // @@protoc_insertion_point(field_release:protocol.Operation.production)
  clear_has_production();
  ::protocol::OperationProduction* temp = production_;
  production_ = NULL;
  return temp;
}
void Operation::set_allocated_production(::protocol::OperationProduction* production) {
  delete production_;
  production_ = production;
  if (production) {
    set_has_production();
  } else {
    clear_has_production();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.production)
}

// optional bytes metadata = 10;
bool Operation::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Operation::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void Operation::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Operation::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& Operation::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.metadata)
  return metadata_.GetNoArena();
}
void Operation::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Operation.metadata)
}
#if LANG_CXX11
void Operation::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Operation.metadata)
}
#endif
void Operation::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Operation.metadata)
}
void Operation::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Operation.metadata)
}
::std::string* Operation::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.Operation.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.Operation.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.metadata)
}

// optional .protocol.OperationRecord record = 11;
bool Operation::has_record() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Operation::set_has_record() {
  _has_bits_[0] |= 0x00000200u;
}
void Operation::clear_has_record() {
  _has_bits_[0] &= ~0x00000200u;
}
void Operation::clear_record() {
  if (record_ != NULL) record_->::protocol::OperationRecord::Clear();
  clear_has_record();
}
const ::protocol::OperationRecord& Operation::record() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.record)
  return record_ != NULL ? *record_
                         : *::protocol::OperationRecord::internal_default_instance();
}
::protocol::OperationRecord* Operation::mutable_record() {
  set_has_record();
  if (record_ == NULL) {
    record_ = new ::protocol::OperationRecord;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.record)
  return record_;
}
::protocol::OperationRecord* Operation::release_record() {
  // @@protoc_insertion_point(field_release:protocol.Operation.record)
  clear_has_record();
  ::protocol::OperationRecord* temp = record_;
  record_ = NULL;
  return temp;
}
void Operation::set_allocated_record(::protocol::OperationRecord* record) {
  delete record_;
  record_ = record;
  if (record) {
    set_has_record();
  } else {
    clear_has_record();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.record)
}

// optional .protocol.OperationIssueUniqueAsset issue_unique_asset = 12;
bool Operation::has_issue_unique_asset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Operation::set_has_issue_unique_asset() {
  _has_bits_[0] |= 0x00000400u;
}
void Operation::clear_has_issue_unique_asset() {
  _has_bits_[0] &= ~0x00000400u;
}
void Operation::clear_issue_unique_asset() {
  if (issue_unique_asset_ != NULL) issue_unique_asset_->::protocol::OperationIssueUniqueAsset::Clear();
  clear_has_issue_unique_asset();
}
const ::protocol::OperationIssueUniqueAsset& Operation::issue_unique_asset() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.issue_unique_asset)
  return issue_unique_asset_ != NULL ? *issue_unique_asset_
                         : *::protocol::OperationIssueUniqueAsset::internal_default_instance();
}
::protocol::OperationIssueUniqueAsset* Operation::mutable_issue_unique_asset() {
  set_has_issue_unique_asset();
  if (issue_unique_asset_ == NULL) {
    issue_unique_asset_ = new ::protocol::OperationIssueUniqueAsset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.issue_unique_asset)
  return issue_unique_asset_;
}
::protocol::OperationIssueUniqueAsset* Operation::release_issue_unique_asset() {
  // @@protoc_insertion_point(field_release:protocol.Operation.issue_unique_asset)
  clear_has_issue_unique_asset();
  ::protocol::OperationIssueUniqueAsset* temp = issue_unique_asset_;
  issue_unique_asset_ = NULL;
  return temp;
}
void Operation::set_allocated_issue_unique_asset(::protocol::OperationIssueUniqueAsset* issue_unique_asset) {
  delete issue_unique_asset_;
  issue_unique_asset_ = issue_unique_asset;
  if (issue_unique_asset) {
    set_has_issue_unique_asset();
  } else {
    clear_has_issue_unique_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.issue_unique_asset)
}

// optional .protocol.OperationPaymentUniqueAsset payment_unique_asset = 13;
bool Operation::has_payment_unique_asset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Operation::set_has_payment_unique_asset() {
  _has_bits_[0] |= 0x00000800u;
}
void Operation::clear_has_payment_unique_asset() {
  _has_bits_[0] &= ~0x00000800u;
}
void Operation::clear_payment_unique_asset() {
  if (payment_unique_asset_ != NULL) payment_unique_asset_->::protocol::OperationPaymentUniqueAsset::Clear();
  clear_has_payment_unique_asset();
}
const ::protocol::OperationPaymentUniqueAsset& Operation::payment_unique_asset() const {
  // @@protoc_insertion_point(field_get:protocol.Operation.payment_unique_asset)
  return payment_unique_asset_ != NULL ? *payment_unique_asset_
                         : *::protocol::OperationPaymentUniqueAsset::internal_default_instance();
}
::protocol::OperationPaymentUniqueAsset* Operation::mutable_payment_unique_asset() {
  set_has_payment_unique_asset();
  if (payment_unique_asset_ == NULL) {
    payment_unique_asset_ = new ::protocol::OperationPaymentUniqueAsset;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Operation.payment_unique_asset)
  return payment_unique_asset_;
}
::protocol::OperationPaymentUniqueAsset* Operation::release_payment_unique_asset() {
  // @@protoc_insertion_point(field_release:protocol.Operation.payment_unique_asset)
  clear_has_payment_unique_asset();
  ::protocol::OperationPaymentUniqueAsset* temp = payment_unique_asset_;
  payment_unique_asset_ = NULL;
  return temp;
}
void Operation::set_allocated_payment_unique_asset(::protocol::OperationPaymentUniqueAsset* payment_unique_asset) {
  delete payment_unique_asset_;
  payment_unique_asset_ = payment_unique_asset;
  if (payment_unique_asset) {
    set_has_payment_unique_asset();
  } else {
    clear_has_payment_unique_asset();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Operation.payment_unique_asset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kSourceAddressFieldNumber;
const int Transaction::kFeeFieldNumber;
const int Transaction::kSequenceNumberFieldNumber;
const int Transaction::kCloseTimeRangeFieldNumber;
const int Transaction::kOperationsFieldNumber;
const int Transaction::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_address()) {
    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_close_time_range()) {
    close_time_range_ = new ::protocol::CloseTimeRange(*from.close_time_range_);
  } else {
    close_time_range_ = NULL;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&sequence_number_) + sizeof(fee_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction)
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&close_time_range_, 0, reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&close_time_range_) + sizeof(fee_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:protocol.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  source_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete close_time_range_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transaction& Transaction::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction)
  operations_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_source_address()) {
      GOOGLE_DCHECK(!source_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_close_time_range()) {
      GOOGLE_DCHECK(close_time_range_ != NULL);
      close_time_range_->::protocol::CloseTimeRange::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&sequence_number_, 0, reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&sequence_number_) + sizeof(fee_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_address().data(), this->source_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Transaction.source_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.CloseTimeRange close_time_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Operation operations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Transaction.source_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_address(), output);
  }

  // required uint32 fee = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fee(), output);
  }

  // required int64 sequence_number = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence_number(), output);
  }

  // optional .protocol.CloseTimeRange close_time_range = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->close_time_range_, output);
  }

  // repeated .protocol.Operation operations = 5;
  for (unsigned int i = 0, n = this->operations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->operations(i), output);
  }

  // optional bytes metadata = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string source_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Transaction.source_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_address(), target);
  }

  // required uint32 fee = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fee(), target);
  }

  // required int64 sequence_number = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sequence_number(), target);
  }

  // optional .protocol.CloseTimeRange close_time_range = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->close_time_range_, deterministic, target);
  }

  // repeated .protocol.Operation operations = 5;
  for (unsigned int i = 0, n = this->operations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->operations(i), deterministic, target);
  }

  // optional bytes metadata = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction)
  return target;
}

size_t Transaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Transaction)
  size_t total_size = 0;

  if (has_source_address()) {
    // required string source_address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());
  }

  if (has_sequence_number()) {
    // required int64 sequence_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }

  if (has_fee()) {
    // required uint32 fee = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fee());
  }

  return total_size;
}
size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string source_address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());

    // required int64 sequence_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());

    // required uint32 fee = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fee());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.Operation operations = 5;
  {
    unsigned int count = this->operations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(i));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes metadata = 6;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional .protocol.CloseTimeRange close_time_range = 4;
    if (has_close_time_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->close_time_range_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_address();
      source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_close_time_range()->::protocol::CloseTimeRange::MergeFrom(from.close_time_range());
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      fee_ = from.fee_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->operations())) return false;
  if (has_close_time_range()) {
    if (!this->close_time_range_->IsInitialized()) return false;
  }
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  operations_.InternalSwap(&other->operations_);
  source_address_.Swap(&other->source_address_);
  metadata_.Swap(&other->metadata_);
  std::swap(close_time_range_, other->close_time_range_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(fee_, other->fee_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// required string source_address = 1;
bool Transaction::has_source_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transaction::set_has_source_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Transaction::clear_has_source_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transaction::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_address();
}
const ::std::string& Transaction::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.source_address)
  return source_address_.GetNoArena();
}
void Transaction::set_source_address(const ::std::string& value) {
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.source_address)
}
#if LANG_CXX11
void Transaction::set_source_address(::std::string&& value) {
  set_has_source_address();
  source_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.source_address)
}
#endif
void Transaction::set_source_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.source_address)
}
void Transaction::set_source_address(const char* value, size_t size) {
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.source_address)
}
::std::string* Transaction::mutable_source_address() {
  set_has_source_address();
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.source_address)
  clear_has_source_address();
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    set_has_source_address();
  } else {
    clear_has_source_address();
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.source_address)
}

// required uint32 fee = 2;
bool Transaction::has_fee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transaction::set_has_fee() {
  _has_bits_[0] |= 0x00000010u;
}
void Transaction::clear_has_fee() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transaction::clear_fee() {
  fee_ = 0u;
  clear_has_fee();
}
::google::protobuf::uint32 Transaction::fee() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.fee)
  return fee_;
}
void Transaction::set_fee(::google::protobuf::uint32 value) {
  set_has_fee();
  fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.fee)
}

// required int64 sequence_number = 3;
bool Transaction::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transaction::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000008u;
}
void Transaction::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transaction::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
::google::protobuf::int64 Transaction::sequence_number() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.sequence_number)
  return sequence_number_;
}
void Transaction::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.sequence_number)
}

// optional .protocol.CloseTimeRange close_time_range = 4;
bool Transaction::has_close_time_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transaction::set_has_close_time_range() {
  _has_bits_[0] |= 0x00000004u;
}
void Transaction::clear_has_close_time_range() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transaction::clear_close_time_range() {
  if (close_time_range_ != NULL) close_time_range_->::protocol::CloseTimeRange::Clear();
  clear_has_close_time_range();
}
const ::protocol::CloseTimeRange& Transaction::close_time_range() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.close_time_range)
  return close_time_range_ != NULL ? *close_time_range_
                         : *::protocol::CloseTimeRange::internal_default_instance();
}
::protocol::CloseTimeRange* Transaction::mutable_close_time_range() {
  set_has_close_time_range();
  if (close_time_range_ == NULL) {
    close_time_range_ = new ::protocol::CloseTimeRange;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.close_time_range)
  return close_time_range_;
}
::protocol::CloseTimeRange* Transaction::release_close_time_range() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.close_time_range)
  clear_has_close_time_range();
  ::protocol::CloseTimeRange* temp = close_time_range_;
  close_time_range_ = NULL;
  return temp;
}
void Transaction::set_allocated_close_time_range(::protocol::CloseTimeRange* close_time_range) {
  delete close_time_range_;
  close_time_range_ = close_time_range;
  if (close_time_range) {
    set_has_close_time_range();
  } else {
    clear_has_close_time_range();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.close_time_range)
}

// repeated .protocol.Operation operations = 5;
int Transaction::operations_size() const {
  return operations_.size();
}
void Transaction::clear_operations() {
  operations_.Clear();
}
const ::protocol::Operation& Transaction::operations(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.operations)
  return operations_.Get(index);
}
::protocol::Operation* Transaction::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.operations)
  return operations_.Mutable(index);
}
::protocol::Operation* Transaction::add_operations() {
  // @@protoc_insertion_point(field_add:protocol.Transaction.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Operation >*
Transaction::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Transaction.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Operation >&
Transaction::operations() const {
  // @@protoc_insertion_point(field_list:protocol.Transaction.operations)
  return operations_;
}

// optional bytes metadata = 6;
bool Transaction::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transaction::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void Transaction::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transaction::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& Transaction::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.metadata)
  return metadata_.GetNoArena();
}
void Transaction::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.metadata)
}
#if LANG_CXX11
void Transaction::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.metadata)
}
#endif
void Transaction::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.metadata)
}
void Transaction::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.metadata)
}
::std::string* Transaction::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kPublicKeyFieldNumber;
const int Signature::kSignDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Signature)
}
Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  sign_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_data()) {
    sign_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_data_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Signature)
}

void Signature::SharedCtor() {
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:protocol.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signature& Signature::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signature* Signature::New(::google::protobuf::Arena* arena) const {
  Signature* n = new Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Signature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_public_key()) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_sign_data()) {
      GOOGLE_DCHECK(!sign_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sign_data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Signature.public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes sign_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Signature.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->public_key(), output);
  }

  // required bytes sign_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sign_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Signature.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->public_key(), target);
  }

  // required bytes sign_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Signature)
  return target;
}

size_t Signature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Signature)
  size_t total_size = 0;

  if (has_public_key()) {
    // required string public_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());
  }

  if (has_sign_data()) {
    // required bytes sign_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign_data());
  }

  return total_size;
}
size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Signature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string public_key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key());

    // required bytes sign_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_data();
      sign_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_data_);
    }
  }
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  public_key_.Swap(&other->public_key_);
  sign_data_.Swap(&other->sign_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signature

// required string public_key = 1;
bool Signature::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signature::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Signature::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signature::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
const ::std::string& Signature::public_key() const {
  // @@protoc_insertion_point(field_get:protocol.Signature.public_key)
  return public_key_.GetNoArena();
}
void Signature::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Signature.public_key)
}
#if LANG_CXX11
void Signature::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Signature.public_key)
}
#endif
void Signature::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Signature.public_key)
}
void Signature::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Signature.public_key)
}
::std::string* Signature::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:protocol.Signature.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Signature::release_public_key() {
  // @@protoc_insertion_point(field_release:protocol.Signature.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Signature::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:protocol.Signature.public_key)
}

// required bytes sign_data = 2;
bool Signature::has_sign_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signature::set_has_sign_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Signature::clear_has_sign_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signature::clear_sign_data() {
  sign_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_data();
}
const ::std::string& Signature::sign_data() const {
  // @@protoc_insertion_point(field_get:protocol.Signature.sign_data)
  return sign_data_.GetNoArena();
}
void Signature::set_sign_data(const ::std::string& value) {
  set_has_sign_data();
  sign_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Signature.sign_data)
}
#if LANG_CXX11
void Signature::set_sign_data(::std::string&& value) {
  set_has_sign_data();
  sign_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Signature.sign_data)
}
#endif
void Signature::set_sign_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_data();
  sign_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Signature.sign_data)
}
void Signature::set_sign_data(const void* value, size_t size) {
  set_has_sign_data();
  sign_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Signature.sign_data)
}
::std::string* Signature::mutable_sign_data() {
  set_has_sign_data();
  // @@protoc_insertion_point(field_mutable:protocol.Signature.sign_data)
  return sign_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Signature::release_sign_data() {
  // @@protoc_insertion_point(field_release:protocol.Signature.sign_data)
  clear_has_sign_data();
  return sign_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Signature::set_allocated_sign_data(::std::string* sign_data) {
  if (sign_data != NULL) {
    set_has_sign_data();
  } else {
    clear_has_sign_data();
  }
  sign_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_data);
  // @@protoc_insertion_point(field_set_allocated:protocol.Signature.sign_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionEnv::kTransactionFieldNumber;
const int TransactionEnv::kSignaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionEnv::TransactionEnv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionEnv)
}
TransactionEnv::TransactionEnv(const TransactionEnv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::protocol::Transaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionEnv)
}

void TransactionEnv::SharedCtor() {
  _cached_size_ = 0;
  transaction_ = NULL;
}

TransactionEnv::~TransactionEnv() {
  // @@protoc_insertion_point(destructor:protocol.TransactionEnv)
  SharedDtor();
}

void TransactionEnv::SharedDtor() {
  if (this != internal_default_instance()) {
    delete transaction_;
  }
}

void TransactionEnv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionEnv::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionEnv& TransactionEnv::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionEnv* TransactionEnv::New(::google::protobuf::Arena* arena) const {
  TransactionEnv* n = new TransactionEnv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionEnv)
  signatures_.Clear();
  if (has_transaction()) {
    GOOGLE_DCHECK(transaction_ != NULL);
    transaction_->::protocol::Transaction::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionEnv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionEnv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.Transaction transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Signature signatures = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionEnv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionEnv)
  return false;
#undef DO_
}

void TransactionEnv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Transaction transaction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transaction_, output);
  }

  // repeated .protocol.Signature signatures = 2;
  for (unsigned int i = 0, n = this->signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signatures(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionEnv)
}

::google::protobuf::uint8* TransactionEnv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Transaction transaction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transaction_, deterministic, target);
  }

  // repeated .protocol.Signature signatures = 2;
  for (unsigned int i = 0, n = this->signatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->signatures(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionEnv)
  return target;
}

size_t TransactionEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionEnv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.Transaction transaction = 1;
  if (has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_);
  }
  // repeated .protocol.Signature signatures = 2;
  {
    unsigned int count = this->signatures_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signatures(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionEnv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionEnv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionEnv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionEnv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionEnv)
    MergeFrom(*source);
  }
}

void TransactionEnv::MergeFrom(const TransactionEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from.has_transaction()) {
    mutable_transaction()->::protocol::Transaction::MergeFrom(from.transaction());
  }
}

void TransactionEnv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionEnv::CopyFrom(const TransactionEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEnv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signatures())) return false;
  if (has_transaction()) {
    if (!this->transaction_->IsInitialized()) return false;
  }
  return true;
}

void TransactionEnv::Swap(TransactionEnv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionEnv::InternalSwap(TransactionEnv* other) {
  signatures_.InternalSwap(&other->signatures_);
  std::swap(transaction_, other->transaction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionEnv::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionEnv

// required .protocol.Transaction transaction = 1;
bool TransactionEnv::has_transaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionEnv::set_has_transaction() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionEnv::clear_has_transaction() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionEnv::clear_transaction() {
  if (transaction_ != NULL) transaction_->::protocol::Transaction::Clear();
  clear_has_transaction();
}
const ::protocol::Transaction& TransactionEnv::transaction() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnv.transaction)
  return transaction_ != NULL ? *transaction_
                         : *::protocol::Transaction::internal_default_instance();
}
::protocol::Transaction* TransactionEnv::mutable_transaction() {
  set_has_transaction();
  if (transaction_ == NULL) {
    transaction_ = new ::protocol::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:protocol.TransactionEnv.transaction)
  return transaction_;
}
::protocol::Transaction* TransactionEnv::release_transaction() {
  // @@protoc_insertion_point(field_release:protocol.TransactionEnv.transaction)
  clear_has_transaction();
  ::protocol::Transaction* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
void TransactionEnv::set_allocated_transaction(::protocol::Transaction* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    set_has_transaction();
  } else {
    clear_has_transaction();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionEnv.transaction)
}

// repeated .protocol.Signature signatures = 2;
int TransactionEnv::signatures_size() const {
  return signatures_.size();
}
void TransactionEnv::clear_signatures() {
  signatures_.Clear();
}
const ::protocol::Signature& TransactionEnv::signatures(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnv.signatures)
  return signatures_.Get(index);
}
::protocol::Signature* TransactionEnv::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionEnv.signatures)
  return signatures_.Mutable(index);
}
::protocol::Signature* TransactionEnv::add_signatures() {
  // @@protoc_insertion_point(field_add:protocol.TransactionEnv.signatures)
  return signatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Signature >*
TransactionEnv::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionEnv.signatures)
  return &signatures_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Signature >&
TransactionEnv::signatures() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionEnv.signatures)
  return signatures_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionEnvWrapper::kTransactionEnvFieldNumber;
const int TransactionEnvWrapper::kSuggestLedgerSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionEnvWrapper::TransactionEnvWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionEnvWrapper)
}
TransactionEnvWrapper::TransactionEnvWrapper(const TransactionEnvWrapper& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction_env()) {
    transaction_env_ = new ::protocol::TransactionEnv(*from.transaction_env_);
  } else {
    transaction_env_ = NULL;
  }
  suggest_ledger_seq_ = from.suggest_ledger_seq_;
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionEnvWrapper)
}

void TransactionEnvWrapper::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_env_, 0, reinterpret_cast<char*>(&suggest_ledger_seq_) -
    reinterpret_cast<char*>(&transaction_env_) + sizeof(suggest_ledger_seq_));
}

TransactionEnvWrapper::~TransactionEnvWrapper() {
  // @@protoc_insertion_point(destructor:protocol.TransactionEnvWrapper)
  SharedDtor();
}

void TransactionEnvWrapper::SharedDtor() {
  if (this != internal_default_instance()) {
    delete transaction_env_;
  }
}

void TransactionEnvWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionEnvWrapper::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionEnvWrapper& TransactionEnvWrapper::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionEnvWrapper* TransactionEnvWrapper::New(::google::protobuf::Arena* arena) const {
  TransactionEnvWrapper* n = new TransactionEnvWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionEnvWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionEnvWrapper)
  if (has_transaction_env()) {
    GOOGLE_DCHECK(transaction_env_ != NULL);
    transaction_env_->::protocol::TransactionEnv::Clear();
  }
  suggest_ledger_seq_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionEnvWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionEnvWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.TransactionEnv transaction_env = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 suggest_ledger_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_suggest_ledger_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &suggest_ledger_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionEnvWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionEnvWrapper)
  return false;
#undef DO_
}

void TransactionEnvWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionEnvWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.TransactionEnv transaction_env = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transaction_env_, output);
  }

  // optional int64 suggest_ledger_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->suggest_ledger_seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionEnvWrapper)
}

::google::protobuf::uint8* TransactionEnvWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionEnvWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.TransactionEnv transaction_env = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transaction_env_, deterministic, target);
  }

  // optional int64 suggest_ledger_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->suggest_ledger_seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionEnvWrapper)
  return target;
}

size_t TransactionEnvWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionEnvWrapper)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.TransactionEnv transaction_env = 1;
  if (has_transaction_env()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_env_);
  }
  // optional int64 suggest_ledger_seq = 2;
  if (has_suggest_ledger_seq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->suggest_ledger_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionEnvWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionEnvWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionEnvWrapper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionEnvWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionEnvWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionEnvWrapper)
    MergeFrom(*source);
  }
}

void TransactionEnvWrapper::MergeFrom(const TransactionEnvWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionEnvWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_transaction_env()->::protocol::TransactionEnv::MergeFrom(from.transaction_env());
    }
    if (cached_has_bits & 0x00000002u) {
      suggest_ledger_seq_ = from.suggest_ledger_seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionEnvWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionEnvWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionEnvWrapper::CopyFrom(const TransactionEnvWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionEnvWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEnvWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_transaction_env()) {
    if (!this->transaction_env_->IsInitialized()) return false;
  }
  return true;
}

void TransactionEnvWrapper::Swap(TransactionEnvWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionEnvWrapper::InternalSwap(TransactionEnvWrapper* other) {
  std::swap(transaction_env_, other->transaction_env_);
  std::swap(suggest_ledger_seq_, other->suggest_ledger_seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionEnvWrapper::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionEnvWrapper

// required .protocol.TransactionEnv transaction_env = 1;
bool TransactionEnvWrapper::has_transaction_env() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionEnvWrapper::set_has_transaction_env() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionEnvWrapper::clear_has_transaction_env() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionEnvWrapper::clear_transaction_env() {
  if (transaction_env_ != NULL) transaction_env_->::protocol::TransactionEnv::Clear();
  clear_has_transaction_env();
}
const ::protocol::TransactionEnv& TransactionEnvWrapper::transaction_env() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvWrapper.transaction_env)
  return transaction_env_ != NULL ? *transaction_env_
                         : *::protocol::TransactionEnv::internal_default_instance();
}
::protocol::TransactionEnv* TransactionEnvWrapper::mutable_transaction_env() {
  set_has_transaction_env();
  if (transaction_env_ == NULL) {
    transaction_env_ = new ::protocol::TransactionEnv;
  }
  // @@protoc_insertion_point(field_mutable:protocol.TransactionEnvWrapper.transaction_env)
  return transaction_env_;
}
::protocol::TransactionEnv* TransactionEnvWrapper::release_transaction_env() {
  // @@protoc_insertion_point(field_release:protocol.TransactionEnvWrapper.transaction_env)
  clear_has_transaction_env();
  ::protocol::TransactionEnv* temp = transaction_env_;
  transaction_env_ = NULL;
  return temp;
}
void TransactionEnvWrapper::set_allocated_transaction_env(::protocol::TransactionEnv* transaction_env) {
  delete transaction_env_;
  transaction_env_ = transaction_env;
  if (transaction_env) {
    set_has_transaction_env();
  } else {
    clear_has_transaction_env();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionEnvWrapper.transaction_env)
}

// optional int64 suggest_ledger_seq = 2;
bool TransactionEnvWrapper::has_suggest_ledger_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionEnvWrapper::set_has_suggest_ledger_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionEnvWrapper::clear_has_suggest_ledger_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionEnvWrapper::clear_suggest_ledger_seq() {
  suggest_ledger_seq_ = GOOGLE_LONGLONG(0);
  clear_has_suggest_ledger_seq();
}
::google::protobuf::int64 TransactionEnvWrapper::suggest_ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvWrapper.suggest_ledger_seq)
  return suggest_ledger_seq_;
}
void TransactionEnvWrapper::set_suggest_ledger_seq(::google::protobuf::int64 value) {
  set_has_suggest_ledger_seq();
  suggest_ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionEnvWrapper.suggest_ledger_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionEnvStore::kTransactionEnvFieldNumber;
const int TransactionEnvStore::kErrorCodeFieldNumber;
const int TransactionEnvStore::kErrorDescFieldNumber;
const int TransactionEnvStore::kLedgerSeqFieldNumber;
const int TransactionEnvStore::kCloseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionEnvStore::TransactionEnvStore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionEnvStore)
}
TransactionEnvStore::TransactionEnvStore(const TransactionEnvStore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_desc()) {
    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
  if (from.has_transaction_env()) {
    transaction_env_ = new ::protocol::TransactionEnv(*from.transaction_env_);
  } else {
    transaction_env_ = NULL;
  }
  ::memcpy(&ledger_seq_, &from.ledger_seq_,
    reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&ledger_seq_) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionEnvStore)
}

void TransactionEnvStore::SharedCtor() {
  _cached_size_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_env_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&transaction_env_) + sizeof(error_code_));
}

TransactionEnvStore::~TransactionEnvStore() {
  // @@protoc_insertion_point(destructor:protocol.TransactionEnvStore)
  SharedDtor();
}

void TransactionEnvStore::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete transaction_env_;
  }
}

void TransactionEnvStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionEnvStore::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionEnvStore& TransactionEnvStore::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionEnvStore* TransactionEnvStore::New(::google::protobuf::Arena* arena) const {
  TransactionEnvStore* n = new TransactionEnvStore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionEnvStore::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionEnvStore)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error_desc()) {
      GOOGLE_DCHECK(!error_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_transaction_env()) {
      GOOGLE_DCHECK(transaction_env_ != NULL);
      transaction_env_->::protocol::TransactionEnv::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&ledger_seq_, 0, reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&ledger_seq_) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionEnvStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionEnvStore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.TransactionEnv transaction_env = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes error_desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ledger_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ledger_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 close_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_close_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionEnvStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionEnvStore)
  return false;
#undef DO_
}

void TransactionEnvStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionEnvStore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.TransactionEnv transaction_env = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transaction_env_, output);
  }

  // optional int32 error_code = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional bytes error_desc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->error_desc(), output);
  }

  // optional int64 ledger_seq = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ledger_seq(), output);
  }

  // optional int64 close_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->close_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionEnvStore)
}

::google::protobuf::uint8* TransactionEnvStore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionEnvStore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.TransactionEnv transaction_env = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transaction_env_, deterministic, target);
  }

  // optional int32 error_code = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional bytes error_desc = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->error_desc(), target);
  }

  // optional int64 ledger_seq = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ledger_seq(), target);
  }

  // optional int64 close_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->close_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionEnvStore)
  return target;
}

size_t TransactionEnvStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionEnvStore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.TransactionEnv transaction_env = 1;
  if (has_transaction_env()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_env_);
  }
  // optional bytes error_desc = 3;
  if (has_error_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_desc());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional int64 ledger_seq = 4;
    if (has_ledger_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ledger_seq());
    }

    // optional int64 close_time = 5;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->close_time());
    }

    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionEnvStore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionEnvStore)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionEnvStore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionEnvStore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionEnvStore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionEnvStore)
    MergeFrom(*source);
  }
}

void TransactionEnvStore::MergeFrom(const TransactionEnvStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionEnvStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_desc();
      error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_transaction_env()->::protocol::TransactionEnv::MergeFrom(from.transaction_env());
    }
    if (cached_has_bits & 0x00000004u) {
      ledger_seq_ = from.ledger_seq_;
    }
    if (cached_has_bits & 0x00000008u) {
      close_time_ = from.close_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionEnvStore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionEnvStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionEnvStore::CopyFrom(const TransactionEnvStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionEnvStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEnvStore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_transaction_env()) {
    if (!this->transaction_env_->IsInitialized()) return false;
  }
  return true;
}

void TransactionEnvStore::Swap(TransactionEnvStore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionEnvStore::InternalSwap(TransactionEnvStore* other) {
  error_desc_.Swap(&other->error_desc_);
  std::swap(transaction_env_, other->transaction_env_);
  std::swap(ledger_seq_, other->ledger_seq_);
  std::swap(close_time_, other->close_time_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionEnvStore::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionEnvStore

// required .protocol.TransactionEnv transaction_env = 1;
bool TransactionEnvStore::has_transaction_env() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionEnvStore::set_has_transaction_env() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionEnvStore::clear_has_transaction_env() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionEnvStore::clear_transaction_env() {
  if (transaction_env_ != NULL) transaction_env_->::protocol::TransactionEnv::Clear();
  clear_has_transaction_env();
}
const ::protocol::TransactionEnv& TransactionEnvStore::transaction_env() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvStore.transaction_env)
  return transaction_env_ != NULL ? *transaction_env_
                         : *::protocol::TransactionEnv::internal_default_instance();
}
::protocol::TransactionEnv* TransactionEnvStore::mutable_transaction_env() {
  set_has_transaction_env();
  if (transaction_env_ == NULL) {
    transaction_env_ = new ::protocol::TransactionEnv;
  }
  // @@protoc_insertion_point(field_mutable:protocol.TransactionEnvStore.transaction_env)
  return transaction_env_;
}
::protocol::TransactionEnv* TransactionEnvStore::release_transaction_env() {
  // @@protoc_insertion_point(field_release:protocol.TransactionEnvStore.transaction_env)
  clear_has_transaction_env();
  ::protocol::TransactionEnv* temp = transaction_env_;
  transaction_env_ = NULL;
  return temp;
}
void TransactionEnvStore::set_allocated_transaction_env(::protocol::TransactionEnv* transaction_env) {
  delete transaction_env_;
  transaction_env_ = transaction_env;
  if (transaction_env) {
    set_has_transaction_env();
  } else {
    clear_has_transaction_env();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionEnvStore.transaction_env)
}

// optional int32 error_code = 2;
bool TransactionEnvStore::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionEnvStore::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionEnvStore::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionEnvStore::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::google::protobuf::int32 TransactionEnvStore::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvStore.error_code)
  return error_code_;
}
void TransactionEnvStore::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionEnvStore.error_code)
}

// optional bytes error_desc = 3;
bool TransactionEnvStore::has_error_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionEnvStore::set_has_error_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionEnvStore::clear_has_error_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionEnvStore::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_desc();
}
const ::std::string& TransactionEnvStore::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvStore.error_desc)
  return error_desc_.GetNoArena();
}
void TransactionEnvStore::set_error_desc(const ::std::string& value) {
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionEnvStore.error_desc)
}
#if LANG_CXX11
void TransactionEnvStore::set_error_desc(::std::string&& value) {
  set_has_error_desc();
  error_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionEnvStore.error_desc)
}
#endif
void TransactionEnvStore::set_error_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionEnvStore.error_desc)
}
void TransactionEnvStore::set_error_desc(const void* value, size_t size) {
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionEnvStore.error_desc)
}
::std::string* TransactionEnvStore::mutable_error_desc() {
  set_has_error_desc();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionEnvStore.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionEnvStore::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.TransactionEnvStore.error_desc)
  clear_has_error_desc();
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionEnvStore::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    set_has_error_desc();
  } else {
    clear_has_error_desc();
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionEnvStore.error_desc)
}

// optional int64 ledger_seq = 4;
bool TransactionEnvStore::has_ledger_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionEnvStore::set_has_ledger_seq() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionEnvStore::clear_has_ledger_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionEnvStore::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
  clear_has_ledger_seq();
}
::google::protobuf::int64 TransactionEnvStore::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvStore.ledger_seq)
  return ledger_seq_;
}
void TransactionEnvStore::set_ledger_seq(::google::protobuf::int64 value) {
  set_has_ledger_seq();
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionEnvStore.ledger_seq)
}

// optional int64 close_time = 5;
bool TransactionEnvStore::has_close_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionEnvStore::set_has_close_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionEnvStore::clear_has_close_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionEnvStore::clear_close_time() {
  close_time_ = GOOGLE_LONGLONG(0);
  clear_has_close_time();
}
::google::protobuf::int64 TransactionEnvStore::close_time() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionEnvStore.close_time)
  return close_time_;
}
void TransactionEnvStore::set_close_time(::google::protobuf::int64 value) {
  set_has_close_time();
  close_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionEnvStore.close_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlaveVerifyRequest::kPeerMessageFieldNumber;
const int SlaveVerifyRequest::kPeerIdFieldNumber;
const int SlaveVerifyRequest::kTxsetHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlaveVerifyRequest::SlaveVerifyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SlaveVerifyRequest)
}
SlaveVerifyRequest::SlaveVerifyRequest(const SlaveVerifyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_message()) {
    peer_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_message_);
  }
  txset_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txset_hash()) {
    txset_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txset_hash_);
  }
  peer_id_ = from.peer_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.SlaveVerifyRequest)
}

void SlaveVerifyRequest::SharedCtor() {
  _cached_size_ = 0;
  peer_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txset_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = GOOGLE_LONGLONG(0);
}

SlaveVerifyRequest::~SlaveVerifyRequest() {
  // @@protoc_insertion_point(destructor:protocol.SlaveVerifyRequest)
  SharedDtor();
}

void SlaveVerifyRequest::SharedDtor() {
  peer_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txset_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SlaveVerifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveVerifyRequest::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SlaveVerifyRequest& SlaveVerifyRequest::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SlaveVerifyRequest* SlaveVerifyRequest::New(::google::protobuf::Arena* arena) const {
  SlaveVerifyRequest* n = new SlaveVerifyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlaveVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SlaveVerifyRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_peer_message()) {
      GOOGLE_DCHECK(!peer_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_txset_hash()) {
      GOOGLE_DCHECK(!txset_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*txset_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  peer_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SlaveVerifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SlaveVerifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes peer_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 peer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_peer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes txset_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txset_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SlaveVerifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SlaveVerifyRequest)
  return false;
#undef DO_
}

void SlaveVerifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SlaveVerifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes peer_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->peer_message(), output);
  }

  // required int64 peer_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->peer_id(), output);
  }

  // optional bytes txset_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->txset_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SlaveVerifyRequest)
}

::google::protobuf::uint8* SlaveVerifyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SlaveVerifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes peer_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->peer_message(), target);
  }

  // required int64 peer_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->peer_id(), target);
  }

  // optional bytes txset_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->txset_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SlaveVerifyRequest)
  return target;
}

size_t SlaveVerifyRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.SlaveVerifyRequest)
  size_t total_size = 0;

  if (has_peer_message()) {
    // required bytes peer_message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_message());
  }

  if (has_peer_id()) {
    // required int64 peer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peer_id());
  }

  return total_size;
}
size_t SlaveVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SlaveVerifyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes peer_message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_message());

    // required int64 peer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peer_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes txset_hash = 3;
  if (has_txset_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txset_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveVerifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.SlaveVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SlaveVerifyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlaveVerifyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.SlaveVerifyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.SlaveVerifyRequest)
    MergeFrom(*source);
  }
}

void SlaveVerifyRequest::MergeFrom(const SlaveVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SlaveVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_message();
      peer_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_txset_hash();
      txset_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txset_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      peer_id_ = from.peer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SlaveVerifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.SlaveVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveVerifyRequest::CopyFrom(const SlaveVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SlaveVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveVerifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void SlaveVerifyRequest::Swap(SlaveVerifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlaveVerifyRequest::InternalSwap(SlaveVerifyRequest* other) {
  peer_message_.Swap(&other->peer_message_);
  txset_hash_.Swap(&other->txset_hash_);
  std::swap(peer_id_, other->peer_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlaveVerifyRequest::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlaveVerifyRequest

// required bytes peer_message = 1;
bool SlaveVerifyRequest::has_peer_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SlaveVerifyRequest::set_has_peer_message() {
  _has_bits_[0] |= 0x00000001u;
}
void SlaveVerifyRequest::clear_has_peer_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void SlaveVerifyRequest::clear_peer_message() {
  peer_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_message();
}
const ::std::string& SlaveVerifyRequest::peer_message() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyRequest.peer_message)
  return peer_message_.GetNoArena();
}
void SlaveVerifyRequest::set_peer_message(const ::std::string& value) {
  set_has_peer_message();
  peer_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyRequest.peer_message)
}
#if LANG_CXX11
void SlaveVerifyRequest::set_peer_message(::std::string&& value) {
  set_has_peer_message();
  peer_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyRequest.peer_message)
}
#endif
void SlaveVerifyRequest::set_peer_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_message();
  peer_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyRequest.peer_message)
}
void SlaveVerifyRequest::set_peer_message(const void* value, size_t size) {
  set_has_peer_message();
  peer_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyRequest.peer_message)
}
::std::string* SlaveVerifyRequest::mutable_peer_message() {
  set_has_peer_message();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyRequest.peer_message)
  return peer_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyRequest::release_peer_message() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyRequest.peer_message)
  clear_has_peer_message();
  return peer_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyRequest::set_allocated_peer_message(::std::string* peer_message) {
  if (peer_message != NULL) {
    set_has_peer_message();
  } else {
    clear_has_peer_message();
  }
  peer_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyRequest.peer_message)
}

// required int64 peer_id = 2;
bool SlaveVerifyRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SlaveVerifyRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SlaveVerifyRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SlaveVerifyRequest::clear_peer_id() {
  peer_id_ = GOOGLE_LONGLONG(0);
  clear_has_peer_id();
}
::google::protobuf::int64 SlaveVerifyRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyRequest.peer_id)
  return peer_id_;
}
void SlaveVerifyRequest::set_peer_id(::google::protobuf::int64 value) {
  set_has_peer_id();
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyRequest.peer_id)
}

// optional bytes txset_hash = 3;
bool SlaveVerifyRequest::has_txset_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SlaveVerifyRequest::set_has_txset_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void SlaveVerifyRequest::clear_has_txset_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void SlaveVerifyRequest::clear_txset_hash() {
  txset_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txset_hash();
}
const ::std::string& SlaveVerifyRequest::txset_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyRequest.txset_hash)
  return txset_hash_.GetNoArena();
}
void SlaveVerifyRequest::set_txset_hash(const ::std::string& value) {
  set_has_txset_hash();
  txset_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyRequest.txset_hash)
}
#if LANG_CXX11
void SlaveVerifyRequest::set_txset_hash(::std::string&& value) {
  set_has_txset_hash();
  txset_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyRequest.txset_hash)
}
#endif
void SlaveVerifyRequest::set_txset_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txset_hash();
  txset_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyRequest.txset_hash)
}
void SlaveVerifyRequest::set_txset_hash(const void* value, size_t size) {
  set_has_txset_hash();
  txset_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyRequest.txset_hash)
}
::std::string* SlaveVerifyRequest::mutable_txset_hash() {
  set_has_txset_hash();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyRequest.txset_hash)
  return txset_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyRequest::release_txset_hash() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyRequest.txset_hash)
  clear_has_txset_hash();
  return txset_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyRequest::set_allocated_txset_hash(::std::string* txset_hash) {
  if (txset_hash != NULL) {
    set_has_txset_hash();
  } else {
    clear_has_txset_hash();
  }
  txset_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txset_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyRequest.txset_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlaveVerifyResponse::kPeerMessageFieldNumber;
const int SlaveVerifyResponse::kPeerIdFieldNumber;
const int SlaveVerifyResponse::kTxsetHashFieldNumber;
const int SlaveVerifyResponse::kPeerMessageHashFieldNumber;
const int SlaveVerifyResponse::kTransactionHashFieldNumber;
const int SlaveVerifyResponse::kTransactionEnvHashFieldNumber;
const int SlaveVerifyResponse::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlaveVerifyResponse::SlaveVerifyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SlaveVerifyResponse)
}
SlaveVerifyResponse::SlaveVerifyResponse(const SlaveVerifyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      address_(from.address_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_message()) {
    peer_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_message_);
  }
  txset_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txset_hash()) {
    txset_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txset_hash_);
  }
  peer_message_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_message_hash()) {
    peer_message_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_message_hash_);
  }
  transaction_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_hash()) {
    transaction_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_hash_);
  }
  transaction_env_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_env_hash()) {
    transaction_env_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_env_hash_);
  }
  peer_id_ = from.peer_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.SlaveVerifyResponse)
}

void SlaveVerifyResponse::SharedCtor() {
  _cached_size_ = 0;
  peer_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txset_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_message_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_env_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = GOOGLE_LONGLONG(0);
}

SlaveVerifyResponse::~SlaveVerifyResponse() {
  // @@protoc_insertion_point(destructor:protocol.SlaveVerifyResponse)
  SharedDtor();
}

void SlaveVerifyResponse::SharedDtor() {
  peer_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txset_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_message_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_env_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SlaveVerifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveVerifyResponse::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SlaveVerifyResponse& SlaveVerifyResponse::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SlaveVerifyResponse* SlaveVerifyResponse::New(::google::protobuf::Arena* arena) const {
  SlaveVerifyResponse* n = new SlaveVerifyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlaveVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SlaveVerifyResponse)
  address_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_peer_message()) {
      GOOGLE_DCHECK(!peer_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_message_.UnsafeRawStringPointer())->clear();
    }
    if (has_txset_hash()) {
      GOOGLE_DCHECK(!txset_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*txset_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_peer_message_hash()) {
      GOOGLE_DCHECK(!peer_message_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_message_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_transaction_hash()) {
      GOOGLE_DCHECK(!transaction_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_transaction_env_hash()) {
      GOOGLE_DCHECK(!transaction_env_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_env_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  peer_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SlaveVerifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SlaveVerifyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes peer_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 peer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_peer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes txset_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txset_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes peer_message_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_message_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes transaction_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes transaction_env_hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_env_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string address = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address(this->address_size() - 1).data(),
            this->address(this->address_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.SlaveVerifyResponse.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SlaveVerifyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SlaveVerifyResponse)
  return false;
#undef DO_
}

void SlaveVerifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SlaveVerifyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes peer_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->peer_message(), output);
  }

  // optional int64 peer_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->peer_id(), output);
  }

  // optional bytes txset_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->txset_hash(), output);
  }

  // required bytes peer_message_hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->peer_message_hash(), output);
  }

  // required bytes transaction_hash = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->transaction_hash(), output);
  }

  // required bytes transaction_env_hash = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->transaction_env_hash(), output);
  }

  // repeated string address = 7;
  for (int i = 0, n = this->address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address(i).data(), this->address(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SlaveVerifyResponse.address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->address(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SlaveVerifyResponse)
}

::google::protobuf::uint8* SlaveVerifyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SlaveVerifyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes peer_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->peer_message(), target);
  }

  // optional int64 peer_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->peer_id(), target);
  }

  // optional bytes txset_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->txset_hash(), target);
  }

  // required bytes peer_message_hash = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->peer_message_hash(), target);
  }

  // required bytes transaction_hash = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->transaction_hash(), target);
  }

  // required bytes transaction_env_hash = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->transaction_env_hash(), target);
  }

  // repeated string address = 7;
  for (int i = 0, n = this->address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address(i).data(), this->address(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SlaveVerifyResponse.address");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->address(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SlaveVerifyResponse)
  return target;
}

size_t SlaveVerifyResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.SlaveVerifyResponse)
  size_t total_size = 0;

  if (has_peer_message()) {
    // required bytes peer_message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_message());
  }

  if (has_peer_message_hash()) {
    // required bytes peer_message_hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_message_hash());
  }

  if (has_transaction_hash()) {
    // required bytes transaction_hash = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_hash());
  }

  if (has_transaction_env_hash()) {
    // required bytes transaction_env_hash = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_env_hash());
  }

  return total_size;
}
size_t SlaveVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SlaveVerifyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required bytes peer_message = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_message());

    // required bytes peer_message_hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_message_hash());

    // required bytes transaction_hash = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_hash());

    // required bytes transaction_env_hash = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_env_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string address = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->address_size());
  for (int i = 0, n = this->address_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->address(i));
  }

  // optional bytes txset_hash = 3;
  if (has_txset_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txset_hash());
  }

  // optional int64 peer_id = 2;
  if (has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveVerifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.SlaveVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SlaveVerifyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlaveVerifyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.SlaveVerifyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.SlaveVerifyResponse)
    MergeFrom(*source);
  }
}

void SlaveVerifyResponse::MergeFrom(const SlaveVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SlaveVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_message();
      peer_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_txset_hash();
      txset_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txset_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_peer_message_hash();
      peer_message_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_message_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_transaction_hash();
      transaction_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_transaction_env_hash();
      transaction_env_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_env_hash_);
    }
    if (cached_has_bits & 0x00000020u) {
      peer_id_ = from.peer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SlaveVerifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.SlaveVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveVerifyResponse::CopyFrom(const SlaveVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SlaveVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveVerifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  return true;
}

void SlaveVerifyResponse::Swap(SlaveVerifyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlaveVerifyResponse::InternalSwap(SlaveVerifyResponse* other) {
  address_.InternalSwap(&other->address_);
  peer_message_.Swap(&other->peer_message_);
  txset_hash_.Swap(&other->txset_hash_);
  peer_message_hash_.Swap(&other->peer_message_hash_);
  transaction_hash_.Swap(&other->transaction_hash_);
  transaction_env_hash_.Swap(&other->transaction_env_hash_);
  std::swap(peer_id_, other->peer_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlaveVerifyResponse::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlaveVerifyResponse

// required bytes peer_message = 1;
bool SlaveVerifyResponse::has_peer_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SlaveVerifyResponse::set_has_peer_message() {
  _has_bits_[0] |= 0x00000001u;
}
void SlaveVerifyResponse::clear_has_peer_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void SlaveVerifyResponse::clear_peer_message() {
  peer_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_message();
}
const ::std::string& SlaveVerifyResponse::peer_message() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.peer_message)
  return peer_message_.GetNoArena();
}
void SlaveVerifyResponse::set_peer_message(const ::std::string& value) {
  set_has_peer_message();
  peer_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.peer_message)
}
#if LANG_CXX11
void SlaveVerifyResponse::set_peer_message(::std::string&& value) {
  set_has_peer_message();
  peer_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyResponse.peer_message)
}
#endif
void SlaveVerifyResponse::set_peer_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_message();
  peer_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyResponse.peer_message)
}
void SlaveVerifyResponse::set_peer_message(const void* value, size_t size) {
  set_has_peer_message();
  peer_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyResponse.peer_message)
}
::std::string* SlaveVerifyResponse::mutable_peer_message() {
  set_has_peer_message();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyResponse.peer_message)
  return peer_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyResponse::release_peer_message() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyResponse.peer_message)
  clear_has_peer_message();
  return peer_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyResponse::set_allocated_peer_message(::std::string* peer_message) {
  if (peer_message != NULL) {
    set_has_peer_message();
  } else {
    clear_has_peer_message();
  }
  peer_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyResponse.peer_message)
}

// optional int64 peer_id = 2;
bool SlaveVerifyResponse::has_peer_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SlaveVerifyResponse::set_has_peer_id() {
  _has_bits_[0] |= 0x00000020u;
}
void SlaveVerifyResponse::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void SlaveVerifyResponse::clear_peer_id() {
  peer_id_ = GOOGLE_LONGLONG(0);
  clear_has_peer_id();
}
::google::protobuf::int64 SlaveVerifyResponse::peer_id() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.peer_id)
  return peer_id_;
}
void SlaveVerifyResponse::set_peer_id(::google::protobuf::int64 value) {
  set_has_peer_id();
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.peer_id)
}

// optional bytes txset_hash = 3;
bool SlaveVerifyResponse::has_txset_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SlaveVerifyResponse::set_has_txset_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void SlaveVerifyResponse::clear_has_txset_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void SlaveVerifyResponse::clear_txset_hash() {
  txset_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txset_hash();
}
const ::std::string& SlaveVerifyResponse::txset_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.txset_hash)
  return txset_hash_.GetNoArena();
}
void SlaveVerifyResponse::set_txset_hash(const ::std::string& value) {
  set_has_txset_hash();
  txset_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.txset_hash)
}
#if LANG_CXX11
void SlaveVerifyResponse::set_txset_hash(::std::string&& value) {
  set_has_txset_hash();
  txset_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyResponse.txset_hash)
}
#endif
void SlaveVerifyResponse::set_txset_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txset_hash();
  txset_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyResponse.txset_hash)
}
void SlaveVerifyResponse::set_txset_hash(const void* value, size_t size) {
  set_has_txset_hash();
  txset_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyResponse.txset_hash)
}
::std::string* SlaveVerifyResponse::mutable_txset_hash() {
  set_has_txset_hash();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyResponse.txset_hash)
  return txset_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyResponse::release_txset_hash() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyResponse.txset_hash)
  clear_has_txset_hash();
  return txset_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyResponse::set_allocated_txset_hash(::std::string* txset_hash) {
  if (txset_hash != NULL) {
    set_has_txset_hash();
  } else {
    clear_has_txset_hash();
  }
  txset_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txset_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyResponse.txset_hash)
}

// required bytes peer_message_hash = 4;
bool SlaveVerifyResponse::has_peer_message_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SlaveVerifyResponse::set_has_peer_message_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void SlaveVerifyResponse::clear_has_peer_message_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void SlaveVerifyResponse::clear_peer_message_hash() {
  peer_message_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_message_hash();
}
const ::std::string& SlaveVerifyResponse::peer_message_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.peer_message_hash)
  return peer_message_hash_.GetNoArena();
}
void SlaveVerifyResponse::set_peer_message_hash(const ::std::string& value) {
  set_has_peer_message_hash();
  peer_message_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.peer_message_hash)
}
#if LANG_CXX11
void SlaveVerifyResponse::set_peer_message_hash(::std::string&& value) {
  set_has_peer_message_hash();
  peer_message_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyResponse.peer_message_hash)
}
#endif
void SlaveVerifyResponse::set_peer_message_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_message_hash();
  peer_message_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyResponse.peer_message_hash)
}
void SlaveVerifyResponse::set_peer_message_hash(const void* value, size_t size) {
  set_has_peer_message_hash();
  peer_message_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyResponse.peer_message_hash)
}
::std::string* SlaveVerifyResponse::mutable_peer_message_hash() {
  set_has_peer_message_hash();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyResponse.peer_message_hash)
  return peer_message_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyResponse::release_peer_message_hash() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyResponse.peer_message_hash)
  clear_has_peer_message_hash();
  return peer_message_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyResponse::set_allocated_peer_message_hash(::std::string* peer_message_hash) {
  if (peer_message_hash != NULL) {
    set_has_peer_message_hash();
  } else {
    clear_has_peer_message_hash();
  }
  peer_message_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_message_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyResponse.peer_message_hash)
}

// required bytes transaction_hash = 5;
bool SlaveVerifyResponse::has_transaction_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SlaveVerifyResponse::set_has_transaction_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void SlaveVerifyResponse::clear_has_transaction_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void SlaveVerifyResponse::clear_transaction_hash() {
  transaction_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_hash();
}
const ::std::string& SlaveVerifyResponse::transaction_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.transaction_hash)
  return transaction_hash_.GetNoArena();
}
void SlaveVerifyResponse::set_transaction_hash(const ::std::string& value) {
  set_has_transaction_hash();
  transaction_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.transaction_hash)
}
#if LANG_CXX11
void SlaveVerifyResponse::set_transaction_hash(::std::string&& value) {
  set_has_transaction_hash();
  transaction_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyResponse.transaction_hash)
}
#endif
void SlaveVerifyResponse::set_transaction_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transaction_hash();
  transaction_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyResponse.transaction_hash)
}
void SlaveVerifyResponse::set_transaction_hash(const void* value, size_t size) {
  set_has_transaction_hash();
  transaction_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyResponse.transaction_hash)
}
::std::string* SlaveVerifyResponse::mutable_transaction_hash() {
  set_has_transaction_hash();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyResponse.transaction_hash)
  return transaction_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyResponse::release_transaction_hash() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyResponse.transaction_hash)
  clear_has_transaction_hash();
  return transaction_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyResponse::set_allocated_transaction_hash(::std::string* transaction_hash) {
  if (transaction_hash != NULL) {
    set_has_transaction_hash();
  } else {
    clear_has_transaction_hash();
  }
  transaction_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyResponse.transaction_hash)
}

// required bytes transaction_env_hash = 6;
bool SlaveVerifyResponse::has_transaction_env_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SlaveVerifyResponse::set_has_transaction_env_hash() {
  _has_bits_[0] |= 0x00000010u;
}
void SlaveVerifyResponse::clear_has_transaction_env_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
void SlaveVerifyResponse::clear_transaction_env_hash() {
  transaction_env_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_env_hash();
}
const ::std::string& SlaveVerifyResponse::transaction_env_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.transaction_env_hash)
  return transaction_env_hash_.GetNoArena();
}
void SlaveVerifyResponse::set_transaction_env_hash(const ::std::string& value) {
  set_has_transaction_env_hash();
  transaction_env_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.transaction_env_hash)
}
#if LANG_CXX11
void SlaveVerifyResponse::set_transaction_env_hash(::std::string&& value) {
  set_has_transaction_env_hash();
  transaction_env_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SlaveVerifyResponse.transaction_env_hash)
}
#endif
void SlaveVerifyResponse::set_transaction_env_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transaction_env_hash();
  transaction_env_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyResponse.transaction_env_hash)
}
void SlaveVerifyResponse::set_transaction_env_hash(const void* value, size_t size) {
  set_has_transaction_env_hash();
  transaction_env_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyResponse.transaction_env_hash)
}
::std::string* SlaveVerifyResponse::mutable_transaction_env_hash() {
  set_has_transaction_env_hash();
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyResponse.transaction_env_hash)
  return transaction_env_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlaveVerifyResponse::release_transaction_env_hash() {
  // @@protoc_insertion_point(field_release:protocol.SlaveVerifyResponse.transaction_env_hash)
  clear_has_transaction_env_hash();
  return transaction_env_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlaveVerifyResponse::set_allocated_transaction_env_hash(::std::string* transaction_env_hash) {
  if (transaction_env_hash != NULL) {
    set_has_transaction_env_hash();
  } else {
    clear_has_transaction_env_hash();
  }
  transaction_env_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_env_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SlaveVerifyResponse.transaction_env_hash)
}

// repeated string address = 7;
int SlaveVerifyResponse::address_size() const {
  return address_.size();
}
void SlaveVerifyResponse::clear_address() {
  address_.Clear();
}
const ::std::string& SlaveVerifyResponse::address(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SlaveVerifyResponse.address)
  return address_.Get(index);
}
::std::string* SlaveVerifyResponse::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SlaveVerifyResponse.address)
  return address_.Mutable(index);
}
void SlaveVerifyResponse::set_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.address)
  address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SlaveVerifyResponse::set_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.SlaveVerifyResponse.address)
  address_.Mutable(index)->assign(std::move(value));
}
#endif
void SlaveVerifyResponse::set_address(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.SlaveVerifyResponse.address)
}
void SlaveVerifyResponse::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.SlaveVerifyResponse.address)
}
::std::string* SlaveVerifyResponse::add_address() {
  // @@protoc_insertion_point(field_add_mutable:protocol.SlaveVerifyResponse.address)
  return address_.Add();
}
void SlaveVerifyResponse::add_address(const ::std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.SlaveVerifyResponse.address)
}
#if LANG_CXX11
void SlaveVerifyResponse::add_address(::std::string&& value) {
  address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.SlaveVerifyResponse.address)
}
#endif
void SlaveVerifyResponse::add_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.SlaveVerifyResponse.address)
}
void SlaveVerifyResponse::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.SlaveVerifyResponse.address)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SlaveVerifyResponse::address() const {
  // @@protoc_insertion_point(field_list:protocol.SlaveVerifyResponse.address)
  return address_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SlaveVerifyResponse::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SlaveVerifyResponse.address)
  return &address_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTxHashSet::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTxHashSet::GetTxHashSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.GetTxHashSet)
}
GetTxHashSet::GetTxHashSet(const GetTxHashSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.GetTxHashSet)
}

void GetTxHashSet::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTxHashSet::~GetTxHashSet() {
  // @@protoc_insertion_point(destructor:protocol.GetTxHashSet)
  SharedDtor();
}

void GetTxHashSet::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTxHashSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTxHashSet::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTxHashSet& GetTxHashSet::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTxHashSet* GetTxHashSet::New(::google::protobuf::Arena* arena) const {
  GetTxHashSet* n = new GetTxHashSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTxHashSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GetTxHashSet)
  if (has_hash()) {
    GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hash_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTxHashSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.GetTxHashSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.GetTxHashSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.GetTxHashSet)
  return false;
#undef DO_
}

void GetTxHashSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.GetTxHashSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.GetTxHashSet)
}

::google::protobuf::uint8* GetTxHashSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GetTxHashSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GetTxHashSet)
  return target;
}

size_t GetTxHashSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GetTxHashSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes hash = 1;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTxHashSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GetTxHashSet)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTxHashSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTxHashSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GetTxHashSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GetTxHashSet)
    MergeFrom(*source);
  }
}

void GetTxHashSet::MergeFrom(const GetTxHashSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GetTxHashSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hash()) {
    set_has_hash();
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void GetTxHashSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GetTxHashSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTxHashSet::CopyFrom(const GetTxHashSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GetTxHashSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxHashSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetTxHashSet::Swap(GetTxHashSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTxHashSet::InternalSwap(GetTxHashSet* other) {
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTxHashSet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTxHashSet

// required bytes hash = 1;
bool GetTxHashSet::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTxHashSet::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTxHashSet::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTxHashSet::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& GetTxHashSet::hash() const {
  // @@protoc_insertion_point(field_get:protocol.GetTxHashSet.hash)
  return hash_.GetNoArena();
}
void GetTxHashSet::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.GetTxHashSet.hash)
}
#if LANG_CXX11
void GetTxHashSet::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.GetTxHashSet.hash)
}
#endif
void GetTxHashSet::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.GetTxHashSet.hash)
}
void GetTxHashSet::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.GetTxHashSet.hash)
}
::std::string* GetTxHashSet::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.GetTxHashSet.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTxHashSet::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.GetTxHashSet.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTxHashSet::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.GetTxHashSet.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxHashSet::kHashFieldNumber;
const int TxHashSet::kPreviousLedgerHashFieldNumber;
const int TxHashSet::kHashsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxHashSet::TxHashSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TxHashSet)
}
TxHashSet::TxHashSet(const TxHashSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hashs_(from.hashs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  previous_ledger_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previous_ledger_hash()) {
    previous_ledger_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_ledger_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TxHashSet)
}

void TxHashSet::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_ledger_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxHashSet::~TxHashSet() {
  // @@protoc_insertion_point(destructor:protocol.TxHashSet)
  SharedDtor();
}

void TxHashSet::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_ledger_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxHashSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxHashSet::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxHashSet& TxHashSet::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxHashSet* TxHashSet::New(::google::protobuf::Arena* arena) const {
  TxHashSet* n = new TxHashSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxHashSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TxHashSet)
  hashs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hash()) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_previous_ledger_hash()) {
      GOOGLE_DCHECK(!previous_ledger_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*previous_ledger_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxHashSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TxHashSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes previous_ledger_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_ledger_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes hashs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hashs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TxHashSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TxHashSet)
  return false;
#undef DO_
}

void TxHashSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TxHashSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // required bytes previous_ledger_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previous_ledger_hash(), output);
  }

  // repeated bytes hashs = 3;
  for (int i = 0, n = this->hashs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hashs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TxHashSet)
}

::google::protobuf::uint8* TxHashSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TxHashSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // required bytes previous_ledger_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->previous_ledger_hash(), target);
  }

  // repeated bytes hashs = 3;
  for (int i = 0, n = this->hashs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->hashs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TxHashSet)
  return target;
}

size_t TxHashSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.TxHashSet)
  size_t total_size = 0;

  if (has_hash()) {
    // required bytes hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  if (has_previous_ledger_hash()) {
    // required bytes previous_ledger_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_ledger_hash());
  }

  return total_size;
}
size_t TxHashSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TxHashSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

    // required bytes previous_ledger_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_ledger_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes hashs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hashs_size());
  for (int i = 0, n = this->hashs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hashs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxHashSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TxHashSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TxHashSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxHashSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TxHashSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TxHashSet)
    MergeFrom(*source);
  }
}

void TxHashSet::MergeFrom(const TxHashSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TxHashSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashs_.MergeFrom(from.hashs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_previous_ledger_hash();
      previous_ledger_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_ledger_hash_);
    }
  }
}

void TxHashSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TxHashSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxHashSet::CopyFrom(const TxHashSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TxHashSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxHashSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TxHashSet::Swap(TxHashSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxHashSet::InternalSwap(TxHashSet* other) {
  hashs_.InternalSwap(&other->hashs_);
  hash_.Swap(&other->hash_);
  previous_ledger_hash_.Swap(&other->previous_ledger_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxHashSet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxHashSet

// required bytes hash = 1;
bool TxHashSet::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TxHashSet::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void TxHashSet::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void TxHashSet::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& TxHashSet::hash() const {
  // @@protoc_insertion_point(field_get:protocol.TxHashSet.hash)
  return hash_.GetNoArena();
}
void TxHashSet::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TxHashSet.hash)
}
#if LANG_CXX11
void TxHashSet::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TxHashSet.hash)
}
#endif
void TxHashSet::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TxHashSet.hash)
}
void TxHashSet::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TxHashSet.hash)
}
::std::string* TxHashSet::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.TxHashSet.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxHashSet::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.TxHashSet.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxHashSet::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TxHashSet.hash)
}

// required bytes previous_ledger_hash = 2;
bool TxHashSet::has_previous_ledger_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TxHashSet::set_has_previous_ledger_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void TxHashSet::clear_has_previous_ledger_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void TxHashSet::clear_previous_ledger_hash() {
  previous_ledger_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previous_ledger_hash();
}
const ::std::string& TxHashSet::previous_ledger_hash() const {
  // @@protoc_insertion_point(field_get:protocol.TxHashSet.previous_ledger_hash)
  return previous_ledger_hash_.GetNoArena();
}
void TxHashSet::set_previous_ledger_hash(const ::std::string& value) {
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TxHashSet.previous_ledger_hash)
}
#if LANG_CXX11
void TxHashSet::set_previous_ledger_hash(::std::string&& value) {
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TxHashSet.previous_ledger_hash)
}
#endif
void TxHashSet::set_previous_ledger_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TxHashSet.previous_ledger_hash)
}
void TxHashSet::set_previous_ledger_hash(const void* value, size_t size) {
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TxHashSet.previous_ledger_hash)
}
::std::string* TxHashSet::mutable_previous_ledger_hash() {
  set_has_previous_ledger_hash();
  // @@protoc_insertion_point(field_mutable:protocol.TxHashSet.previous_ledger_hash)
  return previous_ledger_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxHashSet::release_previous_ledger_hash() {
  // @@protoc_insertion_point(field_release:protocol.TxHashSet.previous_ledger_hash)
  clear_has_previous_ledger_hash();
  return previous_ledger_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxHashSet::set_allocated_previous_ledger_hash(::std::string* previous_ledger_hash) {
  if (previous_ledger_hash != NULL) {
    set_has_previous_ledger_hash();
  } else {
    clear_has_previous_ledger_hash();
  }
  previous_ledger_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_ledger_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TxHashSet.previous_ledger_hash)
}

// repeated bytes hashs = 3;
int TxHashSet::hashs_size() const {
  return hashs_.size();
}
void TxHashSet::clear_hashs() {
  hashs_.Clear();
}
const ::std::string& TxHashSet::hashs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TxHashSet.hashs)
  return hashs_.Get(index);
}
::std::string* TxHashSet::mutable_hashs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TxHashSet.hashs)
  return hashs_.Mutable(index);
}
void TxHashSet::set_hashs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TxHashSet.hashs)
  hashs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TxHashSet::set_hashs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TxHashSet.hashs)
  hashs_.Mutable(index)->assign(std::move(value));
}
#endif
void TxHashSet::set_hashs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TxHashSet.hashs)
}
void TxHashSet::set_hashs(int index, const void* value, size_t size) {
  hashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TxHashSet.hashs)
}
::std::string* TxHashSet::add_hashs() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TxHashSet.hashs)
  return hashs_.Add();
}
void TxHashSet::add_hashs(const ::std::string& value) {
  hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TxHashSet.hashs)
}
#if LANG_CXX11
void TxHashSet::add_hashs(::std::string&& value) {
  hashs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TxHashSet.hashs)
}
#endif
void TxHashSet::add_hashs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TxHashSet.hashs)
}
void TxHashSet::add_hashs(const void* value, size_t size) {
  hashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TxHashSet.hashs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxHashSet::hashs() const {
  // @@protoc_insertion_point(field_list:protocol.TxHashSet.hashs)
  return hashs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TxHashSet::mutable_hashs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TxHashSet.hashs)
  return &hashs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetQuorumset::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetQuorumset::GetQuorumset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.GetQuorumset)
}
GetQuorumset::GetQuorumset(const GetQuorumset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.GetQuorumset)
}

void GetQuorumset::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetQuorumset::~GetQuorumset() {
  // @@protoc_insertion_point(destructor:protocol.GetQuorumset)
  SharedDtor();
}

void GetQuorumset::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetQuorumset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuorumset::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetQuorumset& GetQuorumset::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetQuorumset* GetQuorumset::New(::google::protobuf::Arena* arena) const {
  GetQuorumset* n = new GetQuorumset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQuorumset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GetQuorumset)
  if (has_hash()) {
    GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hash_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetQuorumset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.GetQuorumset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.GetQuorumset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.GetQuorumset)
  return false;
#undef DO_
}

void GetQuorumset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.GetQuorumset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.GetQuorumset)
}

::google::protobuf::uint8* GetQuorumset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GetQuorumset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GetQuorumset)
  return target;
}

size_t GetQuorumset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GetQuorumset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes hash = 1;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuorumset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GetQuorumset)
  GOOGLE_DCHECK_NE(&from, this);
  const GetQuorumset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQuorumset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GetQuorumset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GetQuorumset)
    MergeFrom(*source);
  }
}

void GetQuorumset::MergeFrom(const GetQuorumset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GetQuorumset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hash()) {
    set_has_hash();
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void GetQuorumset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GetQuorumset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuorumset::CopyFrom(const GetQuorumset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GetQuorumset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuorumset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetQuorumset::Swap(GetQuorumset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQuorumset::InternalSwap(GetQuorumset* other) {
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQuorumset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQuorumset

// required bytes hash = 1;
bool GetQuorumset::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetQuorumset::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void GetQuorumset::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetQuorumset::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& GetQuorumset::hash() const {
  // @@protoc_insertion_point(field_get:protocol.GetQuorumset.hash)
  return hash_.GetNoArena();
}
void GetQuorumset::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.GetQuorumset.hash)
}
#if LANG_CXX11
void GetQuorumset::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.GetQuorumset.hash)
}
#endif
void GetQuorumset::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.GetQuorumset.hash)
}
void GetQuorumset::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.GetQuorumset.hash)
}
::std::string* GetQuorumset::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.GetQuorumset.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetQuorumset::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.GetQuorumset.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetQuorumset::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.GetQuorumset.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTxSet::kHashFieldNumber;
const int GetTxSet::kHashsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTxSet::GetTxSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.GetTxSet)
}
GetTxSet::GetTxSet(const GetTxSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hashs_(from.hashs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.GetTxSet)
}

void GetTxSet::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTxSet::~GetTxSet() {
  // @@protoc_insertion_point(destructor:protocol.GetTxSet)
  SharedDtor();
}

void GetTxSet::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTxSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTxSet::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTxSet& GetTxSet::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTxSet* GetTxSet::New(::google::protobuf::Arena* arena) const {
  GetTxSet* n = new GetTxSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTxSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GetTxSet)
  hashs_.Clear();
  if (has_hash()) {
    GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hash_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTxSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.GetTxSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes hashs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_hashs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.GetTxSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.GetTxSet)
  return false;
#undef DO_
}

void GetTxSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.GetTxSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // repeated bytes hashs = 2;
  for (int i = 0, n = this->hashs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hashs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.GetTxSet)
}

::google::protobuf::uint8* GetTxSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GetTxSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // repeated bytes hashs = 2;
  for (int i = 0, n = this->hashs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->hashs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GetTxSet)
  return target;
}

size_t GetTxSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GetTxSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes hash = 1;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }
  // repeated bytes hashs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hashs_size());
  for (int i = 0, n = this->hashs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->hashs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTxSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GetTxSet)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTxSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTxSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GetTxSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GetTxSet)
    MergeFrom(*source);
  }
}

void GetTxSet::MergeFrom(const GetTxSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GetTxSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashs_.MergeFrom(from.hashs_);
  if (from.has_hash()) {
    set_has_hash();
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void GetTxSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GetTxSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTxSet::CopyFrom(const GetTxSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GetTxSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetTxSet::Swap(GetTxSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTxSet::InternalSwap(GetTxSet* other) {
  hashs_.InternalSwap(&other->hashs_);
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTxSet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTxSet

// required bytes hash = 1;
bool GetTxSet::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetTxSet::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void GetTxSet::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetTxSet::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& GetTxSet::hash() const {
  // @@protoc_insertion_point(field_get:protocol.GetTxSet.hash)
  return hash_.GetNoArena();
}
void GetTxSet::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.GetTxSet.hash)
}
#if LANG_CXX11
void GetTxSet::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.GetTxSet.hash)
}
#endif
void GetTxSet::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.GetTxSet.hash)
}
void GetTxSet::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.GetTxSet.hash)
}
::std::string* GetTxSet::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.GetTxSet.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTxSet::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.GetTxSet.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTxSet::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.GetTxSet.hash)
}

// repeated bytes hashs = 2;
int GetTxSet::hashs_size() const {
  return hashs_.size();
}
void GetTxSet::clear_hashs() {
  hashs_.Clear();
}
const ::std::string& GetTxSet::hashs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.GetTxSet.hashs)
  return hashs_.Get(index);
}
::std::string* GetTxSet::mutable_hashs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.GetTxSet.hashs)
  return hashs_.Mutable(index);
}
void GetTxSet::set_hashs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.GetTxSet.hashs)
  hashs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GetTxSet::set_hashs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.GetTxSet.hashs)
  hashs_.Mutable(index)->assign(std::move(value));
}
#endif
void GetTxSet::set_hashs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.GetTxSet.hashs)
}
void GetTxSet::set_hashs(int index, const void* value, size_t size) {
  hashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.GetTxSet.hashs)
}
::std::string* GetTxSet::add_hashs() {
  // @@protoc_insertion_point(field_add_mutable:protocol.GetTxSet.hashs)
  return hashs_.Add();
}
void GetTxSet::add_hashs(const ::std::string& value) {
  hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.GetTxSet.hashs)
}
#if LANG_CXX11
void GetTxSet::add_hashs(::std::string&& value) {
  hashs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.GetTxSet.hashs)
}
#endif
void GetTxSet::add_hashs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.GetTxSet.hashs)
}
void GetTxSet::add_hashs(const void* value, size_t size) {
  hashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.GetTxSet.hashs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTxSet::hashs() const {
  // @@protoc_insertion_point(field_list:protocol.GetTxSet.hashs)
  return hashs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetTxSet::mutable_hashs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.GetTxSet.hashs)
  return &hashs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxSet::kHashFieldNumber;
const int TxSet::kPreviousLedgerHashFieldNumber;
const int TxSet::kTranEnvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxSet::TxSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TxSet)
}
TxSet::TxSet(const TxSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tran_envs_(from.tran_envs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  previous_ledger_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previous_ledger_hash()) {
    previous_ledger_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_ledger_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TxSet)
}

void TxSet::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_ledger_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxSet::~TxSet() {
  // @@protoc_insertion_point(destructor:protocol.TxSet)
  SharedDtor();
}

void TxSet::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_ledger_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxSet::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxSet& TxSet::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxSet* TxSet::New(::google::protobuf::Arena* arena) const {
  TxSet* n = new TxSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TxSet)
  tran_envs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hash()) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_previous_ledger_hash()) {
      GOOGLE_DCHECK(!previous_ledger_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*previous_ledger_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TxSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TxSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes previous_ledger_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_ledger_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.TransactionEnv tran_envs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tran_envs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TxSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TxSet)
  return false;
#undef DO_
}

void TxSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TxSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // required bytes previous_ledger_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previous_ledger_hash(), output);
  }

  // repeated .protocol.TransactionEnv tran_envs = 3;
  for (unsigned int i = 0, n = this->tran_envs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tran_envs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TxSet)
}

::google::protobuf::uint8* TxSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TxSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // required bytes previous_ledger_hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->previous_ledger_hash(), target);
  }

  // repeated .protocol.TransactionEnv tran_envs = 3;
  for (unsigned int i = 0, n = this->tran_envs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tran_envs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TxSet)
  return target;
}

size_t TxSet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.TxSet)
  size_t total_size = 0;

  if (has_hash()) {
    // required bytes hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  if (has_previous_ledger_hash()) {
    // required bytes previous_ledger_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_ledger_hash());
  }

  return total_size;
}
size_t TxSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TxSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

    // required bytes previous_ledger_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_ledger_hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.TransactionEnv tran_envs = 3;
  {
    unsigned int count = this->tran_envs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tran_envs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TxSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TxSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TxSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TxSet)
    MergeFrom(*source);
  }
}

void TxSet::MergeFrom(const TxSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TxSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tran_envs_.MergeFrom(from.tran_envs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_previous_ledger_hash();
      previous_ledger_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_ledger_hash_);
    }
  }
}

void TxSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TxSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxSet::CopyFrom(const TxSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TxSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tran_envs())) return false;
  return true;
}

void TxSet::Swap(TxSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxSet::InternalSwap(TxSet* other) {
  tran_envs_.InternalSwap(&other->tran_envs_);
  hash_.Swap(&other->hash_);
  previous_ledger_hash_.Swap(&other->previous_ledger_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxSet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxSet

// required bytes hash = 1;
bool TxSet::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TxSet::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void TxSet::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void TxSet::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& TxSet::hash() const {
  // @@protoc_insertion_point(field_get:protocol.TxSet.hash)
  return hash_.GetNoArena();
}
void TxSet::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TxSet.hash)
}
#if LANG_CXX11
void TxSet::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TxSet.hash)
}
#endif
void TxSet::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TxSet.hash)
}
void TxSet::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TxSet.hash)
}
::std::string* TxSet::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.TxSet.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxSet::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.TxSet.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxSet::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TxSet.hash)
}

// required bytes previous_ledger_hash = 2;
bool TxSet::has_previous_ledger_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TxSet::set_has_previous_ledger_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void TxSet::clear_has_previous_ledger_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void TxSet::clear_previous_ledger_hash() {
  previous_ledger_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previous_ledger_hash();
}
const ::std::string& TxSet::previous_ledger_hash() const {
  // @@protoc_insertion_point(field_get:protocol.TxSet.previous_ledger_hash)
  return previous_ledger_hash_.GetNoArena();
}
void TxSet::set_previous_ledger_hash(const ::std::string& value) {
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TxSet.previous_ledger_hash)
}
#if LANG_CXX11
void TxSet::set_previous_ledger_hash(::std::string&& value) {
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TxSet.previous_ledger_hash)
}
#endif
void TxSet::set_previous_ledger_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TxSet.previous_ledger_hash)
}
void TxSet::set_previous_ledger_hash(const void* value, size_t size) {
  set_has_previous_ledger_hash();
  previous_ledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TxSet.previous_ledger_hash)
}
::std::string* TxSet::mutable_previous_ledger_hash() {
  set_has_previous_ledger_hash();
  // @@protoc_insertion_point(field_mutable:protocol.TxSet.previous_ledger_hash)
  return previous_ledger_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxSet::release_previous_ledger_hash() {
  // @@protoc_insertion_point(field_release:protocol.TxSet.previous_ledger_hash)
  clear_has_previous_ledger_hash();
  return previous_ledger_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxSet::set_allocated_previous_ledger_hash(::std::string* previous_ledger_hash) {
  if (previous_ledger_hash != NULL) {
    set_has_previous_ledger_hash();
  } else {
    clear_has_previous_ledger_hash();
  }
  previous_ledger_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_ledger_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TxSet.previous_ledger_hash)
}

// repeated .protocol.TransactionEnv tran_envs = 3;
int TxSet::tran_envs_size() const {
  return tran_envs_.size();
}
void TxSet::clear_tran_envs() {
  tran_envs_.Clear();
}
const ::protocol::TransactionEnv& TxSet::tran_envs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TxSet.tran_envs)
  return tran_envs_.Get(index);
}
::protocol::TransactionEnv* TxSet::mutable_tran_envs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TxSet.tran_envs)
  return tran_envs_.Mutable(index);
}
::protocol::TransactionEnv* TxSet::add_tran_envs() {
  // @@protoc_insertion_point(field_add:protocol.TxSet.tran_envs)
  return tran_envs_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::TransactionEnv >*
TxSet::mutable_tran_envs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TxSet.tran_envs)
  return &tran_envs_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::TransactionEnv >&
TxSet::tran_envs() const {
  // @@protoc_insertion_point(field_list:protocol.TxSet.tran_envs)
  return tran_envs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DontHave::kTypeFieldNumber;
const int DontHave::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DontHave::DontHave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.DontHave)
}
DontHave::DontHave(const DontHave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.DontHave)
}

void DontHave::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DontHave::~DontHave() {
  // @@protoc_insertion_point(destructor:protocol.DontHave)
  SharedDtor();
}

void DontHave::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DontHave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DontHave::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DontHave& DontHave::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

DontHave* DontHave::New(::google::protobuf::Arena* arena) const {
  DontHave* n = new DontHave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DontHave::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DontHave)
  if (has_hash()) {
    GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hash_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DontHave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.DontHave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.DontHave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.DontHave)
  return false;
#undef DO_
}

void DontHave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.DontHave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.DontHave)
}

::google::protobuf::uint8* DontHave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DontHave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DontHave)
  return target;
}

size_t DontHave::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.DontHave)
  size_t total_size = 0;

  if (has_hash()) {
    // required bytes hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t DontHave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DontHave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DontHave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DontHave)
  GOOGLE_DCHECK_NE(&from, this);
  const DontHave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DontHave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DontHave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DontHave)
    MergeFrom(*source);
  }
}

void DontHave::MergeFrom(const DontHave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DontHave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DontHave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DontHave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DontHave::CopyFrom(const DontHave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DontHave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DontHave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DontHave::Swap(DontHave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DontHave::InternalSwap(DontHave* other) {
  hash_.Swap(&other->hash_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DontHave::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DontHave

// required int32 type = 1;
bool DontHave::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DontHave::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DontHave::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DontHave::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 DontHave::type() const {
  // @@protoc_insertion_point(field_get:protocol.DontHave.type)
  return type_;
}
void DontHave::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.DontHave.type)
}

// required bytes hash = 2;
bool DontHave::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DontHave::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void DontHave::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void DontHave::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& DontHave::hash() const {
  // @@protoc_insertion_point(field_get:protocol.DontHave.hash)
  return hash_.GetNoArena();
}
void DontHave::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DontHave.hash)
}
#if LANG_CXX11
void DontHave::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.DontHave.hash)
}
#endif
void DontHave::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DontHave.hash)
}
void DontHave::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DontHave.hash)
}
::std::string* DontHave::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.DontHave.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DontHave::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.DontHave.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DontHave::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.DontHave.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hash::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hash::Hash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Hash)
}
Hash::Hash(const Hash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Hash)
}

void Hash::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Hash::~Hash() {
  // @@protoc_insertion_point(destructor:protocol.Hash)
  SharedDtor();
}

void Hash::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Hash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hash::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hash& Hash::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Hash* Hash::New(::google::protobuf::Arena* arena) const {
  Hash* n = new Hash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hash::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Hash)
  if (has_hash()) {
    GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hash_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Hash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Hash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Hash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Hash)
  return false;
#undef DO_
}

void Hash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Hash)
}

::google::protobuf::uint8* Hash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Hash)
  return target;
}

size_t Hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Hash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes hash = 2;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  const Hash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Hash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Hash)
    MergeFrom(*source);
  }
}

void Hash::MergeFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hash()) {
    set_has_hash();
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void Hash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hash::CopyFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Hash::Swap(Hash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hash::InternalSwap(Hash* other) {
  hash_.Swap(&other->hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hash::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hash

// required bytes hash = 2;
bool Hash::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Hash::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Hash::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Hash::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& Hash::hash() const {
  // @@protoc_insertion_point(field_get:protocol.Hash.hash)
  return hash_.GetNoArena();
}
void Hash::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hash.hash)
}
#if LANG_CXX11
void Hash::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Hash.hash)
}
#endif
void Hash::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hash.hash)
}
void Hash::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hash.hash)
}
::std::string* Hash::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.Hash.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Hash::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.Hash.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Hash::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hash.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftPrePrepare::kViewNumberFieldNumber;
const int PbftPrePrepare::kSequenceFieldNumber;
const int PbftPrePrepare::kReplicaIdFieldNumber;
const int PbftPrePrepare::kValueFieldNumber;
const int PbftPrePrepare::kValueDigestFieldNumber;
const int PbftPrePrepare::kBlockSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftPrePrepare::PbftPrePrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftPrePrepare)
}
PbftPrePrepare::PbftPrePrepare(const PbftPrePrepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_digest()) {
    value_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_digest_);
  }
  if (from.has_value()) {
    value_ = new ::protocol::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  ::memcpy(&view_number_, &from.view_number_,
    reinterpret_cast<char*>(&block_seq_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(block_seq_));
  // @@protoc_insertion_point(copy_constructor:protocol.PbftPrePrepare)
}

void PbftPrePrepare::SharedCtor() {
  _cached_size_ = 0;
  value_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, reinterpret_cast<char*>(&block_seq_) -
    reinterpret_cast<char*>(&value_) + sizeof(block_seq_));
}

PbftPrePrepare::~PbftPrePrepare() {
  // @@protoc_insertion_point(destructor:protocol.PbftPrePrepare)
  SharedDtor();
}

void PbftPrePrepare::SharedDtor() {
  value_digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void PbftPrePrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftPrePrepare::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftPrePrepare& PbftPrePrepare::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftPrePrepare* PbftPrePrepare::New(::google::protobuf::Arena* arena) const {
  PbftPrePrepare* n = new PbftPrePrepare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftPrePrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftPrePrepare)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_value_digest()) {
      GOOGLE_DCHECK(!value_digest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_digest_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::protocol::Value::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&view_number_, 0, reinterpret_cast<char*>(&block_seq_) -
      reinterpret_cast<char*>(&view_number_) + sizeof(block_seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftPrePrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftPrePrepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 view_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_view_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 replica_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Value value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes value_digest = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 block_seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_block_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftPrePrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftPrePrepare)
  return false;
#undef DO_
}

void PbftPrePrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftPrePrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->view_number(), output);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->replica_id(), output);
  }

  // required .protocol.Value value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  // required bytes value_digest = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->value_digest(), output);
  }

  // required int64 block_seq = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->block_seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftPrePrepare)
}

::google::protobuf::uint8* PbftPrePrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftPrePrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->view_number(), target);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->replica_id(), target);
  }

  // required .protocol.Value value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->value_, deterministic, target);
  }

  // required bytes value_digest = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value_digest(), target);
  }

  // required int64 block_seq = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->block_seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftPrePrepare)
  return target;
}

size_t PbftPrePrepare::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftPrePrepare)
  size_t total_size = 0;

  if (has_value_digest()) {
    // required bytes value_digest = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value_digest());
  }

  if (has_value()) {
    // required .protocol.Value value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  if (has_view_number()) {
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());
  }

  if (has_sequence()) {
    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_replica_id()) {
    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  if (has_block_seq()) {
    // required int64 block_seq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->block_seq());
  }

  return total_size;
}
size_t PbftPrePrepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftPrePrepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes value_digest = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value_digest());

    // required .protocol.Value value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());

    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());

    // required int64 block_seq = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->block_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftPrePrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftPrePrepare)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftPrePrepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftPrePrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftPrePrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftPrePrepare)
    MergeFrom(*source);
  }
}

void PbftPrePrepare::MergeFrom(const PbftPrePrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftPrePrepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value_digest();
      value_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_digest_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::protocol::Value::MergeFrom(from.value());
    }
    if (cached_has_bits & 0x00000004u) {
      view_number_ = from.view_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      replica_id_ = from.replica_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      block_seq_ = from.block_seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbftPrePrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftPrePrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftPrePrepare::CopyFrom(const PbftPrePrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftPrePrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftPrePrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void PbftPrePrepare::Swap(PbftPrePrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftPrePrepare::InternalSwap(PbftPrePrepare* other) {
  value_digest_.Swap(&other->value_digest_);
  std::swap(value_, other->value_);
  std::swap(view_number_, other->view_number_);
  std::swap(sequence_, other->sequence_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(block_seq_, other->block_seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftPrePrepare::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftPrePrepare

// required int64 view_number = 1;
bool PbftPrePrepare::has_view_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbftPrePrepare::set_has_view_number() {
  _has_bits_[0] |= 0x00000004u;
}
void PbftPrePrepare::clear_has_view_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbftPrePrepare::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
  clear_has_view_number();
}
::google::protobuf::int64 PbftPrePrepare::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.view_number)
  return view_number_;
}
void PbftPrePrepare::set_view_number(::google::protobuf::int64 value) {
  set_has_view_number();
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.view_number)
}

// required int64 sequence = 2;
bool PbftPrePrepare::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PbftPrePrepare::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
void PbftPrePrepare::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
void PbftPrePrepare::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 PbftPrePrepare::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.sequence)
  return sequence_;
}
void PbftPrePrepare::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.sequence)
}

// required int64 replica_id = 3;
bool PbftPrePrepare::has_replica_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PbftPrePrepare::set_has_replica_id() {
  _has_bits_[0] |= 0x00000010u;
}
void PbftPrePrepare::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void PbftPrePrepare::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_id();
}
::google::protobuf::int64 PbftPrePrepare::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.replica_id)
  return replica_id_;
}
void PbftPrePrepare::set_replica_id(::google::protobuf::int64 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.replica_id)
}

// required .protocol.Value value = 4;
bool PbftPrePrepare::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftPrePrepare::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftPrePrepare::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftPrePrepare::clear_value() {
  if (value_ != NULL) value_->::protocol::Value::Clear();
  clear_has_value();
}
const ::protocol::Value& PbftPrePrepare::value() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.value)
  return value_ != NULL ? *value_
                         : *::protocol::Value::internal_default_instance();
}
::protocol::Value* PbftPrePrepare::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::protocol::Value;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftPrePrepare.value)
  return value_;
}
::protocol::Value* PbftPrePrepare::release_value() {
  // @@protoc_insertion_point(field_release:protocol.PbftPrePrepare.value)
  clear_has_value();
  ::protocol::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void PbftPrePrepare::set_allocated_value(::protocol::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPrePrepare.value)
}

// required bytes value_digest = 5;
bool PbftPrePrepare::has_value_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftPrePrepare::set_has_value_digest() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftPrePrepare::clear_has_value_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftPrePrepare::clear_value_digest() {
  value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_digest();
}
const ::std::string& PbftPrePrepare::value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.value_digest)
  return value_digest_.GetNoArena();
}
void PbftPrePrepare::set_value_digest(const ::std::string& value) {
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.value_digest)
}
#if LANG_CXX11
void PbftPrePrepare::set_value_digest(::std::string&& value) {
  set_has_value_digest();
  value_digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PbftPrePrepare.value_digest)
}
#endif
void PbftPrePrepare::set_value_digest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftPrePrepare.value_digest)
}
void PbftPrePrepare::set_value_digest(const void* value, size_t size) {
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftPrePrepare.value_digest)
}
::std::string* PbftPrePrepare::mutable_value_digest() {
  set_has_value_digest();
  // @@protoc_insertion_point(field_mutable:protocol.PbftPrePrepare.value_digest)
  return value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PbftPrePrepare::release_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftPrePrepare.value_digest)
  clear_has_value_digest();
  return value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PbftPrePrepare::set_allocated_value_digest(::std::string* value_digest) {
  if (value_digest != NULL) {
    set_has_value_digest();
  } else {
    clear_has_value_digest();
  }
  value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPrePrepare.value_digest)
}

// required int64 block_seq = 6;
bool PbftPrePrepare::has_block_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PbftPrePrepare::set_has_block_seq() {
  _has_bits_[0] |= 0x00000020u;
}
void PbftPrePrepare::clear_has_block_seq() {
  _has_bits_[0] &= ~0x00000020u;
}
void PbftPrePrepare::clear_block_seq() {
  block_seq_ = GOOGLE_LONGLONG(0);
  clear_has_block_seq();
}
::google::protobuf::int64 PbftPrePrepare::block_seq() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrePrepare.block_seq)
  return block_seq_;
}
void PbftPrePrepare::set_block_seq(::google::protobuf::int64 value) {
  set_has_block_seq();
  block_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrePrepare.block_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftPrepare::kViewNumberFieldNumber;
const int PbftPrepare::kSequenceFieldNumber;
const int PbftPrepare::kReplicaIdFieldNumber;
const int PbftPrepare::kValueDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftPrepare::PbftPrepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftPrepare)
}
PbftPrepare::PbftPrepare(const PbftPrepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_digest()) {
    value_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_digest_);
  }
  ::memcpy(&view_number_, &from.view_number_,
    reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.PbftPrepare)
}

void PbftPrepare::SharedCtor() {
  _cached_size_ = 0;
  value_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
}

PbftPrepare::~PbftPrepare() {
  // @@protoc_insertion_point(destructor:protocol.PbftPrepare)
  SharedDtor();
}

void PbftPrepare::SharedDtor() {
  value_digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PbftPrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftPrepare::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftPrepare& PbftPrepare::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftPrepare* PbftPrepare::New(::google::protobuf::Arena* arena) const {
  PbftPrepare* n = new PbftPrepare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftPrepare::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftPrepare)
  if (has_value_digest()) {
    GOOGLE_DCHECK(!value_digest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_digest_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftPrepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 view_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_view_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 replica_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes value_digest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftPrepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftPrepare)
  return false;
#undef DO_
}

void PbftPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->view_number(), output);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->replica_id(), output);
  }

  // required bytes value_digest = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value_digest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftPrepare)
}

::google::protobuf::uint8* PbftPrepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftPrepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->view_number(), target);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->replica_id(), target);
  }

  // required bytes value_digest = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value_digest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftPrepare)
  return target;
}

size_t PbftPrepare::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftPrepare)
  size_t total_size = 0;

  if (has_value_digest()) {
    // required bytes value_digest = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value_digest());
  }

  if (has_view_number()) {
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());
  }

  if (has_sequence()) {
    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_replica_id()) {
    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  return total_size;
}
size_t PbftPrepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftPrepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes value_digest = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value_digest());

    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());

    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftPrepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftPrepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftPrepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftPrepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftPrepare)
    MergeFrom(*source);
  }
}

void PbftPrepare::MergeFrom(const PbftPrepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftPrepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value_digest();
      value_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_digest_);
    }
    if (cached_has_bits & 0x00000002u) {
      view_number_ = from.view_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbftPrepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftPrepare::CopyFrom(const PbftPrepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftPrepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftPrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void PbftPrepare::Swap(PbftPrepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftPrepare::InternalSwap(PbftPrepare* other) {
  value_digest_.Swap(&other->value_digest_);
  std::swap(view_number_, other->view_number_);
  std::swap(sequence_, other->sequence_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftPrepare::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftPrepare

// required int64 view_number = 1;
bool PbftPrepare::has_view_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftPrepare::set_has_view_number() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftPrepare::clear_has_view_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftPrepare::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
  clear_has_view_number();
}
::google::protobuf::int64 PbftPrepare::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.view_number)
  return view_number_;
}
void PbftPrepare::set_view_number(::google::protobuf::int64 value) {
  set_has_view_number();
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.view_number)
}

// required int64 sequence = 2;
bool PbftPrepare::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbftPrepare::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
void PbftPrepare::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbftPrepare::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 PbftPrepare::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.sequence)
  return sequence_;
}
void PbftPrepare::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.sequence)
}

// required int64 replica_id = 3;
bool PbftPrepare::has_replica_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PbftPrepare::set_has_replica_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PbftPrepare::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PbftPrepare::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_id();
}
::google::protobuf::int64 PbftPrepare::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.replica_id)
  return replica_id_;
}
void PbftPrepare::set_replica_id(::google::protobuf::int64 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.replica_id)
}

// required bytes value_digest = 4;
bool PbftPrepare::has_value_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftPrepare::set_has_value_digest() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftPrepare::clear_has_value_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftPrepare::clear_value_digest() {
  value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_digest();
}
const ::std::string& PbftPrepare::value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPrepare.value_digest)
  return value_digest_.GetNoArena();
}
void PbftPrepare::set_value_digest(const ::std::string& value) {
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftPrepare.value_digest)
}
#if LANG_CXX11
void PbftPrepare::set_value_digest(::std::string&& value) {
  set_has_value_digest();
  value_digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PbftPrepare.value_digest)
}
#endif
void PbftPrepare::set_value_digest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftPrepare.value_digest)
}
void PbftPrepare::set_value_digest(const void* value, size_t size) {
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftPrepare.value_digest)
}
::std::string* PbftPrepare::mutable_value_digest() {
  set_has_value_digest();
  // @@protoc_insertion_point(field_mutable:protocol.PbftPrepare.value_digest)
  return value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PbftPrepare::release_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftPrepare.value_digest)
  clear_has_value_digest();
  return value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PbftPrepare::set_allocated_value_digest(::std::string* value_digest) {
  if (value_digest != NULL) {
    set_has_value_digest();
  } else {
    clear_has_value_digest();
  }
  value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPrepare.value_digest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftCommit::kViewNumberFieldNumber;
const int PbftCommit::kSequenceFieldNumber;
const int PbftCommit::kReplicaIdFieldNumber;
const int PbftCommit::kValueDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftCommit::PbftCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftCommit)
}
PbftCommit::PbftCommit(const PbftCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_digest()) {
    value_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_digest_);
  }
  ::memcpy(&view_number_, &from.view_number_,
    reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.PbftCommit)
}

void PbftCommit::SharedCtor() {
  _cached_size_ = 0;
  value_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
}

PbftCommit::~PbftCommit() {
  // @@protoc_insertion_point(destructor:protocol.PbftCommit)
  SharedDtor();
}

void PbftCommit::SharedDtor() {
  value_digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PbftCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftCommit::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftCommit& PbftCommit::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftCommit* PbftCommit::New(::google::protobuf::Arena* arena) const {
  PbftCommit* n = new PbftCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftCommit)
  if (has_value_digest()) {
    GOOGLE_DCHECK(!value_digest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_digest_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 view_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_view_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 replica_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes value_digest = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftCommit)
  return false;
#undef DO_
}

void PbftCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->view_number(), output);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->replica_id(), output);
  }

  // required bytes value_digest = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value_digest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftCommit)
}

::google::protobuf::uint8* PbftCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->view_number(), target);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->replica_id(), target);
  }

  // required bytes value_digest = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value_digest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftCommit)
  return target;
}

size_t PbftCommit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftCommit)
  size_t total_size = 0;

  if (has_value_digest()) {
    // required bytes value_digest = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value_digest());
  }

  if (has_view_number()) {
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());
  }

  if (has_sequence()) {
    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_replica_id()) {
    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  return total_size;
}
size_t PbftCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes value_digest = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value_digest());

    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());

    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftCommit)
    MergeFrom(*source);
  }
}

void PbftCommit::MergeFrom(const PbftCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value_digest();
      value_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_digest_);
    }
    if (cached_has_bits & 0x00000002u) {
      view_number_ = from.view_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbftCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftCommit::CopyFrom(const PbftCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftCommit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void PbftCommit::Swap(PbftCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftCommit::InternalSwap(PbftCommit* other) {
  value_digest_.Swap(&other->value_digest_);
  std::swap(view_number_, other->view_number_);
  std::swap(sequence_, other->sequence_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftCommit::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftCommit

// required int64 view_number = 1;
bool PbftCommit::has_view_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftCommit::set_has_view_number() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftCommit::clear_has_view_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftCommit::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
  clear_has_view_number();
}
::google::protobuf::int64 PbftCommit::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.view_number)
  return view_number_;
}
void PbftCommit::set_view_number(::google::protobuf::int64 value) {
  set_has_view_number();
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.view_number)
}

// required int64 sequence = 2;
bool PbftCommit::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbftCommit::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
void PbftCommit::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbftCommit::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 PbftCommit::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.sequence)
  return sequence_;
}
void PbftCommit::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.sequence)
}

// required int64 replica_id = 3;
bool PbftCommit::has_replica_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PbftCommit::set_has_replica_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PbftCommit::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PbftCommit::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_id();
}
::google::protobuf::int64 PbftCommit::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.replica_id)
  return replica_id_;
}
void PbftCommit::set_replica_id(::google::protobuf::int64 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.replica_id)
}

// required bytes value_digest = 4;
bool PbftCommit::has_value_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftCommit::set_has_value_digest() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftCommit::clear_has_value_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftCommit::clear_value_digest() {
  value_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_digest();
}
const ::std::string& PbftCommit::value_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCommit.value_digest)
  return value_digest_.GetNoArena();
}
void PbftCommit::set_value_digest(const ::std::string& value) {
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftCommit.value_digest)
}
#if LANG_CXX11
void PbftCommit::set_value_digest(::std::string&& value) {
  set_has_value_digest();
  value_digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PbftCommit.value_digest)
}
#endif
void PbftCommit::set_value_digest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftCommit.value_digest)
}
void PbftCommit::set_value_digest(const void* value, size_t size) {
  set_has_value_digest();
  value_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftCommit.value_digest)
}
::std::string* PbftCommit::mutable_value_digest() {
  set_has_value_digest();
  // @@protoc_insertion_point(field_mutable:protocol.PbftCommit.value_digest)
  return value_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PbftCommit::release_value_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftCommit.value_digest)
  clear_has_value_digest();
  return value_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PbftCommit::set_allocated_value_digest(::std::string* value_digest) {
  if (value_digest != NULL) {
    set_has_value_digest();
  } else {
    clear_has_value_digest();
  }
  value_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftCommit.value_digest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftCheckPoint::kSequenceFieldNumber;
const int PbftCheckPoint::kReplicaIdFieldNumber;
const int PbftCheckPoint::kStateDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftCheckPoint::PbftCheckPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftCheckPoint)
}
PbftCheckPoint::PbftCheckPoint(const PbftCheckPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state_digest()) {
    state_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_digest_);
  }
  ::memcpy(&sequence_, &from.sequence_,
    reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&sequence_) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.PbftCheckPoint)
}

void PbftCheckPoint::SharedCtor() {
  _cached_size_ = 0;
  state_digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&sequence_) + sizeof(replica_id_));
}

PbftCheckPoint::~PbftCheckPoint() {
  // @@protoc_insertion_point(destructor:protocol.PbftCheckPoint)
  SharedDtor();
}

void PbftCheckPoint::SharedDtor() {
  state_digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PbftCheckPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftCheckPoint::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftCheckPoint& PbftCheckPoint::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftCheckPoint* PbftCheckPoint::New(::google::protobuf::Arena* arena) const {
  PbftCheckPoint* n = new PbftCheckPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftCheckPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftCheckPoint)
  if (has_state_digest()) {
    GOOGLE_DCHECK(!state_digest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*state_digest_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&sequence_, 0, reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&sequence_) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftCheckPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftCheckPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 replica_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes state_digest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftCheckPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftCheckPoint)
  return false;
#undef DO_
}

void PbftCheckPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftCheckPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 sequence = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence(), output);
  }

  // required int64 replica_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->replica_id(), output);
  }

  // required bytes state_digest = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->state_digest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftCheckPoint)
}

::google::protobuf::uint8* PbftCheckPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftCheckPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 sequence = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence(), target);
  }

  // required int64 replica_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->replica_id(), target);
  }

  // required bytes state_digest = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->state_digest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftCheckPoint)
  return target;
}

size_t PbftCheckPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftCheckPoint)
  size_t total_size = 0;

  if (has_state_digest()) {
    // required bytes state_digest = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->state_digest());
  }

  if (has_sequence()) {
    // required int64 sequence = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_replica_id()) {
    // required int64 replica_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  return total_size;
}
size_t PbftCheckPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftCheckPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes state_digest = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->state_digest());

    // required int64 sequence = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required int64 replica_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftCheckPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftCheckPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftCheckPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftCheckPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftCheckPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftCheckPoint)
    MergeFrom(*source);
  }
}

void PbftCheckPoint::MergeFrom(const PbftCheckPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftCheckPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_state_digest();
      state_digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_digest_);
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbftCheckPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftCheckPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftCheckPoint::CopyFrom(const PbftCheckPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftCheckPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftCheckPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PbftCheckPoint::Swap(PbftCheckPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftCheckPoint::InternalSwap(PbftCheckPoint* other) {
  state_digest_.Swap(&other->state_digest_);
  std::swap(sequence_, other->sequence_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftCheckPoint::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftCheckPoint

// required int64 sequence = 1;
bool PbftCheckPoint::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftCheckPoint::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftCheckPoint::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftCheckPoint::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 PbftCheckPoint::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCheckPoint.sequence)
  return sequence_;
}
void PbftCheckPoint::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCheckPoint.sequence)
}

// required int64 replica_id = 2;
bool PbftCheckPoint::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbftCheckPoint::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PbftCheckPoint::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbftCheckPoint::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_id();
}
::google::protobuf::int64 PbftCheckPoint::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCheckPoint.replica_id)
  return replica_id_;
}
void PbftCheckPoint::set_replica_id(::google::protobuf::int64 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftCheckPoint.replica_id)
}

// required bytes state_digest = 3;
bool PbftCheckPoint::has_state_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftCheckPoint::set_has_state_digest() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftCheckPoint::clear_has_state_digest() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftCheckPoint::clear_state_digest() {
  state_digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state_digest();
}
const ::std::string& PbftCheckPoint::state_digest() const {
  // @@protoc_insertion_point(field_get:protocol.PbftCheckPoint.state_digest)
  return state_digest_.GetNoArena();
}
void PbftCheckPoint::set_state_digest(const ::std::string& value) {
  set_has_state_digest();
  state_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PbftCheckPoint.state_digest)
}
#if LANG_CXX11
void PbftCheckPoint::set_state_digest(::std::string&& value) {
  set_has_state_digest();
  state_digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PbftCheckPoint.state_digest)
}
#endif
void PbftCheckPoint::set_state_digest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state_digest();
  state_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PbftCheckPoint.state_digest)
}
void PbftCheckPoint::set_state_digest(const void* value, size_t size) {
  set_has_state_digest();
  state_digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PbftCheckPoint.state_digest)
}
::std::string* PbftCheckPoint::mutable_state_digest() {
  set_has_state_digest();
  // @@protoc_insertion_point(field_mutable:protocol.PbftCheckPoint.state_digest)
  return state_digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PbftCheckPoint::release_state_digest() {
  // @@protoc_insertion_point(field_release:protocol.PbftCheckPoint.state_digest)
  clear_has_state_digest();
  return state_digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PbftCheckPoint::set_allocated_state_digest(::std::string* state_digest) {
  if (state_digest != NULL) {
    set_has_state_digest();
  } else {
    clear_has_state_digest();
  }
  state_digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state_digest);
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftCheckPoint.state_digest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftPreparedSet::kPrePrepareFieldNumber;
const int PbftPreparedSet::kPrepareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftPreparedSet::PbftPreparedSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftPreparedSet)
}
PbftPreparedSet::PbftPreparedSet(const PbftPreparedSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      prepare_(from.prepare_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pre_prepare()) {
    pre_prepare_ = new ::protocol::PbftEnv(*from.pre_prepare_);
  } else {
    pre_prepare_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PbftPreparedSet)
}

void PbftPreparedSet::SharedCtor() {
  _cached_size_ = 0;
  pre_prepare_ = NULL;
}

PbftPreparedSet::~PbftPreparedSet() {
  // @@protoc_insertion_point(destructor:protocol.PbftPreparedSet)
  SharedDtor();
}

void PbftPreparedSet::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pre_prepare_;
  }
}

void PbftPreparedSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftPreparedSet::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftPreparedSet& PbftPreparedSet::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftPreparedSet* PbftPreparedSet::New(::google::protobuf::Arena* arena) const {
  PbftPreparedSet* n = new PbftPreparedSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftPreparedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftPreparedSet)
  prepare_.Clear();
  if (has_pre_prepare()) {
    GOOGLE_DCHECK(pre_prepare_ != NULL);
    pre_prepare_->::protocol::PbftEnv::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftPreparedSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftPreparedSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.PbftEnv pre_prepare = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PbftEnv prepare = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftPreparedSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftPreparedSet)
  return false;
#undef DO_
}

void PbftPreparedSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftPreparedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.PbftEnv pre_prepare = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pre_prepare_, output);
  }

  // repeated .protocol.PbftEnv prepare = 2;
  for (unsigned int i = 0, n = this->prepare_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prepare(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftPreparedSet)
}

::google::protobuf::uint8* PbftPreparedSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftPreparedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.PbftEnv pre_prepare = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pre_prepare_, deterministic, target);
  }

  // repeated .protocol.PbftEnv prepare = 2;
  for (unsigned int i = 0, n = this->prepare_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->prepare(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftPreparedSet)
  return target;
}

size_t PbftPreparedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftPreparedSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .protocol.PbftEnv pre_prepare = 1;
  if (has_pre_prepare()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pre_prepare_);
  }
  // repeated .protocol.PbftEnv prepare = 2;
  {
    unsigned int count = this->prepare_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prepare(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftPreparedSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftPreparedSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftPreparedSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftPreparedSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftPreparedSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftPreparedSet)
    MergeFrom(*source);
  }
}

void PbftPreparedSet::MergeFrom(const PbftPreparedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftPreparedSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prepare_.MergeFrom(from.prepare_);
  if (from.has_pre_prepare()) {
    mutable_pre_prepare()->::protocol::PbftEnv::MergeFrom(from.pre_prepare());
  }
}

void PbftPreparedSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftPreparedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftPreparedSet::CopyFrom(const PbftPreparedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftPreparedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftPreparedSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->prepare())) return false;
  if (has_pre_prepare()) {
    if (!this->pre_prepare_->IsInitialized()) return false;
  }
  return true;
}

void PbftPreparedSet::Swap(PbftPreparedSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftPreparedSet::InternalSwap(PbftPreparedSet* other) {
  prepare_.InternalSwap(&other->prepare_);
  std::swap(pre_prepare_, other->pre_prepare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftPreparedSet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftPreparedSet

// required .protocol.PbftEnv pre_prepare = 1;
bool PbftPreparedSet::has_pre_prepare() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftPreparedSet::set_has_pre_prepare() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftPreparedSet::clear_has_pre_prepare() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftPreparedSet::clear_pre_prepare() {
  if (pre_prepare_ != NULL) pre_prepare_->::protocol::PbftEnv::Clear();
  clear_has_pre_prepare();
}
const ::protocol::PbftEnv& PbftPreparedSet::pre_prepare() const {
  // @@protoc_insertion_point(field_get:protocol.PbftPreparedSet.pre_prepare)
  return pre_prepare_ != NULL ? *pre_prepare_
                         : *::protocol::PbftEnv::internal_default_instance();
}
::protocol::PbftEnv* PbftPreparedSet::mutable_pre_prepare() {
  set_has_pre_prepare();
  if (pre_prepare_ == NULL) {
    pre_prepare_ = new ::protocol::PbftEnv;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftPreparedSet.pre_prepare)
  return pre_prepare_;
}
::protocol::PbftEnv* PbftPreparedSet::release_pre_prepare() {
  // @@protoc_insertion_point(field_release:protocol.PbftPreparedSet.pre_prepare)
  clear_has_pre_prepare();
  ::protocol::PbftEnv* temp = pre_prepare_;
  pre_prepare_ = NULL;
  return temp;
}
void PbftPreparedSet::set_allocated_pre_prepare(::protocol::PbftEnv* pre_prepare) {
  delete pre_prepare_;
  pre_prepare_ = pre_prepare;
  if (pre_prepare) {
    set_has_pre_prepare();
  } else {
    clear_has_pre_prepare();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftPreparedSet.pre_prepare)
}

// repeated .protocol.PbftEnv prepare = 2;
int PbftPreparedSet::prepare_size() const {
  return prepare_.size();
}
void PbftPreparedSet::clear_prepare() {
  prepare_.Clear();
}
const ::protocol::PbftEnv& PbftPreparedSet::prepare(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftPreparedSet.prepare)
  return prepare_.Get(index);
}
::protocol::PbftEnv* PbftPreparedSet::mutable_prepare(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftPreparedSet.prepare)
  return prepare_.Mutable(index);
}
::protocol::PbftEnv* PbftPreparedSet::add_prepare() {
  // @@protoc_insertion_point(field_add:protocol.PbftPreparedSet.prepare)
  return prepare_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftPreparedSet::mutable_prepare() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftPreparedSet.prepare)
  return &prepare_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftPreparedSet::prepare() const {
  // @@protoc_insertion_point(field_list:protocol.PbftPreparedSet.prepare)
  return prepare_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftViewChange::kViewNumberFieldNumber;
const int PbftViewChange::kSequenceFieldNumber;
const int PbftViewChange::kCheckpointsFieldNumber;
const int PbftViewChange::kPreparedSetFieldNumber;
const int PbftViewChange::kReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftViewChange::PbftViewChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftViewChange)
}
PbftViewChange::PbftViewChange(const PbftViewChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      checkpoints_(from.checkpoints_),
      prepared_set_(from.prepared_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&view_number_, &from.view_number_,
    reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.PbftViewChange)
}

void PbftViewChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
}

PbftViewChange::~PbftViewChange() {
  // @@protoc_insertion_point(destructor:protocol.PbftViewChange)
  SharedDtor();
}

void PbftViewChange::SharedDtor() {
}

void PbftViewChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftViewChange::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftViewChange& PbftViewChange::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftViewChange* PbftViewChange::New(::google::protobuf::Arena* arena) const {
  PbftViewChange* n = new PbftViewChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftViewChange::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftViewChange)
  checkpoints_.Clear();
  prepared_set_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftViewChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftViewChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 view_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_view_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PbftEnv checkpoints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_checkpoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PbftPreparedSet prepared_set = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prepared_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 replica_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftViewChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftViewChange)
  return false;
#undef DO_
}

void PbftViewChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftViewChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->view_number(), output);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // repeated .protocol.PbftEnv checkpoints = 3;
  for (unsigned int i = 0, n = this->checkpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->checkpoints(i), output);
  }

  // repeated .protocol.PbftPreparedSet prepared_set = 4;
  for (unsigned int i = 0, n = this->prepared_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prepared_set(i), output);
  }

  // required int64 replica_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->replica_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftViewChange)
}

::google::protobuf::uint8* PbftViewChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftViewChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->view_number(), target);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // repeated .protocol.PbftEnv checkpoints = 3;
  for (unsigned int i = 0, n = this->checkpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->checkpoints(i), deterministic, target);
  }

  // repeated .protocol.PbftPreparedSet prepared_set = 4;
  for (unsigned int i = 0, n = this->prepared_set_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->prepared_set(i), deterministic, target);
  }

  // required int64 replica_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->replica_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftViewChange)
  return target;
}

size_t PbftViewChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftViewChange)
  size_t total_size = 0;

  if (has_view_number()) {
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());
  }

  if (has_sequence()) {
    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_replica_id()) {
    // required int64 replica_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  return total_size;
}
size_t PbftViewChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftViewChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());

    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required int64 replica_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.PbftEnv checkpoints = 3;
  {
    unsigned int count = this->checkpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkpoints(i));
    }
  }

  // repeated .protocol.PbftPreparedSet prepared_set = 4;
  {
    unsigned int count = this->prepared_set_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prepared_set(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftViewChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftViewChange)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftViewChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftViewChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftViewChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftViewChange)
    MergeFrom(*source);
  }
}

void PbftViewChange::MergeFrom(const PbftViewChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftViewChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkpoints_.MergeFrom(from.checkpoints_);
  prepared_set_.MergeFrom(from.prepared_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      view_number_ = from.view_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbftViewChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftViewChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftViewChange::CopyFrom(const PbftViewChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftViewChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftViewChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->checkpoints())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->prepared_set())) return false;
  return true;
}

void PbftViewChange::Swap(PbftViewChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftViewChange::InternalSwap(PbftViewChange* other) {
  checkpoints_.InternalSwap(&other->checkpoints_);
  prepared_set_.InternalSwap(&other->prepared_set_);
  std::swap(view_number_, other->view_number_);
  std::swap(sequence_, other->sequence_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftViewChange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftViewChange

// required int64 view_number = 1;
bool PbftViewChange::has_view_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftViewChange::set_has_view_number() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftViewChange::clear_has_view_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftViewChange::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
  clear_has_view_number();
}
::google::protobuf::int64 PbftViewChange::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.view_number)
  return view_number_;
}
void PbftViewChange::set_view_number(::google::protobuf::int64 value) {
  set_has_view_number();
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.view_number)
}

// required int64 sequence = 2;
bool PbftViewChange::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftViewChange::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftViewChange::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftViewChange::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 PbftViewChange::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.sequence)
  return sequence_;
}
void PbftViewChange::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.sequence)
}

// repeated .protocol.PbftEnv checkpoints = 3;
int PbftViewChange::checkpoints_size() const {
  return checkpoints_.size();
}
void PbftViewChange::clear_checkpoints() {
  checkpoints_.Clear();
}
const ::protocol::PbftEnv& PbftViewChange::checkpoints(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.checkpoints)
  return checkpoints_.Get(index);
}
::protocol::PbftEnv* PbftViewChange::mutable_checkpoints(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftViewChange.checkpoints)
  return checkpoints_.Mutable(index);
}
::protocol::PbftEnv* PbftViewChange::add_checkpoints() {
  // @@protoc_insertion_point(field_add:protocol.PbftViewChange.checkpoints)
  return checkpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftViewChange::mutable_checkpoints() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftViewChange.checkpoints)
  return &checkpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftViewChange::checkpoints() const {
  // @@protoc_insertion_point(field_list:protocol.PbftViewChange.checkpoints)
  return checkpoints_;
}

// repeated .protocol.PbftPreparedSet prepared_set = 4;
int PbftViewChange::prepared_set_size() const {
  return prepared_set_.size();
}
void PbftViewChange::clear_prepared_set() {
  prepared_set_.Clear();
}
const ::protocol::PbftPreparedSet& PbftViewChange::prepared_set(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.prepared_set)
  return prepared_set_.Get(index);
}
::protocol::PbftPreparedSet* PbftViewChange::mutable_prepared_set(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftViewChange.prepared_set)
  return prepared_set_.Mutable(index);
}
::protocol::PbftPreparedSet* PbftViewChange::add_prepared_set() {
  // @@protoc_insertion_point(field_add:protocol.PbftViewChange.prepared_set)
  return prepared_set_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::PbftPreparedSet >*
PbftViewChange::mutable_prepared_set() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftViewChange.prepared_set)
  return &prepared_set_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::PbftPreparedSet >&
PbftViewChange::prepared_set() const {
  // @@protoc_insertion_point(field_list:protocol.PbftViewChange.prepared_set)
  return prepared_set_;
}

// required int64 replica_id = 5;
bool PbftViewChange::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbftViewChange::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PbftViewChange::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbftViewChange::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_id();
}
::google::protobuf::int64 PbftViewChange::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftViewChange.replica_id)
  return replica_id_;
}
void PbftViewChange::set_replica_id(::google::protobuf::int64 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftViewChange.replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftNewView::kViewNumberFieldNumber;
const int PbftNewView::kSequenceFieldNumber;
const int PbftNewView::kReplicaIdFieldNumber;
const int PbftNewView::kViewChangesFieldNumber;
const int PbftNewView::kPrePreparesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftNewView::PbftNewView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftNewView)
}
PbftNewView::PbftNewView(const PbftNewView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      view_changes_(from.view_changes_),
      pre_prepares_(from.pre_prepares_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&view_number_, &from.view_number_,
    reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.PbftNewView)
}

void PbftNewView::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
}

PbftNewView::~PbftNewView() {
  // @@protoc_insertion_point(destructor:protocol.PbftNewView)
  SharedDtor();
}

void PbftNewView::SharedDtor() {
}

void PbftNewView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftNewView::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftNewView& PbftNewView::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftNewView* PbftNewView::New(::google::protobuf::Arena* arena) const {
  PbftNewView* n = new PbftNewView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftNewView::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftNewView)
  view_changes_.Clear();
  pre_prepares_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&view_number_, 0, reinterpret_cast<char*>(&replica_id_) -
      reinterpret_cast<char*>(&view_number_) + sizeof(replica_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftNewView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftNewView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 view_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_view_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 replica_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PbftEnv view_changes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_view_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PbftEnv pre_prepares = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pre_prepares()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftNewView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftNewView)
  return false;
#undef DO_
}

void PbftNewView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftNewView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->view_number(), output);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->replica_id(), output);
  }

  // repeated .protocol.PbftEnv view_changes = 4;
  for (unsigned int i = 0, n = this->view_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->view_changes(i), output);
  }

  // repeated .protocol.PbftEnv pre_prepares = 5;
  for (unsigned int i = 0, n = this->pre_prepares_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pre_prepares(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftNewView)
}

::google::protobuf::uint8* PbftNewView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftNewView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 view_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->view_number(), target);
  }

  // required int64 sequence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // required int64 replica_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->replica_id(), target);
  }

  // repeated .protocol.PbftEnv view_changes = 4;
  for (unsigned int i = 0, n = this->view_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->view_changes(i), deterministic, target);
  }

  // repeated .protocol.PbftEnv pre_prepares = 5;
  for (unsigned int i = 0, n = this->pre_prepares_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->pre_prepares(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftNewView)
  return target;
}

size_t PbftNewView::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftNewView)
  size_t total_size = 0;

  if (has_view_number()) {
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());
  }

  if (has_sequence()) {
    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_replica_id()) {
    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());
  }

  return total_size;
}
size_t PbftNewView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftNewView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 view_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_number());

    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required int64 replica_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->replica_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.PbftEnv view_changes = 4;
  {
    unsigned int count = this->view_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view_changes(i));
    }
  }

  // repeated .protocol.PbftEnv pre_prepares = 5;
  {
    unsigned int count = this->pre_prepares_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_prepares(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftNewView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftNewView)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftNewView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftNewView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftNewView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftNewView)
    MergeFrom(*source);
  }
}

void PbftNewView::MergeFrom(const PbftNewView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftNewView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  view_changes_.MergeFrom(from.view_changes_);
  pre_prepares_.MergeFrom(from.pre_prepares_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      view_number_ = from.view_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      replica_id_ = from.replica_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbftNewView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftNewView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftNewView::CopyFrom(const PbftNewView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftNewView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftNewView::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->view_changes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pre_prepares())) return false;
  return true;
}

void PbftNewView::Swap(PbftNewView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftNewView::InternalSwap(PbftNewView* other) {
  view_changes_.InternalSwap(&other->view_changes_);
  pre_prepares_.InternalSwap(&other->pre_prepares_);
  std::swap(view_number_, other->view_number_);
  std::swap(sequence_, other->sequence_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftNewView::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftNewView

// required int64 view_number = 1;
bool PbftNewView::has_view_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftNewView::set_has_view_number() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftNewView::clear_has_view_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftNewView::clear_view_number() {
  view_number_ = GOOGLE_LONGLONG(0);
  clear_has_view_number();
}
::google::protobuf::int64 PbftNewView::view_number() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.view_number)
  return view_number_;
}
void PbftNewView::set_view_number(::google::protobuf::int64 value) {
  set_has_view_number();
  view_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftNewView.view_number)
}

// required int64 sequence = 2;
bool PbftNewView::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftNewView::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftNewView::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftNewView::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 PbftNewView::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.sequence)
  return sequence_;
}
void PbftNewView::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftNewView.sequence)
}

// required int64 replica_id = 3;
bool PbftNewView::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbftNewView::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PbftNewView::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbftNewView::clear_replica_id() {
  replica_id_ = GOOGLE_LONGLONG(0);
  clear_has_replica_id();
}
::google::protobuf::int64 PbftNewView::replica_id() const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.replica_id)
  return replica_id_;
}
void PbftNewView::set_replica_id(::google::protobuf::int64 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.PbftNewView.replica_id)
}

// repeated .protocol.PbftEnv view_changes = 4;
int PbftNewView::view_changes_size() const {
  return view_changes_.size();
}
void PbftNewView::clear_view_changes() {
  view_changes_.Clear();
}
const ::protocol::PbftEnv& PbftNewView::view_changes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.view_changes)
  return view_changes_.Get(index);
}
::protocol::PbftEnv* PbftNewView::mutable_view_changes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftNewView.view_changes)
  return view_changes_.Mutable(index);
}
::protocol::PbftEnv* PbftNewView::add_view_changes() {
  // @@protoc_insertion_point(field_add:protocol.PbftNewView.view_changes)
  return view_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftNewView::mutable_view_changes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftNewView.view_changes)
  return &view_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftNewView::view_changes() const {
  // @@protoc_insertion_point(field_list:protocol.PbftNewView.view_changes)
  return view_changes_;
}

// repeated .protocol.PbftEnv pre_prepares = 5;
int PbftNewView::pre_prepares_size() const {
  return pre_prepares_.size();
}
void PbftNewView::clear_pre_prepares() {
  pre_prepares_.Clear();
}
const ::protocol::PbftEnv& PbftNewView::pre_prepares(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PbftNewView.pre_prepares)
  return pre_prepares_.Get(index);
}
::protocol::PbftEnv* PbftNewView::mutable_pre_prepares(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PbftNewView.pre_prepares)
  return pre_prepares_.Mutable(index);
}
::protocol::PbftEnv* PbftNewView::add_pre_prepares() {
  // @@protoc_insertion_point(field_add:protocol.PbftNewView.pre_prepares)
  return pre_prepares_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >*
PbftNewView::mutable_pre_prepares() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PbftNewView.pre_prepares)
  return &pre_prepares_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::PbftEnv >&
PbftNewView::pre_prepares() const {
  // @@protoc_insertion_point(field_list:protocol.PbftNewView.pre_prepares)
  return pre_prepares_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pbft::kRoundNumberFieldNumber;
const int Pbft::kValidatorHashFieldNumber;
const int Pbft::kTypeFieldNumber;
const int Pbft::kPrePrepareFieldNumber;
const int Pbft::kPrepareFieldNumber;
const int Pbft::kCommitFieldNumber;
const int Pbft::kCheckpointFieldNumber;
const int Pbft::kViewChangeFieldNumber;
const int Pbft::kNewViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pbft::Pbft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Pbft)
}
Pbft::Pbft(const Pbft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  validator_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_validator_hash()) {
    validator_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validator_hash_);
  }
  if (from.has_pre_prepare()) {
    pre_prepare_ = new ::protocol::PbftPrePrepare(*from.pre_prepare_);
  } else {
    pre_prepare_ = NULL;
  }
  if (from.has_prepare()) {
    prepare_ = new ::protocol::PbftPrepare(*from.prepare_);
  } else {
    prepare_ = NULL;
  }
  if (from.has_commit()) {
    commit_ = new ::protocol::PbftCommit(*from.commit_);
  } else {
    commit_ = NULL;
  }
  if (from.has_checkpoint()) {
    checkpoint_ = new ::protocol::PbftCheckPoint(*from.checkpoint_);
  } else {
    checkpoint_ = NULL;
  }
  if (from.has_view_change()) {
    view_change_ = new ::protocol::PbftViewChange(*from.view_change_);
  } else {
    view_change_ = NULL;
  }
  if (from.has_new_view()) {
    new_view_ = new ::protocol::PbftNewView(*from.new_view_);
  } else {
    new_view_ = NULL;
  }
  ::memcpy(&round_number_, &from.round_number_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&round_number_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protocol.Pbft)
}

void Pbft::SharedCtor() {
  _cached_size_ = 0;
  validator_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pre_prepare_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&pre_prepare_) + sizeof(type_));
}

Pbft::~Pbft() {
  // @@protoc_insertion_point(destructor:protocol.Pbft)
  SharedDtor();
}

void Pbft::SharedDtor() {
  validator_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pre_prepare_;
  }
  if (this != internal_default_instance()) {
    delete prepare_;
  }
  if (this != internal_default_instance()) {
    delete commit_;
  }
  if (this != internal_default_instance()) {
    delete checkpoint_;
  }
  if (this != internal_default_instance()) {
    delete view_change_;
  }
  if (this != internal_default_instance()) {
    delete new_view_;
  }
}

void Pbft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pbft::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pbft& Pbft::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pbft* Pbft::New(::google::protobuf::Arena* arena) const {
  Pbft* n = new Pbft;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pbft::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Pbft)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_validator_hash()) {
      GOOGLE_DCHECK(!validator_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*validator_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_pre_prepare()) {
      GOOGLE_DCHECK(pre_prepare_ != NULL);
      pre_prepare_->::protocol::PbftPrePrepare::Clear();
    }
    if (has_prepare()) {
      GOOGLE_DCHECK(prepare_ != NULL);
      prepare_->::protocol::PbftPrepare::Clear();
    }
    if (has_commit()) {
      GOOGLE_DCHECK(commit_ != NULL);
      commit_->::protocol::PbftCommit::Clear();
    }
    if (has_checkpoint()) {
      GOOGLE_DCHECK(checkpoint_ != NULL);
      checkpoint_->::protocol::PbftCheckPoint::Clear();
    }
    if (has_view_change()) {
      GOOGLE_DCHECK(view_change_ != NULL);
      view_change_->::protocol::PbftViewChange::Clear();
    }
    if (has_new_view()) {
      GOOGLE_DCHECK(new_view_ != NULL);
      new_view_->::protocol::PbftNewView::Clear();
    }
  }
  round_number_ = 0u;
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pbft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Pbft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 round_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_round_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes validator_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_validator_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.PbftMessageType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::PbftMessageType_IsValid(value)) {
            set_type(static_cast< ::protocol::PbftMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.PbftPrePrepare pre_prepare = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.PbftPrepare prepare = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.PbftCommit commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.PbftCheckPoint checkpoint = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.PbftViewChange view_change = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.PbftNewView new_view = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Pbft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Pbft)
  return false;
#undef DO_
}

void Pbft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Pbft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 round_number = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->round_number(), output);
  }

  // required bytes validator_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->validator_hash(), output);
  }

  // required .protocol.PbftMessageType type = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .protocol.PbftPrePrepare pre_prepare = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pre_prepare_, output);
  }

  // optional .protocol.PbftPrepare prepare = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->prepare_, output);
  }

  // optional .protocol.PbftCommit commit = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->commit_, output);
  }

  // optional .protocol.PbftCheckPoint checkpoint = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->checkpoint_, output);
  }

  // optional .protocol.PbftViewChange view_change = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->view_change_, output);
  }

  // optional .protocol.PbftNewView new_view = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->new_view_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Pbft)
}

::google::protobuf::uint8* Pbft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Pbft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 round_number = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->round_number(), target);
  }

  // required bytes validator_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->validator_hash(), target);
  }

  // required .protocol.PbftMessageType type = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .protocol.PbftPrePrepare pre_prepare = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pre_prepare_, deterministic, target);
  }

  // optional .protocol.PbftPrepare prepare = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->prepare_, deterministic, target);
  }

  // optional .protocol.PbftCommit commit = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->commit_, deterministic, target);
  }

  // optional .protocol.PbftCheckPoint checkpoint = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->checkpoint_, deterministic, target);
  }

  // optional .protocol.PbftViewChange view_change = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->view_change_, deterministic, target);
  }

  // optional .protocol.PbftNewView new_view = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->new_view_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Pbft)
  return target;
}

size_t Pbft::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Pbft)
  size_t total_size = 0;

  if (has_validator_hash()) {
    // required bytes validator_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->validator_hash());
  }

  if (has_round_number()) {
    // required uint32 round_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round_number());
  }

  if (has_type()) {
    // required .protocol.PbftMessageType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Pbft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Pbft)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000181) ^ 0x00000181) == 0) {  // All required fields are present.
    // required bytes validator_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->validator_hash());

    // required uint32 round_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round_number());

    // required .protocol.PbftMessageType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional .protocol.PbftPrePrepare pre_prepare = 4;
    if (has_pre_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pre_prepare_);
    }

    // optional .protocol.PbftPrepare prepare = 5;
    if (has_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prepare_);
    }

    // optional .protocol.PbftCommit commit = 6;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->commit_);
    }

    // optional .protocol.PbftCheckPoint checkpoint = 7;
    if (has_checkpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->checkpoint_);
    }

    // optional .protocol.PbftViewChange view_change = 8;
    if (has_view_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->view_change_);
    }

    // optional .protocol.PbftNewView new_view = 9;
    if (has_new_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_view_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pbft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Pbft)
  GOOGLE_DCHECK_NE(&from, this);
  const Pbft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pbft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Pbft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Pbft)
    MergeFrom(*source);
  }
}

void Pbft::MergeFrom(const Pbft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Pbft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_validator_hash();
      validator_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validator_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pre_prepare()->::protocol::PbftPrePrepare::MergeFrom(from.pre_prepare());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_prepare()->::protocol::PbftPrepare::MergeFrom(from.prepare());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_commit()->::protocol::PbftCommit::MergeFrom(from.commit());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_checkpoint()->::protocol::PbftCheckPoint::MergeFrom(from.checkpoint());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_view_change()->::protocol::PbftViewChange::MergeFrom(from.view_change());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_new_view()->::protocol::PbftNewView::MergeFrom(from.new_view());
    }
    if (cached_has_bits & 0x00000080u) {
      round_number_ = from.round_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_type(from.type());
  }
}

void Pbft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Pbft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pbft::CopyFrom(const Pbft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Pbft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pbft::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000181) != 0x00000181) return false;
  if (has_pre_prepare()) {
    if (!this->pre_prepare_->IsInitialized()) return false;
  }
  if (has_prepare()) {
    if (!this->prepare_->IsInitialized()) return false;
  }
  if (has_commit()) {
    if (!this->commit_->IsInitialized()) return false;
  }
  if (has_checkpoint()) {
    if (!this->checkpoint_->IsInitialized()) return false;
  }
  if (has_view_change()) {
    if (!this->view_change_->IsInitialized()) return false;
  }
  if (has_new_view()) {
    if (!this->new_view_->IsInitialized()) return false;
  }
  return true;
}

void Pbft::Swap(Pbft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pbft::InternalSwap(Pbft* other) {
  validator_hash_.Swap(&other->validator_hash_);
  std::swap(pre_prepare_, other->pre_prepare_);
  std::swap(prepare_, other->prepare_);
  std::swap(commit_, other->commit_);
  std::swap(checkpoint_, other->checkpoint_);
  std::swap(view_change_, other->view_change_);
  std::swap(new_view_, other->new_view_);
  std::swap(round_number_, other->round_number_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pbft::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pbft

// required uint32 round_number = 1;
bool Pbft::has_round_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Pbft::set_has_round_number() {
  _has_bits_[0] |= 0x00000080u;
}
void Pbft::clear_has_round_number() {
  _has_bits_[0] &= ~0x00000080u;
}
void Pbft::clear_round_number() {
  round_number_ = 0u;
  clear_has_round_number();
}
::google::protobuf::uint32 Pbft::round_number() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.round_number)
  return round_number_;
}
void Pbft::set_round_number(::google::protobuf::uint32 value) {
  set_has_round_number();
  round_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.Pbft.round_number)
}

// required bytes validator_hash = 2;
bool Pbft::has_validator_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pbft::set_has_validator_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void Pbft::clear_has_validator_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pbft::clear_validator_hash() {
  validator_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_validator_hash();
}
const ::std::string& Pbft::validator_hash() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.validator_hash)
  return validator_hash_.GetNoArena();
}
void Pbft::set_validator_hash(const ::std::string& value) {
  set_has_validator_hash();
  validator_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Pbft.validator_hash)
}
#if LANG_CXX11
void Pbft::set_validator_hash(::std::string&& value) {
  set_has_validator_hash();
  validator_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Pbft.validator_hash)
}
#endif
void Pbft::set_validator_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_validator_hash();
  validator_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Pbft.validator_hash)
}
void Pbft::set_validator_hash(const void* value, size_t size) {
  set_has_validator_hash();
  validator_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Pbft.validator_hash)
}
::std::string* Pbft::mutable_validator_hash() {
  set_has_validator_hash();
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.validator_hash)
  return validator_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pbft::release_validator_hash() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.validator_hash)
  clear_has_validator_hash();
  return validator_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pbft::set_allocated_validator_hash(::std::string* validator_hash) {
  if (validator_hash != NULL) {
    set_has_validator_hash();
  } else {
    clear_has_validator_hash();
  }
  validator_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validator_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.validator_hash)
}

// required .protocol.PbftMessageType type = 3;
bool Pbft::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Pbft::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Pbft::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Pbft::clear_type() {
  type_ = 0;
  clear_has_type();
}
::protocol::PbftMessageType Pbft::type() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.type)
  return static_cast< ::protocol::PbftMessageType >(type_);
}
void Pbft::set_type(::protocol::PbftMessageType value) {
  assert(::protocol::PbftMessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Pbft.type)
}

// optional .protocol.PbftPrePrepare pre_prepare = 4;
bool Pbft::has_pre_prepare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pbft::set_has_pre_prepare() {
  _has_bits_[0] |= 0x00000002u;
}
void Pbft::clear_has_pre_prepare() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pbft::clear_pre_prepare() {
  if (pre_prepare_ != NULL) pre_prepare_->::protocol::PbftPrePrepare::Clear();
  clear_has_pre_prepare();
}
const ::protocol::PbftPrePrepare& Pbft::pre_prepare() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.pre_prepare)
  return pre_prepare_ != NULL ? *pre_prepare_
                         : *::protocol::PbftPrePrepare::internal_default_instance();
}
::protocol::PbftPrePrepare* Pbft::mutable_pre_prepare() {
  set_has_pre_prepare();
  if (pre_prepare_ == NULL) {
    pre_prepare_ = new ::protocol::PbftPrePrepare;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.pre_prepare)
  return pre_prepare_;
}
::protocol::PbftPrePrepare* Pbft::release_pre_prepare() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.pre_prepare)
  clear_has_pre_prepare();
  ::protocol::PbftPrePrepare* temp = pre_prepare_;
  pre_prepare_ = NULL;
  return temp;
}
void Pbft::set_allocated_pre_prepare(::protocol::PbftPrePrepare* pre_prepare) {
  delete pre_prepare_;
  pre_prepare_ = pre_prepare;
  if (pre_prepare) {
    set_has_pre_prepare();
  } else {
    clear_has_pre_prepare();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.pre_prepare)
}

// optional .protocol.PbftPrepare prepare = 5;
bool Pbft::has_prepare() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pbft::set_has_prepare() {
  _has_bits_[0] |= 0x00000004u;
}
void Pbft::clear_has_prepare() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pbft::clear_prepare() {
  if (prepare_ != NULL) prepare_->::protocol::PbftPrepare::Clear();
  clear_has_prepare();
}
const ::protocol::PbftPrepare& Pbft::prepare() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.prepare)
  return prepare_ != NULL ? *prepare_
                         : *::protocol::PbftPrepare::internal_default_instance();
}
::protocol::PbftPrepare* Pbft::mutable_prepare() {
  set_has_prepare();
  if (prepare_ == NULL) {
    prepare_ = new ::protocol::PbftPrepare;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.prepare)
  return prepare_;
}
::protocol::PbftPrepare* Pbft::release_prepare() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.prepare)
  clear_has_prepare();
  ::protocol::PbftPrepare* temp = prepare_;
  prepare_ = NULL;
  return temp;
}
void Pbft::set_allocated_prepare(::protocol::PbftPrepare* prepare) {
  delete prepare_;
  prepare_ = prepare;
  if (prepare) {
    set_has_prepare();
  } else {
    clear_has_prepare();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.prepare)
}

// optional .protocol.PbftCommit commit = 6;
bool Pbft::has_commit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pbft::set_has_commit() {
  _has_bits_[0] |= 0x00000008u;
}
void Pbft::clear_has_commit() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pbft::clear_commit() {
  if (commit_ != NULL) commit_->::protocol::PbftCommit::Clear();
  clear_has_commit();
}
const ::protocol::PbftCommit& Pbft::commit() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.commit)
  return commit_ != NULL ? *commit_
                         : *::protocol::PbftCommit::internal_default_instance();
}
::protocol::PbftCommit* Pbft::mutable_commit() {
  set_has_commit();
  if (commit_ == NULL) {
    commit_ = new ::protocol::PbftCommit;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.commit)
  return commit_;
}
::protocol::PbftCommit* Pbft::release_commit() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.commit)
  clear_has_commit();
  ::protocol::PbftCommit* temp = commit_;
  commit_ = NULL;
  return temp;
}
void Pbft::set_allocated_commit(::protocol::PbftCommit* commit) {
  delete commit_;
  commit_ = commit;
  if (commit) {
    set_has_commit();
  } else {
    clear_has_commit();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.commit)
}

// optional .protocol.PbftCheckPoint checkpoint = 7;
bool Pbft::has_checkpoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Pbft::set_has_checkpoint() {
  _has_bits_[0] |= 0x00000010u;
}
void Pbft::clear_has_checkpoint() {
  _has_bits_[0] &= ~0x00000010u;
}
void Pbft::clear_checkpoint() {
  if (checkpoint_ != NULL) checkpoint_->::protocol::PbftCheckPoint::Clear();
  clear_has_checkpoint();
}
const ::protocol::PbftCheckPoint& Pbft::checkpoint() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.checkpoint)
  return checkpoint_ != NULL ? *checkpoint_
                         : *::protocol::PbftCheckPoint::internal_default_instance();
}
::protocol::PbftCheckPoint* Pbft::mutable_checkpoint() {
  set_has_checkpoint();
  if (checkpoint_ == NULL) {
    checkpoint_ = new ::protocol::PbftCheckPoint;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.checkpoint)
  return checkpoint_;
}
::protocol::PbftCheckPoint* Pbft::release_checkpoint() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.checkpoint)
  clear_has_checkpoint();
  ::protocol::PbftCheckPoint* temp = checkpoint_;
  checkpoint_ = NULL;
  return temp;
}
void Pbft::set_allocated_checkpoint(::protocol::PbftCheckPoint* checkpoint) {
  delete checkpoint_;
  checkpoint_ = checkpoint;
  if (checkpoint) {
    set_has_checkpoint();
  } else {
    clear_has_checkpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.checkpoint)
}

// optional .protocol.PbftViewChange view_change = 8;
bool Pbft::has_view_change() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Pbft::set_has_view_change() {
  _has_bits_[0] |= 0x00000020u;
}
void Pbft::clear_has_view_change() {
  _has_bits_[0] &= ~0x00000020u;
}
void Pbft::clear_view_change() {
  if (view_change_ != NULL) view_change_->::protocol::PbftViewChange::Clear();
  clear_has_view_change();
}
const ::protocol::PbftViewChange& Pbft::view_change() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.view_change)
  return view_change_ != NULL ? *view_change_
                         : *::protocol::PbftViewChange::internal_default_instance();
}
::protocol::PbftViewChange* Pbft::mutable_view_change() {
  set_has_view_change();
  if (view_change_ == NULL) {
    view_change_ = new ::protocol::PbftViewChange;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.view_change)
  return view_change_;
}
::protocol::PbftViewChange* Pbft::release_view_change() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.view_change)
  clear_has_view_change();
  ::protocol::PbftViewChange* temp = view_change_;
  view_change_ = NULL;
  return temp;
}
void Pbft::set_allocated_view_change(::protocol::PbftViewChange* view_change) {
  delete view_change_;
  view_change_ = view_change;
  if (view_change) {
    set_has_view_change();
  } else {
    clear_has_view_change();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.view_change)
}

// optional .protocol.PbftNewView new_view = 9;
bool Pbft::has_new_view() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Pbft::set_has_new_view() {
  _has_bits_[0] |= 0x00000040u;
}
void Pbft::clear_has_new_view() {
  _has_bits_[0] &= ~0x00000040u;
}
void Pbft::clear_new_view() {
  if (new_view_ != NULL) new_view_->::protocol::PbftNewView::Clear();
  clear_has_new_view();
}
const ::protocol::PbftNewView& Pbft::new_view() const {
  // @@protoc_insertion_point(field_get:protocol.Pbft.new_view)
  return new_view_ != NULL ? *new_view_
                         : *::protocol::PbftNewView::internal_default_instance();
}
::protocol::PbftNewView* Pbft::mutable_new_view() {
  set_has_new_view();
  if (new_view_ == NULL) {
    new_view_ = new ::protocol::PbftNewView;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Pbft.new_view)
  return new_view_;
}
::protocol::PbftNewView* Pbft::release_new_view() {
  // @@protoc_insertion_point(field_release:protocol.Pbft.new_view)
  clear_has_new_view();
  ::protocol::PbftNewView* temp = new_view_;
  new_view_ = NULL;
  return temp;
}
void Pbft::set_allocated_new_view(::protocol::PbftNewView* new_view) {
  delete new_view_;
  new_view_ = new_view;
  if (new_view) {
    set_has_new_view();
  } else {
    clear_has_new_view();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Pbft.new_view)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbftEnv::kPbftFieldNumber;
const int PbftEnv::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbftEnv::PbftEnv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PbftEnv)
}
PbftEnv::PbftEnv(const PbftEnv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pbft()) {
    pbft_ = new ::protocol::Pbft(*from.pbft_);
  } else {
    pbft_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::protocol::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PbftEnv)
}

void PbftEnv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pbft_, 0, reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&pbft_) + sizeof(signature_));
}

PbftEnv::~PbftEnv() {
  // @@protoc_insertion_point(destructor:protocol.PbftEnv)
  SharedDtor();
}

void PbftEnv::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pbft_;
  }
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void PbftEnv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbftEnv::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbftEnv& PbftEnv::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbftEnv* PbftEnv::New(::google::protobuf::Arena* arena) const {
  PbftEnv* n = new PbftEnv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbftEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PbftEnv)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pbft()) {
      GOOGLE_DCHECK(pbft_ != NULL);
      pbft_->::protocol::Pbft::Clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->::protocol::Signature::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbftEnv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PbftEnv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.Pbft pbft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PbftEnv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PbftEnv)
  return false;
#undef DO_
}

void PbftEnv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PbftEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Pbft pbft = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pbft_, output);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PbftEnv)
}

::google::protobuf::uint8* PbftEnv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PbftEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.Pbft pbft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pbft_, deterministic, target);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->signature_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PbftEnv)
  return target;
}

size_t PbftEnv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PbftEnv)
  size_t total_size = 0;

  if (has_pbft()) {
    // required .protocol.Pbft pbft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pbft_);
  }

  if (has_signature()) {
    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  return total_size;
}
size_t PbftEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PbftEnv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.Pbft pbft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pbft_);

    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbftEnv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PbftEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const PbftEnv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbftEnv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PbftEnv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PbftEnv)
    MergeFrom(*source);
  }
}

void PbftEnv::MergeFrom(const PbftEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PbftEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pbft()->::protocol::Pbft::MergeFrom(from.pbft());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::protocol::Signature::MergeFrom(from.signature());
    }
  }
}

void PbftEnv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PbftEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbftEnv::CopyFrom(const PbftEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PbftEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbftEnv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pbft()) {
    if (!this->pbft_->IsInitialized()) return false;
  }
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void PbftEnv::Swap(PbftEnv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbftEnv::InternalSwap(PbftEnv* other) {
  std::swap(pbft_, other->pbft_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbftEnv::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbftEnv

// required .protocol.Pbft pbft = 1;
bool PbftEnv::has_pbft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbftEnv::set_has_pbft() {
  _has_bits_[0] |= 0x00000001u;
}
void PbftEnv::clear_has_pbft() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbftEnv::clear_pbft() {
  if (pbft_ != NULL) pbft_->::protocol::Pbft::Clear();
  clear_has_pbft();
}
const ::protocol::Pbft& PbftEnv::pbft() const {
  // @@protoc_insertion_point(field_get:protocol.PbftEnv.pbft)
  return pbft_ != NULL ? *pbft_
                         : *::protocol::Pbft::internal_default_instance();
}
::protocol::Pbft* PbftEnv::mutable_pbft() {
  set_has_pbft();
  if (pbft_ == NULL) {
    pbft_ = new ::protocol::Pbft;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftEnv.pbft)
  return pbft_;
}
::protocol::Pbft* PbftEnv::release_pbft() {
  // @@protoc_insertion_point(field_release:protocol.PbftEnv.pbft)
  clear_has_pbft();
  ::protocol::Pbft* temp = pbft_;
  pbft_ = NULL;
  return temp;
}
void PbftEnv::set_allocated_pbft(::protocol::Pbft* pbft) {
  delete pbft_;
  pbft_ = pbft;
  if (pbft) {
    set_has_pbft();
  } else {
    clear_has_pbft();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftEnv.pbft)
}

// required .protocol.Signature signature = 2;
bool PbftEnv::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbftEnv::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void PbftEnv::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbftEnv::clear_signature() {
  if (signature_ != NULL) signature_->::protocol::Signature::Clear();
  clear_has_signature();
}
const ::protocol::Signature& PbftEnv::signature() const {
  // @@protoc_insertion_point(field_get:protocol.PbftEnv.signature)
  return signature_ != NULL ? *signature_
                         : *::protocol::Signature::internal_default_instance();
}
::protocol::Signature* PbftEnv::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PbftEnv.signature)
  return signature_;
}
::protocol::Signature* PbftEnv::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.PbftEnv.signature)
  clear_has_signature();
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void PbftEnv::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PbftEnv.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntryList::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntryList::EntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.EntryList)
}
EntryList::EntryList(const EntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.EntryList)
}

void EntryList::SharedCtor() {
  _cached_size_ = 0;
}

EntryList::~EntryList() {
  // @@protoc_insertion_point(destructor:protocol.EntryList)
  SharedDtor();
}

void EntryList::SharedDtor() {
}

void EntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryList::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntryList& EntryList::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntryList* EntryList::New(::google::protobuf::Arena* arena) const {
  EntryList* n = new EntryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EntryList)
  entry_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.EntryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes entry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.EntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.EntryList)
  return false;
#undef DO_
}

void EntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.EntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes entry = 1;
  for (int i = 0, n = this->entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->entry(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.EntryList)
}

::google::protobuf::uint8* EntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes entry = 1;
  for (int i = 0, n = this->entry_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->entry(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.EntryList)
  return target;
}

size_t EntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EntryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes entry = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entry_size());
  for (int i = 0, n = this->entry_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->entry(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.EntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.EntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.EntryList)
    MergeFrom(*source);
  }
}

void EntryList::MergeFrom(const EntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void EntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.EntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryList::CopyFrom(const EntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryList::IsInitialized() const {
  return true;
}

void EntryList::Swap(EntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntryList::InternalSwap(EntryList* other) {
  entry_.InternalSwap(&other->entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntryList::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntryList

// repeated bytes entry = 1;
int EntryList::entry_size() const {
  return entry_.size();
}
void EntryList::clear_entry() {
  entry_.Clear();
}
const ::std::string& EntryList::entry(int index) const {
  // @@protoc_insertion_point(field_get:protocol.EntryList.entry)
  return entry_.Get(index);
}
::std::string* EntryList::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.EntryList.entry)
  return entry_.Mutable(index);
}
void EntryList::set_entry(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.EntryList.entry)
  entry_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void EntryList::set_entry(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.EntryList.entry)
  entry_.Mutable(index)->assign(std::move(value));
}
#endif
void EntryList::set_entry(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  entry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.EntryList.entry)
}
void EntryList::set_entry(int index, const void* value, size_t size) {
  entry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.EntryList.entry)
}
::std::string* EntryList::add_entry() {
  // @@protoc_insertion_point(field_add_mutable:protocol.EntryList.entry)
  return entry_.Add();
}
void EntryList::add_entry(const ::std::string& value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.EntryList.entry)
}
#if LANG_CXX11
void EntryList::add_entry(::std::string&& value) {
  entry_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.EntryList.entry)
}
#endif
void EntryList::add_entry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.EntryList.entry)
}
void EntryList::add_entry(const void* value, size_t size) {
  entry_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.EntryList.entry)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryList::entry() const {
  // @@protoc_insertion_point(field_list:protocol.EntryList.entry)
  return entry_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EntryList::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:protocol.EntryList.entry)
  return &entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WsMessage::kTypeFieldNumber;
const int WsMessage::kRequestFieldNumber;
const int WsMessage::kSequenceFieldNumber;
const int WsMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WsMessage::WsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.WsMessage)
}
WsMessage::WsMessage(const WsMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&request_) -
    reinterpret_cast<char*>(&type_) + sizeof(request_));
  // @@protoc_insertion_point(copy_constructor:protocol.WsMessage)
}

void WsMessage::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&request_) -
    reinterpret_cast<char*>(&type_) + sizeof(request_));
}

WsMessage::~WsMessage() {
  // @@protoc_insertion_point(destructor:protocol.WsMessage)
  SharedDtor();
}

void WsMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WsMessage& WsMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

WsMessage* WsMessage::New(::google::protobuf::Arena* arena) const {
  WsMessage* n = new WsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WsMessage)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&type_) + sizeof(request_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.WsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.WsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.WsMessage)
  return false;
#undef DO_
}

void WsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.WsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->type(), output);
  }

  // required bool request = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request(), output);
  }

  // required int64 sequence = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence(), output);
  }

  // required bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.WsMessage)
}

::google::protobuf::uint8* WsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->type(), target);
  }

  // required bool request = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request(), target);
  }

  // required int64 sequence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sequence(), target);
  }

  // required bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WsMessage)
  return target;
}

size_t WsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.WsMessage)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_type()) {
    // required int64 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  if (has_sequence()) {
    // required int64 sequence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_request()) {
    // required bool request = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WsMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int64 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());

    // required int64 sequence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required bool request = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.WsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WsMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.WsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.WsMessage)
    MergeFrom(*source);
  }
}

void WsMessage::MergeFrom(const WsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_ = from.request_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.WsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsMessage::CopyFrom(const WsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void WsMessage::Swap(WsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WsMessage::InternalSwap(WsMessage* other) {
  data_.Swap(&other->data_);
  std::swap(type_, other->type_);
  std::swap(sequence_, other->sequence_);
  std::swap(request_, other->request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WsMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WsMessage

// required int64 type = 1;
bool WsMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WsMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void WsMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void WsMessage::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
  clear_has_type();
}
::google::protobuf::int64 WsMessage::type() const {
  // @@protoc_insertion_point(field_get:protocol.WsMessage.type)
  return type_;
}
void WsMessage::set_type(::google::protobuf::int64 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.WsMessage.type)
}

// required bool request = 2;
bool WsMessage::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WsMessage::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
void WsMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void WsMessage::clear_request() {
  request_ = false;
  clear_has_request();
}
bool WsMessage::request() const {
  // @@protoc_insertion_point(field_get:protocol.WsMessage.request)
  return request_;
}
void WsMessage::set_request(bool value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:protocol.WsMessage.request)
}

// required int64 sequence = 3;
bool WsMessage::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WsMessage::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
void WsMessage::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void WsMessage::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
::google::protobuf::int64 WsMessage::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.WsMessage.sequence)
  return sequence_;
}
void WsMessage::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.WsMessage.sequence)
}

// required bytes data = 4;
bool WsMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WsMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void WsMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void WsMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& WsMessage::data() const {
  // @@protoc_insertion_point(field_get:protocol.WsMessage.data)
  return data_.GetNoArena();
}
void WsMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WsMessage.data)
}
#if LANG_CXX11
void WsMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WsMessage.data)
}
#endif
void WsMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WsMessage.data)
}
void WsMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WsMessage.data)
}
::std::string* WsMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:protocol.WsMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WsMessage::release_data() {
  // @@protoc_insertion_point(field_release:protocol.WsMessage.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WsMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.WsMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepOnline::kSrcPeerAddrFieldNumber;
const int KeepOnline::kPayloadSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepOnline::KeepOnline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.KeepOnline)
}
KeepOnline::KeepOnline(const KeepOnline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_peer_addr()) {
    src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
  }
  payload_seq_ = from.payload_seq_;
  // @@protoc_insertion_point(copy_constructor:protocol.KeepOnline)
}

void KeepOnline::SharedCtor() {
  _cached_size_ = 0;
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_seq_ = GOOGLE_LONGLONG(0);
}

KeepOnline::~KeepOnline() {
  // @@protoc_insertion_point(destructor:protocol.KeepOnline)
  SharedDtor();
}

void KeepOnline::SharedDtor() {
  src_peer_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeepOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepOnline::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepOnline& KeepOnline::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeepOnline* KeepOnline::New(::google::protobuf::Arena* arena) const {
  KeepOnline* n = new KeepOnline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.KeepOnline)
  if (has_src_peer_addr()) {
    GOOGLE_DCHECK(!src_peer_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*src_peer_addr_.UnsafeRawStringPointer())->clear();
  }
  payload_seq_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.KeepOnline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src_peer_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_peer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_peer_addr().data(), this->src_peer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.KeepOnline.src_peer_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 payload_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_payload_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.KeepOnline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.KeepOnline)
  return false;
#undef DO_
}

void KeepOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.KeepOnline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.KeepOnline.src_peer_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_peer_addr(), output);
  }

  // required int64 payload_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->payload_seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.KeepOnline)
}

::google::protobuf::uint8* KeepOnline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.KeepOnline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.KeepOnline.src_peer_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_peer_addr(), target);
  }

  // required int64 payload_seq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->payload_seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.KeepOnline)
  return target;
}

size_t KeepOnline::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.KeepOnline)
  size_t total_size = 0;

  if (has_src_peer_addr()) {
    // required string src_peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());
  }

  if (has_payload_seq()) {
    // required int64 payload_seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_seq());
  }

  return total_size;
}
size_t KeepOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.KeepOnline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string src_peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());

    // required int64 payload_seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepOnline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.KeepOnline)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepOnline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepOnline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.KeepOnline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.KeepOnline)
    MergeFrom(*source);
  }
}

void KeepOnline::MergeFrom(const KeepOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.KeepOnline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_peer_addr();
      src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      payload_seq_ = from.payload_seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeepOnline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.KeepOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepOnline::CopyFrom(const KeepOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.KeepOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepOnline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KeepOnline::Swap(KeepOnline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepOnline::InternalSwap(KeepOnline* other) {
  src_peer_addr_.Swap(&other->src_peer_addr_);
  std::swap(payload_seq_, other->payload_seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepOnline::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepOnline

// required string src_peer_addr = 1;
bool KeepOnline::has_src_peer_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepOnline::set_has_src_peer_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepOnline::clear_has_src_peer_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepOnline::clear_src_peer_addr() {
  src_peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_peer_addr();
}
const ::std::string& KeepOnline::src_peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.KeepOnline.src_peer_addr)
  return src_peer_addr_.GetNoArena();
}
void KeepOnline::set_src_peer_addr(const ::std::string& value) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.KeepOnline.src_peer_addr)
}
#if LANG_CXX11
void KeepOnline::set_src_peer_addr(::std::string&& value) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.KeepOnline.src_peer_addr)
}
#endif
void KeepOnline::set_src_peer_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.KeepOnline.src_peer_addr)
}
void KeepOnline::set_src_peer_addr(const char* value, size_t size) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.KeepOnline.src_peer_addr)
}
::std::string* KeepOnline::mutable_src_peer_addr() {
  set_has_src_peer_addr();
  // @@protoc_insertion_point(field_mutable:protocol.KeepOnline.src_peer_addr)
  return src_peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeepOnline::release_src_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.KeepOnline.src_peer_addr)
  clear_has_src_peer_addr();
  return src_peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeepOnline::set_allocated_src_peer_addr(::std::string* src_peer_addr) {
  if (src_peer_addr != NULL) {
    set_has_src_peer_addr();
  } else {
    clear_has_src_peer_addr();
  }
  src_peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.KeepOnline.src_peer_addr)
}

// required int64 payload_seq = 2;
bool KeepOnline::has_payload_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepOnline::set_has_payload_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepOnline::clear_has_payload_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepOnline::clear_payload_seq() {
  payload_seq_ = GOOGLE_LONGLONG(0);
  clear_has_payload_seq();
}
::google::protobuf::int64 KeepOnline::payload_seq() const {
  // @@protoc_insertion_point(field_get:protocol.KeepOnline.payload_seq)
  return payload_seq_;
}
void KeepOnline::set_payload_seq(::google::protobuf::int64 value) {
  set_has_payload_seq();
  payload_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.KeepOnline.payload_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepOnlineEnv::kKeeponlineFieldNumber;
const int KeepOnlineEnv::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepOnlineEnv::KeepOnlineEnv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.KeepOnlineEnv)
}
KeepOnlineEnv::KeepOnlineEnv(const KeepOnlineEnv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keeponline()) {
    keeponline_ = new ::protocol::KeepOnline(*from.keeponline_);
  } else {
    keeponline_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::protocol::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.KeepOnlineEnv)
}

void KeepOnlineEnv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&keeponline_, 0, reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&keeponline_) + sizeof(signature_));
}

KeepOnlineEnv::~KeepOnlineEnv() {
  // @@protoc_insertion_point(destructor:protocol.KeepOnlineEnv)
  SharedDtor();
}

void KeepOnlineEnv::SharedDtor() {
  if (this != internal_default_instance()) {
    delete keeponline_;
  }
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void KeepOnlineEnv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepOnlineEnv::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepOnlineEnv& KeepOnlineEnv::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeepOnlineEnv* KeepOnlineEnv::New(::google::protobuf::Arena* arena) const {
  KeepOnlineEnv* n = new KeepOnlineEnv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepOnlineEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.KeepOnlineEnv)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_keeponline()) {
      GOOGLE_DCHECK(keeponline_ != NULL);
      keeponline_->::protocol::KeepOnline::Clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->::protocol::Signature::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepOnlineEnv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.KeepOnlineEnv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.KeepOnline keeponline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keeponline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.KeepOnlineEnv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.KeepOnlineEnv)
  return false;
#undef DO_
}

void KeepOnlineEnv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.KeepOnlineEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.KeepOnline keeponline = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->keeponline_, output);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.KeepOnlineEnv)
}

::google::protobuf::uint8* KeepOnlineEnv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.KeepOnlineEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.KeepOnline keeponline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->keeponline_, deterministic, target);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->signature_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.KeepOnlineEnv)
  return target;
}

size_t KeepOnlineEnv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.KeepOnlineEnv)
  size_t total_size = 0;

  if (has_keeponline()) {
    // required .protocol.KeepOnline keeponline = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keeponline_);
  }

  if (has_signature()) {
    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  return total_size;
}
size_t KeepOnlineEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.KeepOnlineEnv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.KeepOnline keeponline = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keeponline_);

    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepOnlineEnv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.KeepOnlineEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepOnlineEnv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepOnlineEnv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.KeepOnlineEnv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.KeepOnlineEnv)
    MergeFrom(*source);
  }
}

void KeepOnlineEnv::MergeFrom(const KeepOnlineEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.KeepOnlineEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keeponline()->::protocol::KeepOnline::MergeFrom(from.keeponline());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::protocol::Signature::MergeFrom(from.signature());
    }
  }
}

void KeepOnlineEnv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.KeepOnlineEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepOnlineEnv::CopyFrom(const KeepOnlineEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.KeepOnlineEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepOnlineEnv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_keeponline()) {
    if (!this->keeponline_->IsInitialized()) return false;
  }
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void KeepOnlineEnv::Swap(KeepOnlineEnv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepOnlineEnv::InternalSwap(KeepOnlineEnv* other) {
  std::swap(keeponline_, other->keeponline_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepOnlineEnv::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepOnlineEnv

// required .protocol.KeepOnline keeponline = 1;
bool KeepOnlineEnv::has_keeponline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepOnlineEnv::set_has_keeponline() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepOnlineEnv::clear_has_keeponline() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepOnlineEnv::clear_keeponline() {
  if (keeponline_ != NULL) keeponline_->::protocol::KeepOnline::Clear();
  clear_has_keeponline();
}
const ::protocol::KeepOnline& KeepOnlineEnv::keeponline() const {
  // @@protoc_insertion_point(field_get:protocol.KeepOnlineEnv.keeponline)
  return keeponline_ != NULL ? *keeponline_
                         : *::protocol::KeepOnline::internal_default_instance();
}
::protocol::KeepOnline* KeepOnlineEnv::mutable_keeponline() {
  set_has_keeponline();
  if (keeponline_ == NULL) {
    keeponline_ = new ::protocol::KeepOnline;
  }
  // @@protoc_insertion_point(field_mutable:protocol.KeepOnlineEnv.keeponline)
  return keeponline_;
}
::protocol::KeepOnline* KeepOnlineEnv::release_keeponline() {
  // @@protoc_insertion_point(field_release:protocol.KeepOnlineEnv.keeponline)
  clear_has_keeponline();
  ::protocol::KeepOnline* temp = keeponline_;
  keeponline_ = NULL;
  return temp;
}
void KeepOnlineEnv::set_allocated_keeponline(::protocol::KeepOnline* keeponline) {
  delete keeponline_;
  keeponline_ = keeponline;
  if (keeponline) {
    set_has_keeponline();
  } else {
    clear_has_keeponline();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.KeepOnlineEnv.keeponline)
}

// required .protocol.Signature signature = 2;
bool KeepOnlineEnv::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepOnlineEnv::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepOnlineEnv::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepOnlineEnv::clear_signature() {
  if (signature_ != NULL) signature_->::protocol::Signature::Clear();
  clear_has_signature();
}
const ::protocol::Signature& KeepOnlineEnv::signature() const {
  // @@protoc_insertion_point(field_get:protocol.KeepOnlineEnv.signature)
  return signature_ != NULL ? *signature_
                         : *::protocol::Signature::internal_default_instance();
}
::protocol::Signature* KeepOnlineEnv::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.KeepOnlineEnv.signature)
  return signature_;
}
::protocol::Signature* KeepOnlineEnv::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.KeepOnlineEnv.signature)
  clear_has_signature();
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void KeepOnlineEnv::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.KeepOnlineEnv.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayLoad::kSrcPeerAddrFieldNumber;
const int PayLoad::kDesPeerAddrsFieldNumber;
const int PayLoad::kTimestampFieldNumber;
const int PayLoad::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayLoad::PayLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PayLoad)
}
PayLoad::PayLoad(const PayLoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      des_peer_addrs_(from.des_peer_addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_peer_addr()) {
    src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:protocol.PayLoad)
}

void PayLoad::SharedCtor() {
  _cached_size_ = 0;
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

PayLoad::~PayLoad() {
  // @@protoc_insertion_point(destructor:protocol.PayLoad)
  SharedDtor();
}

void PayLoad::SharedDtor() {
  src_peer_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PayLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayLoad::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayLoad& PayLoad::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PayLoad* PayLoad::New(::google::protobuf::Arena* arena) const {
  PayLoad* n = new PayLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PayLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PayLoad)
  des_peer_addrs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_src_peer_addr()) {
      GOOGLE_DCHECK(!src_peer_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_peer_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PayLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PayLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src_peer_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_peer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_peer_addr().data(), this->src_peer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.PayLoad.src_peer_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string des_peer_addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_des_peer_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->des_peer_addrs(this->des_peer_addrs_size() - 1).data(),
            this->des_peer_addrs(this->des_peer_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.PayLoad.des_peer_addrs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PayLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PayLoad)
  return false;
#undef DO_
}

void PayLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PayLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.PayLoad.src_peer_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_peer_addr(), output);
  }

  // repeated string des_peer_addrs = 2;
  for (int i = 0, n = this->des_peer_addrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des_peer_addrs(i).data(), this->des_peer_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.PayLoad.des_peer_addrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->des_peer_addrs(i), output);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PayLoad)
}

::google::protobuf::uint8* PayLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PayLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.PayLoad.src_peer_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_peer_addr(), target);
  }

  // repeated string des_peer_addrs = 2;
  for (int i = 0, n = this->des_peer_addrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des_peer_addrs(i).data(), this->des_peer_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.PayLoad.des_peer_addrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->des_peer_addrs(i), target);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // required bytes data = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PayLoad)
  return target;
}

size_t PayLoad::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PayLoad)
  size_t total_size = 0;

  if (has_src_peer_addr()) {
    // required string src_peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());
  }

  if (has_data()) {
    // required bytes data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t PayLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PayLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string src_peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());

    // required bytes data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string des_peer_addrs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->des_peer_addrs_size());
  for (int i = 0, n = this->des_peer_addrs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->des_peer_addrs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PayLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const PayLoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PayLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PayLoad)
    MergeFrom(*source);
  }
}

void PayLoad::MergeFrom(const PayLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PayLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  des_peer_addrs_.MergeFrom(from.des_peer_addrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_peer_addr();
      src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PayLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PayLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayLoad::CopyFrom(const PayLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PayLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PayLoad::Swap(PayLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayLoad::InternalSwap(PayLoad* other) {
  des_peer_addrs_.InternalSwap(&other->des_peer_addrs_);
  src_peer_addr_.Swap(&other->src_peer_addr_);
  data_.Swap(&other->data_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PayLoad::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PayLoad

// required string src_peer_addr = 1;
bool PayLoad::has_src_peer_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PayLoad::set_has_src_peer_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void PayLoad::clear_has_src_peer_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void PayLoad::clear_src_peer_addr() {
  src_peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_peer_addr();
}
const ::std::string& PayLoad::src_peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.PayLoad.src_peer_addr)
  return src_peer_addr_.GetNoArena();
}
void PayLoad::set_src_peer_addr(const ::std::string& value) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PayLoad.src_peer_addr)
}
#if LANG_CXX11
void PayLoad::set_src_peer_addr(::std::string&& value) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PayLoad.src_peer_addr)
}
#endif
void PayLoad::set_src_peer_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PayLoad.src_peer_addr)
}
void PayLoad::set_src_peer_addr(const char* value, size_t size) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PayLoad.src_peer_addr)
}
::std::string* PayLoad::mutable_src_peer_addr() {
  set_has_src_peer_addr();
  // @@protoc_insertion_point(field_mutable:protocol.PayLoad.src_peer_addr)
  return src_peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PayLoad::release_src_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.PayLoad.src_peer_addr)
  clear_has_src_peer_addr();
  return src_peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PayLoad::set_allocated_src_peer_addr(::std::string* src_peer_addr) {
  if (src_peer_addr != NULL) {
    set_has_src_peer_addr();
  } else {
    clear_has_src_peer_addr();
  }
  src_peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.PayLoad.src_peer_addr)
}

// repeated string des_peer_addrs = 2;
int PayLoad::des_peer_addrs_size() const {
  return des_peer_addrs_.size();
}
void PayLoad::clear_des_peer_addrs() {
  des_peer_addrs_.Clear();
}
const ::std::string& PayLoad::des_peer_addrs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PayLoad.des_peer_addrs)
  return des_peer_addrs_.Get(index);
}
::std::string* PayLoad::mutable_des_peer_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PayLoad.des_peer_addrs)
  return des_peer_addrs_.Mutable(index);
}
void PayLoad::set_des_peer_addrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.PayLoad.des_peer_addrs)
  des_peer_addrs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PayLoad::set_des_peer_addrs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.PayLoad.des_peer_addrs)
  des_peer_addrs_.Mutable(index)->assign(std::move(value));
}
#endif
void PayLoad::set_des_peer_addrs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_peer_addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.PayLoad.des_peer_addrs)
}
void PayLoad::set_des_peer_addrs(int index, const char* value, size_t size) {
  des_peer_addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.PayLoad.des_peer_addrs)
}
::std::string* PayLoad::add_des_peer_addrs() {
  // @@protoc_insertion_point(field_add_mutable:protocol.PayLoad.des_peer_addrs)
  return des_peer_addrs_.Add();
}
void PayLoad::add_des_peer_addrs(const ::std::string& value) {
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.PayLoad.des_peer_addrs)
}
#if LANG_CXX11
void PayLoad::add_des_peer_addrs(::std::string&& value) {
  des_peer_addrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.PayLoad.des_peer_addrs)
}
#endif
void PayLoad::add_des_peer_addrs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.PayLoad.des_peer_addrs)
}
void PayLoad::add_des_peer_addrs(const char* value, size_t size) {
  des_peer_addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.PayLoad.des_peer_addrs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PayLoad::des_peer_addrs() const {
  // @@protoc_insertion_point(field_list:protocol.PayLoad.des_peer_addrs)
  return des_peer_addrs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PayLoad::mutable_des_peer_addrs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PayLoad.des_peer_addrs)
  return &des_peer_addrs_;
}

// required int64 timestamp = 4;
bool PayLoad::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PayLoad::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void PayLoad::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void PayLoad::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 PayLoad::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PayLoad.timestamp)
  return timestamp_;
}
void PayLoad::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PayLoad.timestamp)
}

// required bytes data = 5;
bool PayLoad::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PayLoad::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PayLoad::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PayLoad::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& PayLoad::data() const {
  // @@protoc_insertion_point(field_get:protocol.PayLoad.data)
  return data_.GetNoArena();
}
void PayLoad::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.PayLoad.data)
}
#if LANG_CXX11
void PayLoad::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.PayLoad.data)
}
#endif
void PayLoad::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.PayLoad.data)
}
void PayLoad::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.PayLoad.data)
}
::std::string* PayLoad::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:protocol.PayLoad.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PayLoad::release_data() {
  // @@protoc_insertion_point(field_release:protocol.PayLoad.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PayLoad::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.PayLoad.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayLoadEnv::kPayloadFieldNumber;
const int PayLoadEnv::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayLoadEnv::PayLoadEnv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PayLoadEnv)
}
PayLoadEnv::PayLoadEnv(const PayLoadEnv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payload()) {
    payload_ = new ::protocol::PayLoad(*from.payload_);
  } else {
    payload_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::protocol::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PayLoadEnv)
}

void PayLoadEnv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&payload_, 0, reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&payload_) + sizeof(signature_));
}

PayLoadEnv::~PayLoadEnv() {
  // @@protoc_insertion_point(destructor:protocol.PayLoadEnv)
  SharedDtor();
}

void PayLoadEnv::SharedDtor() {
  if (this != internal_default_instance()) {
    delete payload_;
  }
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void PayLoadEnv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayLoadEnv::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayLoadEnv& PayLoadEnv::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PayLoadEnv* PayLoadEnv::New(::google::protobuf::Arena* arena) const {
  PayLoadEnv* n = new PayLoadEnv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PayLoadEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PayLoadEnv)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_payload()) {
      GOOGLE_DCHECK(payload_ != NULL);
      payload_->::protocol::PayLoad::Clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->::protocol::Signature::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PayLoadEnv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PayLoadEnv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.PayLoad payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PayLoadEnv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PayLoadEnv)
  return false;
#undef DO_
}

void PayLoadEnv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PayLoadEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.PayLoad payload = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->payload_, output);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PayLoadEnv)
}

::google::protobuf::uint8* PayLoadEnv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PayLoadEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.PayLoad payload = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->payload_, deterministic, target);
  }

  // required .protocol.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->signature_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PayLoadEnv)
  return target;
}

size_t PayLoadEnv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.PayLoadEnv)
  size_t total_size = 0;

  if (has_payload()) {
    // required .protocol.PayLoad payload = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  if (has_signature()) {
    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  return total_size;
}
size_t PayLoadEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PayLoadEnv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.PayLoad payload = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);

    // required .protocol.Signature signature = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayLoadEnv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PayLoadEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const PayLoadEnv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayLoadEnv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PayLoadEnv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PayLoadEnv)
    MergeFrom(*source);
  }
}

void PayLoadEnv::MergeFrom(const PayLoadEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PayLoadEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_payload()->::protocol::PayLoad::MergeFrom(from.payload());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::protocol::Signature::MergeFrom(from.signature());
    }
  }
}

void PayLoadEnv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PayLoadEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayLoadEnv::CopyFrom(const PayLoadEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PayLoadEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayLoadEnv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_payload()) {
    if (!this->payload_->IsInitialized()) return false;
  }
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void PayLoadEnv::Swap(PayLoadEnv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayLoadEnv::InternalSwap(PayLoadEnv* other) {
  std::swap(payload_, other->payload_);
  std::swap(signature_, other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PayLoadEnv::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PayLoadEnv

// required .protocol.PayLoad payload = 1;
bool PayLoadEnv::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PayLoadEnv::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void PayLoadEnv::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void PayLoadEnv::clear_payload() {
  if (payload_ != NULL) payload_->::protocol::PayLoad::Clear();
  clear_has_payload();
}
const ::protocol::PayLoad& PayLoadEnv::payload() const {
  // @@protoc_insertion_point(field_get:protocol.PayLoadEnv.payload)
  return payload_ != NULL ? *payload_
                         : *::protocol::PayLoad::internal_default_instance();
}
::protocol::PayLoad* PayLoadEnv::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) {
    payload_ = new ::protocol::PayLoad;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PayLoadEnv.payload)
  return payload_;
}
::protocol::PayLoad* PayLoadEnv::release_payload() {
  // @@protoc_insertion_point(field_release:protocol.PayLoadEnv.payload)
  clear_has_payload();
  ::protocol::PayLoad* temp = payload_;
  payload_ = NULL;
  return temp;
}
void PayLoadEnv::set_allocated_payload(::protocol::PayLoad* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PayLoadEnv.payload)
}

// required .protocol.Signature signature = 2;
bool PayLoadEnv::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PayLoadEnv::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void PayLoadEnv::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void PayLoadEnv::clear_signature() {
  if (signature_ != NULL) signature_->::protocol::Signature::Clear();
  clear_has_signature();
}
const ::protocol::Signature& PayLoadEnv::signature() const {
  // @@protoc_insertion_point(field_get:protocol.PayLoadEnv.signature)
  return signature_ != NULL ? *signature_
                         : *::protocol::Signature::internal_default_instance();
}
::protocol::Signature* PayLoadEnv::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PayLoadEnv.signature)
  return signature_;
}
::protocol::Signature* PayLoadEnv::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.PayLoadEnv.signature)
  clear_has_signature();
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void PayLoadEnv::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.PayLoadEnv.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainHello::kApiListFieldNumber;
const int ChainHello::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainHello::ChainHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainHello)
}
ChainHello::ChainHello(const ChainHello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      api_list_(from.api_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainHello)
}

void ChainHello::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

ChainHello::~ChainHello() {
  // @@protoc_insertion_point(destructor:protocol.ChainHello)
  SharedDtor();
}

void ChainHello::SharedDtor() {
}

void ChainHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainHello::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainHello& ChainHello::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChainHello* ChainHello::New(::google::protobuf::Arena* arena) const {
  ChainHello* n = new ChainHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainHello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainHello)
  api_list_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.ChainMessageType api_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::ChainMessageType_IsValid(value)) {
            add_api_list(static_cast< ::protocol::ChainMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::protocol::ChainMessageType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_api_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainHello)
  return false;
#undef DO_
}

void ChainHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainMessageType api_list = 1;
  for (int i = 0, n = this->api_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->api_list(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainHello)
}

::google::protobuf::uint8* ChainHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainMessageType api_list = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->api_list_, target);

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainHello)
  return target;
}

size_t ChainHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainHello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 timestamp = 2;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }
  // repeated .protocol.ChainMessageType api_list = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->api_list_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api_list(i));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainHello)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainHello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainHello)
    MergeFrom(*source);
  }
}

void ChainHello::MergeFrom(const ChainHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  api_list_.MergeFrom(from.api_list_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void ChainHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainHello::CopyFrom(const ChainHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainHello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChainHello::Swap(ChainHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainHello::InternalSwap(ChainHello* other) {
  api_list_.InternalSwap(&other->api_list_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainHello::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainHello

// repeated .protocol.ChainMessageType api_list = 1;
int ChainHello::api_list_size() const {
  return api_list_.size();
}
void ChainHello::clear_api_list() {
  api_list_.Clear();
}
::protocol::ChainMessageType ChainHello::api_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainHello.api_list)
  return static_cast< ::protocol::ChainMessageType >(api_list_.Get(index));
}
void ChainHello::set_api_list(int index, ::protocol::ChainMessageType value) {
  assert(::protocol::ChainMessageType_IsValid(value));
  api_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.ChainHello.api_list)
}
void ChainHello::add_api_list(::protocol::ChainMessageType value) {
  assert(::protocol::ChainMessageType_IsValid(value));
  api_list_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.ChainHello.api_list)
}
const ::google::protobuf::RepeatedField<int>&
ChainHello::api_list() const {
  // @@protoc_insertion_point(field_list:protocol.ChainHello.api_list)
  return api_list_;
}
::google::protobuf::RepeatedField<int>*
ChainHello::mutable_api_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainHello.api_list)
  return &api_list_;
}

// required int64 timestamp = 2;
bool ChainHello::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChainHello::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void ChainHello::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChainHello::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ChainHello::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainHello.timestamp)
  return timestamp_;
}
void ChainHello::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainHello.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainStatus::kSelfAddrFieldNumber;
const int ChainStatus::kLedgerVersionFieldNumber;
const int ChainStatus::kBubiVersionFieldNumber;
const int ChainStatus::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainStatus::ChainStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainStatus)
}
ChainStatus::ChainStatus(const ChainStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  self_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_self_addr()) {
    self_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_addr_);
  }
  bubi_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bubi_version()) {
    bubi_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bubi_version_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&ledger_version_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(ledger_version_));
  // @@protoc_insertion_point(copy_constructor:protocol.ChainStatus)
}

void ChainStatus::SharedCtor() {
  _cached_size_ = 0;
  self_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bubi_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&ledger_version_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(ledger_version_));
}

ChainStatus::~ChainStatus() {
  // @@protoc_insertion_point(destructor:protocol.ChainStatus)
  SharedDtor();
}

void ChainStatus::SharedDtor() {
  self_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bubi_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChainStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainStatus::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainStatus& ChainStatus::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChainStatus* ChainStatus::New(::google::protobuf::Arena* arena) const {
  ChainStatus* n = new ChainStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_self_addr()) {
      GOOGLE_DCHECK(!self_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*self_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_bubi_version()) {
      GOOGLE_DCHECK(!bubi_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bubi_version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&ledger_version_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(ledger_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string self_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->self_addr().data(), this->self_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainStatus.self_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ledger_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ledger_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ledger_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string bubi_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bubi_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bubi_version().data(), this->bubi_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainStatus.bubi_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainStatus)
  return false;
#undef DO_
}

void ChainStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string self_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->self_addr().data(), this->self_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainStatus.self_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->self_addr(), output);
  }

  // required uint32 ledger_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ledger_version(), output);
  }

  // required string bubi_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bubi_version().data(), this->bubi_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainStatus.bubi_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bubi_version(), output);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainStatus)
}

::google::protobuf::uint8* ChainStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string self_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->self_addr().data(), this->self_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainStatus.self_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->self_addr(), target);
  }

  // required uint32 ledger_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ledger_version(), target);
  }

  // required string bubi_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bubi_version().data(), this->bubi_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainStatus.bubi_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bubi_version(), target);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainStatus)
  return target;
}

size_t ChainStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.ChainStatus)
  size_t total_size = 0;

  if (has_self_addr()) {
    // required string self_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->self_addr());
  }

  if (has_bubi_version()) {
    // required string bubi_version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bubi_version());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_ledger_version()) {
    // required uint32 ledger_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());
  }

  return total_size;
}
size_t ChainStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string self_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->self_addr());

    // required string bubi_version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bubi_version());

    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required uint32 ledger_version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ledger_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainStatus)
    MergeFrom(*source);
  }
}

void ChainStatus::MergeFrom(const ChainStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_self_addr();
      self_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bubi_version();
      bubi_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bubi_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ledger_version_ = from.ledger_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChainStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainStatus::CopyFrom(const ChainStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ChainStatus::Swap(ChainStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainStatus::InternalSwap(ChainStatus* other) {
  self_addr_.Swap(&other->self_addr_);
  bubi_version_.Swap(&other->bubi_version_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(ledger_version_, other->ledger_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainStatus::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainStatus

// required string self_addr = 1;
bool ChainStatus::has_self_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChainStatus::set_has_self_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void ChainStatus::clear_has_self_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChainStatus::clear_self_addr() {
  self_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_self_addr();
}
const ::std::string& ChainStatus::self_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.self_addr)
  return self_addr_.GetNoArena();
}
void ChainStatus::set_self_addr(const ::std::string& value) {
  set_has_self_addr();
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.self_addr)
}
#if LANG_CXX11
void ChainStatus::set_self_addr(::std::string&& value) {
  set_has_self_addr();
  self_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainStatus.self_addr)
}
#endif
void ChainStatus::set_self_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_self_addr();
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainStatus.self_addr)
}
void ChainStatus::set_self_addr(const char* value, size_t size) {
  set_has_self_addr();
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainStatus.self_addr)
}
::std::string* ChainStatus::mutable_self_addr() {
  set_has_self_addr();
  // @@protoc_insertion_point(field_mutable:protocol.ChainStatus.self_addr)
  return self_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainStatus::release_self_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainStatus.self_addr)
  clear_has_self_addr();
  return self_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainStatus::set_allocated_self_addr(::std::string* self_addr) {
  if (self_addr != NULL) {
    set_has_self_addr();
  } else {
    clear_has_self_addr();
  }
  self_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainStatus.self_addr)
}

// required uint32 ledger_version = 2;
bool ChainStatus::has_ledger_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChainStatus::set_has_ledger_version() {
  _has_bits_[0] |= 0x00000008u;
}
void ChainStatus::clear_has_ledger_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChainStatus::clear_ledger_version() {
  ledger_version_ = 0u;
  clear_has_ledger_version();
}
::google::protobuf::uint32 ChainStatus::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.ledger_version)
  return ledger_version_;
}
void ChainStatus::set_ledger_version(::google::protobuf::uint32 value) {
  set_has_ledger_version();
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.ledger_version)
}

// required string bubi_version = 3;
bool ChainStatus::has_bubi_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChainStatus::set_has_bubi_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ChainStatus::clear_has_bubi_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChainStatus::clear_bubi_version() {
  bubi_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bubi_version();
}
const ::std::string& ChainStatus::bubi_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.bubi_version)
  return bubi_version_.GetNoArena();
}
void ChainStatus::set_bubi_version(const ::std::string& value) {
  set_has_bubi_version();
  bubi_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.bubi_version)
}
#if LANG_CXX11
void ChainStatus::set_bubi_version(::std::string&& value) {
  set_has_bubi_version();
  bubi_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainStatus.bubi_version)
}
#endif
void ChainStatus::set_bubi_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bubi_version();
  bubi_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainStatus.bubi_version)
}
void ChainStatus::set_bubi_version(const char* value, size_t size) {
  set_has_bubi_version();
  bubi_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainStatus.bubi_version)
}
::std::string* ChainStatus::mutable_bubi_version() {
  set_has_bubi_version();
  // @@protoc_insertion_point(field_mutable:protocol.ChainStatus.bubi_version)
  return bubi_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainStatus::release_bubi_version() {
  // @@protoc_insertion_point(field_release:protocol.ChainStatus.bubi_version)
  clear_has_bubi_version();
  return bubi_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainStatus::set_allocated_bubi_version(::std::string* bubi_version) {
  if (bubi_version != NULL) {
    set_has_bubi_version();
  } else {
    clear_has_bubi_version();
  }
  bubi_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bubi_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainStatus.bubi_version)
}

// required int64 timestamp = 4;
bool ChainStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChainStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void ChainStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChainStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ChainStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.timestamp)
  return timestamp_;
}
void ChainStatus::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainPeerOnline::kPeerAddrFieldNumber;
const int ChainPeerOnline::kPeerIpFieldNumber;
const int ChainPeerOnline::kPeerPortFieldNumber;
const int ChainPeerOnline::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainPeerOnline::ChainPeerOnline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainPeerOnline)
}
ChainPeerOnline::ChainPeerOnline(const ChainPeerOnline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_addr()) {
    peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_addr_);
  }
  peer_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_ip()) {
    peer_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_ip_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&peer_port_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(peer_port_));
  // @@protoc_insertion_point(copy_constructor:protocol.ChainPeerOnline)
}

void ChainPeerOnline::SharedCtor() {
  _cached_size_ = 0;
  peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&peer_port_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(peer_port_));
}

ChainPeerOnline::~ChainPeerOnline() {
  // @@protoc_insertion_point(destructor:protocol.ChainPeerOnline)
  SharedDtor();
}

void ChainPeerOnline::SharedDtor() {
  peer_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChainPeerOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainPeerOnline::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainPeerOnline& ChainPeerOnline::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChainPeerOnline* ChainPeerOnline::New(::google::protobuf::Arena* arena) const {
  ChainPeerOnline* n = new ChainPeerOnline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainPeerOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainPeerOnline)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_peer_addr()) {
      GOOGLE_DCHECK(!peer_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_peer_ip()) {
      GOOGLE_DCHECK(!peer_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*peer_ip_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&peer_port_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(peer_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainPeerOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainPeerOnline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peer_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_addr().data(), this->peer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainPeerOnline.peer_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_ip().data(), this->peer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainPeerOnline.peer_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 peer_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_peer_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainPeerOnline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainPeerOnline)
  return false;
#undef DO_
}

void ChainPeerOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainPeerOnline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_addr().data(), this->peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerOnline.peer_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peer_addr(), output);
  }

  // required string peer_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_ip().data(), this->peer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerOnline.peer_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->peer_ip(), output);
  }

  // required int32 peer_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peer_port(), output);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainPeerOnline)
}

::google::protobuf::uint8* ChainPeerOnline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainPeerOnline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_addr().data(), this->peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerOnline.peer_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer_addr(), target);
  }

  // required string peer_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_ip().data(), this->peer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerOnline.peer_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_ip(), target);
  }

  // required int32 peer_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peer_port(), target);
  }

  // required int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainPeerOnline)
  return target;
}

size_t ChainPeerOnline::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.ChainPeerOnline)
  size_t total_size = 0;

  if (has_peer_addr()) {
    // required string peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_addr());
  }

  if (has_peer_ip()) {
    // required string peer_ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_ip());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_peer_port()) {
    // required int32 peer_port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer_port());
  }

  return total_size;
}
size_t ChainPeerOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainPeerOnline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_addr());

    // required string peer_ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_ip());

    // required int64 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int32 peer_port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainPeerOnline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainPeerOnline)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainPeerOnline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainPeerOnline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainPeerOnline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainPeerOnline)
    MergeFrom(*source);
  }
}

void ChainPeerOnline::MergeFrom(const ChainPeerOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainPeerOnline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_addr();
      peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_peer_ip();
      peer_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      peer_port_ = from.peer_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChainPeerOnline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainPeerOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainPeerOnline::CopyFrom(const ChainPeerOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainPeerOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainPeerOnline::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ChainPeerOnline::Swap(ChainPeerOnline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainPeerOnline::InternalSwap(ChainPeerOnline* other) {
  peer_addr_.Swap(&other->peer_addr_);
  peer_ip_.Swap(&other->peer_ip_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(peer_port_, other->peer_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainPeerOnline::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainPeerOnline

// required string peer_addr = 1;
bool ChainPeerOnline::has_peer_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChainPeerOnline::set_has_peer_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void ChainPeerOnline::clear_has_peer_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChainPeerOnline::clear_peer_addr() {
  peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_addr();
}
const ::std::string& ChainPeerOnline::peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerOnline.peer_addr)
  return peer_addr_.GetNoArena();
}
void ChainPeerOnline::set_peer_addr(const ::std::string& value) {
  set_has_peer_addr();
  peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerOnline.peer_addr)
}
#if LANG_CXX11
void ChainPeerOnline::set_peer_addr(::std::string&& value) {
  set_has_peer_addr();
  peer_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainPeerOnline.peer_addr)
}
#endif
void ChainPeerOnline::set_peer_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_addr();
  peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerOnline.peer_addr)
}
void ChainPeerOnline::set_peer_addr(const char* value, size_t size) {
  set_has_peer_addr();
  peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerOnline.peer_addr)
}
::std::string* ChainPeerOnline::mutable_peer_addr() {
  set_has_peer_addr();
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerOnline.peer_addr)
  return peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainPeerOnline::release_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerOnline.peer_addr)
  clear_has_peer_addr();
  return peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainPeerOnline::set_allocated_peer_addr(::std::string* peer_addr) {
  if (peer_addr != NULL) {
    set_has_peer_addr();
  } else {
    clear_has_peer_addr();
  }
  peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerOnline.peer_addr)
}

// required string peer_ip = 2;
bool ChainPeerOnline::has_peer_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChainPeerOnline::set_has_peer_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void ChainPeerOnline::clear_has_peer_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChainPeerOnline::clear_peer_ip() {
  peer_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_ip();
}
const ::std::string& ChainPeerOnline::peer_ip() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerOnline.peer_ip)
  return peer_ip_.GetNoArena();
}
void ChainPeerOnline::set_peer_ip(const ::std::string& value) {
  set_has_peer_ip();
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerOnline.peer_ip)
}
#if LANG_CXX11
void ChainPeerOnline::set_peer_ip(::std::string&& value) {
  set_has_peer_ip();
  peer_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainPeerOnline.peer_ip)
}
#endif
void ChainPeerOnline::set_peer_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_ip();
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerOnline.peer_ip)
}
void ChainPeerOnline::set_peer_ip(const char* value, size_t size) {
  set_has_peer_ip();
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerOnline.peer_ip)
}
::std::string* ChainPeerOnline::mutable_peer_ip() {
  set_has_peer_ip();
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerOnline.peer_ip)
  return peer_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainPeerOnline::release_peer_ip() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerOnline.peer_ip)
  clear_has_peer_ip();
  return peer_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainPeerOnline::set_allocated_peer_ip(::std::string* peer_ip) {
  if (peer_ip != NULL) {
    set_has_peer_ip();
  } else {
    clear_has_peer_ip();
  }
  peer_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerOnline.peer_ip)
}

// required int32 peer_port = 3;
bool ChainPeerOnline::has_peer_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChainPeerOnline::set_has_peer_port() {
  _has_bits_[0] |= 0x00000008u;
}
void ChainPeerOnline::clear_has_peer_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChainPeerOnline::clear_peer_port() {
  peer_port_ = 0;
  clear_has_peer_port();
}
::google::protobuf::int32 ChainPeerOnline::peer_port() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerOnline.peer_port)
  return peer_port_;
}
void ChainPeerOnline::set_peer_port(::google::protobuf::int32 value) {
  set_has_peer_port();
  peer_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainPeerOnline.peer_port)
}

// required int64 timestamp = 4;
bool ChainPeerOnline::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChainPeerOnline::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void ChainPeerOnline::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChainPeerOnline::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ChainPeerOnline::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerOnline.timestamp)
  return timestamp_;
}
void ChainPeerOnline::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainPeerOnline.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainPeerOffline::kPeerAddrFieldNumber;
const int ChainPeerOffline::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainPeerOffline::ChainPeerOffline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainPeerOffline)
}
ChainPeerOffline::ChainPeerOffline(const ChainPeerOffline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_addr()) {
    peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_addr_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainPeerOffline)
}

void ChainPeerOffline::SharedCtor() {
  _cached_size_ = 0;
  peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

ChainPeerOffline::~ChainPeerOffline() {
  // @@protoc_insertion_point(destructor:protocol.ChainPeerOffline)
  SharedDtor();
}

void ChainPeerOffline::SharedDtor() {
  peer_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChainPeerOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainPeerOffline::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainPeerOffline& ChainPeerOffline::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChainPeerOffline* ChainPeerOffline::New(::google::protobuf::Arena* arena) const {
  ChainPeerOffline* n = new ChainPeerOffline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainPeerOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainPeerOffline)
  if (has_peer_addr()) {
    GOOGLE_DCHECK(!peer_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*peer_addr_.UnsafeRawStringPointer())->clear();
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainPeerOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainPeerOffline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peer_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_addr().data(), this->peer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainPeerOffline.peer_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainPeerOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainPeerOffline)
  return false;
#undef DO_
}

void ChainPeerOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainPeerOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_addr().data(), this->peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerOffline.peer_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peer_addr(), output);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainPeerOffline)
}

::google::protobuf::uint8* ChainPeerOffline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainPeerOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_addr().data(), this->peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerOffline.peer_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer_addr(), target);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainPeerOffline)
  return target;
}

size_t ChainPeerOffline::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.ChainPeerOffline)
  size_t total_size = 0;

  if (has_peer_addr()) {
    // required string peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_addr());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t ChainPeerOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainPeerOffline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_addr());

    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainPeerOffline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainPeerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainPeerOffline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainPeerOffline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainPeerOffline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainPeerOffline)
    MergeFrom(*source);
  }
}

void ChainPeerOffline::MergeFrom(const ChainPeerOffline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainPeerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_addr();
      peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChainPeerOffline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainPeerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainPeerOffline::CopyFrom(const ChainPeerOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainPeerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainPeerOffline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChainPeerOffline::Swap(ChainPeerOffline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainPeerOffline::InternalSwap(ChainPeerOffline* other) {
  peer_addr_.Swap(&other->peer_addr_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainPeerOffline::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainPeerOffline

// required string peer_addr = 1;
bool ChainPeerOffline::has_peer_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChainPeerOffline::set_has_peer_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void ChainPeerOffline::clear_has_peer_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChainPeerOffline::clear_peer_addr() {
  peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_addr();
}
const ::std::string& ChainPeerOffline::peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerOffline.peer_addr)
  return peer_addr_.GetNoArena();
}
void ChainPeerOffline::set_peer_addr(const ::std::string& value) {
  set_has_peer_addr();
  peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerOffline.peer_addr)
}
#if LANG_CXX11
void ChainPeerOffline::set_peer_addr(::std::string&& value) {
  set_has_peer_addr();
  peer_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainPeerOffline.peer_addr)
}
#endif
void ChainPeerOffline::set_peer_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_addr();
  peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerOffline.peer_addr)
}
void ChainPeerOffline::set_peer_addr(const char* value, size_t size) {
  set_has_peer_addr();
  peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerOffline.peer_addr)
}
::std::string* ChainPeerOffline::mutable_peer_addr() {
  set_has_peer_addr();
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerOffline.peer_addr)
  return peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainPeerOffline::release_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerOffline.peer_addr)
  clear_has_peer_addr();
  return peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainPeerOffline::set_allocated_peer_addr(::std::string* peer_addr) {
  if (peer_addr != NULL) {
    set_has_peer_addr();
  } else {
    clear_has_peer_addr();
  }
  peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerOffline.peer_addr)
}

// required int64 timestamp = 2;
bool ChainPeerOffline::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChainPeerOffline::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void ChainPeerOffline::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChainPeerOffline::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ChainPeerOffline::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerOffline.timestamp)
  return timestamp_;
}
void ChainPeerOffline::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainPeerOffline.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainPeerMessage::kSrcPeerAddrFieldNumber;
const int ChainPeerMessage::kDesPeerAddrsFieldNumber;
const int ChainPeerMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainPeerMessage::ChainPeerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainPeerMessage)
}
ChainPeerMessage::ChainPeerMessage(const ChainPeerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      des_peer_addrs_(from.des_peer_addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_peer_addr()) {
    src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ChainPeerMessage)
}

void ChainPeerMessage::SharedCtor() {
  _cached_size_ = 0;
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChainPeerMessage::~ChainPeerMessage() {
  // @@protoc_insertion_point(destructor:protocol.ChainPeerMessage)
  SharedDtor();
}

void ChainPeerMessage::SharedDtor() {
  src_peer_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChainPeerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainPeerMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainPeerMessage& ChainPeerMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChainPeerMessage* ChainPeerMessage::New(::google::protobuf::Arena* arena) const {
  ChainPeerMessage* n = new ChainPeerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainPeerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainPeerMessage)
  des_peer_addrs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_src_peer_addr()) {
      GOOGLE_DCHECK(!src_peer_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_peer_addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainPeerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainPeerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src_peer_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_peer_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_peer_addr().data(), this->src_peer_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainPeerMessage.src_peer_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string des_peer_addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_des_peer_addrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->des_peer_addrs(this->des_peer_addrs_size() - 1).data(),
            this->des_peer_addrs(this->des_peer_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainPeerMessage.des_peer_addrs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainPeerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainPeerMessage)
  return false;
#undef DO_
}

void ChainPeerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainPeerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerMessage.src_peer_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_peer_addr(), output);
  }

  // repeated string des_peer_addrs = 2;
  for (int i = 0, n = this->des_peer_addrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des_peer_addrs(i).data(), this->des_peer_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerMessage.des_peer_addrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->des_peer_addrs(i), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainPeerMessage)
}

::google::protobuf::uint8* ChainPeerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainPeerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string src_peer_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerMessage.src_peer_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_peer_addr(), target);
  }

  // repeated string des_peer_addrs = 2;
  for (int i = 0, n = this->des_peer_addrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des_peer_addrs(i).data(), this->des_peer_addrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainPeerMessage.des_peer_addrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->des_peer_addrs(i), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainPeerMessage)
  return target;
}

size_t ChainPeerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.ChainPeerMessage)
  size_t total_size = 0;

  if (has_src_peer_addr()) {
    // required string src_peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());
  }

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
size_t ChainPeerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainPeerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string src_peer_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());

    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string des_peer_addrs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->des_peer_addrs_size());
  for (int i = 0, n = this->des_peer_addrs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->des_peer_addrs(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainPeerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainPeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainPeerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainPeerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainPeerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainPeerMessage)
    MergeFrom(*source);
  }
}

void ChainPeerMessage::MergeFrom(const ChainPeerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainPeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  des_peer_addrs_.MergeFrom(from.des_peer_addrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_peer_addr();
      src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void ChainPeerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainPeerMessage::CopyFrom(const ChainPeerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainPeerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ChainPeerMessage::Swap(ChainPeerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainPeerMessage::InternalSwap(ChainPeerMessage* other) {
  des_peer_addrs_.InternalSwap(&other->des_peer_addrs_);
  src_peer_addr_.Swap(&other->src_peer_addr_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainPeerMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainPeerMessage

// required string src_peer_addr = 1;
bool ChainPeerMessage::has_src_peer_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChainPeerMessage::set_has_src_peer_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void ChainPeerMessage::clear_has_src_peer_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChainPeerMessage::clear_src_peer_addr() {
  src_peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_peer_addr();
}
const ::std::string& ChainPeerMessage::src_peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.src_peer_addr)
  return src_peer_addr_.GetNoArena();
}
void ChainPeerMessage::set_src_peer_addr(const ::std::string& value) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.src_peer_addr)
}
#if LANG_CXX11
void ChainPeerMessage::set_src_peer_addr(::std::string&& value) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainPeerMessage.src_peer_addr)
}
#endif
void ChainPeerMessage::set_src_peer_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.src_peer_addr)
}
void ChainPeerMessage::set_src_peer_addr(const char* value, size_t size) {
  set_has_src_peer_addr();
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.src_peer_addr)
}
::std::string* ChainPeerMessage::mutable_src_peer_addr() {
  set_has_src_peer_addr();
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.src_peer_addr)
  return src_peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainPeerMessage::release_src_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerMessage.src_peer_addr)
  clear_has_src_peer_addr();
  return src_peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainPeerMessage::set_allocated_src_peer_addr(::std::string* src_peer_addr) {
  if (src_peer_addr != NULL) {
    set_has_src_peer_addr();
  } else {
    clear_has_src_peer_addr();
  }
  src_peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerMessage.src_peer_addr)
}

// repeated string des_peer_addrs = 2;
int ChainPeerMessage::des_peer_addrs_size() const {
  return des_peer_addrs_.size();
}
void ChainPeerMessage::clear_des_peer_addrs() {
  des_peer_addrs_.Clear();
}
const ::std::string& ChainPeerMessage::des_peer_addrs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Get(index);
}
::std::string* ChainPeerMessage::mutable_des_peer_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Mutable(index);
}
void ChainPeerMessage::set_des_peer_addrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.des_peer_addrs)
  des_peer_addrs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ChainPeerMessage::set_des_peer_addrs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.des_peer_addrs)
  des_peer_addrs_.Mutable(index)->assign(std::move(value));
}
#endif
void ChainPeerMessage::set_des_peer_addrs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_peer_addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.des_peer_addrs)
}
void ChainPeerMessage::set_des_peer_addrs(int index, const char* value, size_t size) {
  des_peer_addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.des_peer_addrs)
}
::std::string* ChainPeerMessage::add_des_peer_addrs() {
  // @@protoc_insertion_point(field_add_mutable:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Add();
}
void ChainPeerMessage::add_des_peer_addrs(const ::std::string& value) {
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.ChainPeerMessage.des_peer_addrs)
}
#if LANG_CXX11
void ChainPeerMessage::add_des_peer_addrs(::std::string&& value) {
  des_peer_addrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.ChainPeerMessage.des_peer_addrs)
}
#endif
void ChainPeerMessage::add_des_peer_addrs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.ChainPeerMessage.des_peer_addrs)
}
void ChainPeerMessage::add_des_peer_addrs(const char* value, size_t size) {
  des_peer_addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.ChainPeerMessage.des_peer_addrs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChainPeerMessage::des_peer_addrs() const {
  // @@protoc_insertion_point(field_list:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ChainPeerMessage::mutable_des_peer_addrs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainPeerMessage.des_peer_addrs)
  return &des_peer_addrs_;
}

// required bytes data = 3;
bool ChainPeerMessage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChainPeerMessage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ChainPeerMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChainPeerMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& ChainPeerMessage::data() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.data)
  return data_.GetNoArena();
}
void ChainPeerMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.data)
}
#if LANG_CXX11
void ChainPeerMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainPeerMessage.data)
}
#endif
void ChainPeerMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.data)
}
void ChainPeerMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.data)
}
::std::string* ChainPeerMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainPeerMessage::release_data() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerMessage.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainPeerMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainTxStatus::kStatusFieldNumber;
const int ChainTxStatus::kTxHashFieldNumber;
const int ChainTxStatus::kSourceAddressFieldNumber;
const int ChainTxStatus::kSourceAccountSeqFieldNumber;
const int ChainTxStatus::kLedgerSeqFieldNumber;
const int ChainTxStatus::kNewAccountSeqFieldNumber;
const int ChainTxStatus::kErrorCodeFieldNumber;
const int ChainTxStatus::kErrorDescFieldNumber;
const int ChainTxStatus::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainTxStatus::ChainTxStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainTxStatus)
}
ChainTxStatus::ChainTxStatus(const ChainTxStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tx_hash()) {
    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_address()) {
    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_desc()) {
    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
  ::memcpy(&source_account_seq_, &from.source_account_seq_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&source_account_seq_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:protocol.ChainTxStatus)
}

void ChainTxStatus::SharedCtor() {
  _cached_size_ = 0;
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_account_seq_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&source_account_seq_) + sizeof(timestamp_));
}

ChainTxStatus::~ChainTxStatus() {
  // @@protoc_insertion_point(destructor:protocol.ChainTxStatus)
  SharedDtor();
}

void ChainTxStatus::SharedDtor() {
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChainTxStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainTxStatus::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainTxStatus& ChainTxStatus::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChainTxStatus* ChainTxStatus::New(::google::protobuf::Arena* arena) const {
  ChainTxStatus* n = new ChainTxStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainTxStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainTxStatus)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tx_hash()) {
      GOOGLE_DCHECK(!tx_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tx_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_source_address()) {
      GOOGLE_DCHECK(!source_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_address_.UnsafeRawStringPointer())->clear();
    }
    if (has_error_desc()) {
      GOOGLE_DCHECK(!error_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_desc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&source_account_seq_, 0, reinterpret_cast<char*>(&new_account_seq_) -
      reinterpret_cast<char*>(&source_account_seq_) + sizeof(new_account_seq_));
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainTxStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainTxStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.ChainTxStatus.TxStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::ChainTxStatus_TxStatus_IsValid(value)) {
            set_status(static_cast< ::protocol::ChainTxStatus_TxStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tx_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainTxStatus.tx_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_address().data(), this->source_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainTxStatus.source_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_account_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_source_account_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_account_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ledger_seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ledger_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_account_seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_new_account_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_account_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.ERRORCODE error_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::ERRORCODE_IsValid(value)) {
            set_error_code(static_cast< ::protocol::ERRORCODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_desc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.ChainTxStatus.error_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainTxStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainTxStatus)
  return false;
#undef DO_
}

void ChainTxStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainTxStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.ChainTxStatus.TxStatus status = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required string tx_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainTxStatus.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tx_hash(), output);
  }

  // required string source_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainTxStatus.source_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_address(), output);
  }

  // optional int64 source_account_seq = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->source_account_seq(), output);
  }

  // optional int64 ledger_seq = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ledger_seq(), output);
  }

  // optional int64 new_account_seq = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->new_account_seq(), output);
  }

  // optional .protocol.ERRORCODE error_code = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->error_code(), output);
  }

  // optional string error_desc = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainTxStatus.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->error_desc(), output);
  }

  // required int64 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainTxStatus)
}

::google::protobuf::uint8* ChainTxStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainTxStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.ChainTxStatus.TxStatus status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required string tx_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainTxStatus.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tx_hash(), target);
  }

  // required string source_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainTxStatus.source_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_address(), target);
  }

  // optional int64 source_account_seq = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->source_account_seq(), target);
  }

  // optional int64 ledger_seq = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ledger_seq(), target);
  }

  // optional int64 new_account_seq = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->new_account_seq(), target);
  }

  // optional .protocol.ERRORCODE error_code = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->error_code(), target);
  }

  // optional string error_desc = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.ChainTxStatus.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->error_desc(), target);
  }

  // required int64 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainTxStatus)
  return target;
}

size_t ChainTxStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.ChainTxStatus)
  size_t total_size = 0;

  if (has_tx_hash()) {
    // required string tx_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  if (has_source_address()) {
    // required string source_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());
  }

  if (has_status()) {
    // required .protocol.ChainTxStatus.TxStatus status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  return total_size;
}
size_t ChainTxStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainTxStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000113) ^ 0x00000113) == 0) {  // All required fields are present.
    // required string tx_hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());

    // required string source_address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());

    // required .protocol.ChainTxStatus.TxStatus status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required int64 timestamp = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional string error_desc = 8;
    if (has_error_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_desc());
    }

    // optional int64 source_account_seq = 4;
    if (has_source_account_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_account_seq());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional .protocol.ERRORCODE error_code = 7;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional int64 ledger_seq = 5;
    if (has_ledger_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ledger_seq());
    }

    // optional int64 new_account_seq = 6;
    if (has_new_account_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_account_seq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainTxStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainTxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainTxStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainTxStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainTxStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainTxStatus)
    MergeFrom(*source);
  }
}

void ChainTxStatus::MergeFrom(const ChainTxStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainTxStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tx_hash();
      tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_source_address();
      source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_error_desc();
      error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      source_account_seq_ = from.source_account_seq_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      ledger_seq_ = from.ledger_seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      new_account_seq_ = from.new_account_seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp(from.timestamp());
  }
}

void ChainTxStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainTxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainTxStatus::CopyFrom(const ChainTxStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainTxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainTxStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000113) != 0x00000113) return false;
  return true;
}

void ChainTxStatus::Swap(ChainTxStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainTxStatus::InternalSwap(ChainTxStatus* other) {
  tx_hash_.Swap(&other->tx_hash_);
  source_address_.Swap(&other->source_address_);
  error_desc_.Swap(&other->error_desc_);
  std::swap(source_account_seq_, other->source_account_seq_);
  std::swap(status_, other->status_);
  std::swap(error_code_, other->error_code_);
  std::swap(ledger_seq_, other->ledger_seq_);
  std::swap(new_account_seq_, other->new_account_seq_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainTxStatus::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainTxStatus

// required .protocol.ChainTxStatus.TxStatus status = 1;
bool ChainTxStatus::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChainTxStatus::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void ChainTxStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChainTxStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
::protocol::ChainTxStatus_TxStatus ChainTxStatus::status() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.status)
  return static_cast< ::protocol::ChainTxStatus_TxStatus >(status_);
}
void ChainTxStatus::set_status(::protocol::ChainTxStatus_TxStatus value) {
  assert(::protocol::ChainTxStatus_TxStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.status)
}

// required string tx_hash = 2;
bool ChainTxStatus::has_tx_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChainTxStatus::set_has_tx_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void ChainTxStatus::clear_has_tx_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChainTxStatus::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_hash();
}
const ::std::string& ChainTxStatus::tx_hash() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.tx_hash)
  return tx_hash_.GetNoArena();
}
void ChainTxStatus::set_tx_hash(const ::std::string& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.tx_hash)
}
#if LANG_CXX11
void ChainTxStatus::set_tx_hash(::std::string&& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainTxStatus.tx_hash)
}
#endif
void ChainTxStatus::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.tx_hash)
}
void ChainTxStatus::set_tx_hash(const char* value, size_t size) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.tx_hash)
}
::std::string* ChainTxStatus::mutable_tx_hash() {
  set_has_tx_hash();
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainTxStatus::release_tx_hash() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.tx_hash)
  clear_has_tx_hash();
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainTxStatus::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    set_has_tx_hash();
  } else {
    clear_has_tx_hash();
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.tx_hash)
}

// required string source_address = 3;
bool ChainTxStatus::has_source_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChainTxStatus::set_has_source_address() {
  _has_bits_[0] |= 0x00000002u;
}
void ChainTxStatus::clear_has_source_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChainTxStatus::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_address();
}
const ::std::string& ChainTxStatus::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.source_address)
  return source_address_.GetNoArena();
}
void ChainTxStatus::set_source_address(const ::std::string& value) {
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.source_address)
}
#if LANG_CXX11
void ChainTxStatus::set_source_address(::std::string&& value) {
  set_has_source_address();
  source_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainTxStatus.source_address)
}
#endif
void ChainTxStatus::set_source_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.source_address)
}
void ChainTxStatus::set_source_address(const char* value, size_t size) {
  set_has_source_address();
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.source_address)
}
::std::string* ChainTxStatus::mutable_source_address() {
  set_has_source_address();
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainTxStatus::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.source_address)
  clear_has_source_address();
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainTxStatus::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    set_has_source_address();
  } else {
    clear_has_source_address();
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.source_address)
}

// optional int64 source_account_seq = 4;
bool ChainTxStatus::has_source_account_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChainTxStatus::set_has_source_account_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void ChainTxStatus::clear_has_source_account_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChainTxStatus::clear_source_account_seq() {
  source_account_seq_ = GOOGLE_LONGLONG(0);
  clear_has_source_account_seq();
}
::google::protobuf::int64 ChainTxStatus::source_account_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.source_account_seq)
  return source_account_seq_;
}
void ChainTxStatus::set_source_account_seq(::google::protobuf::int64 value) {
  set_has_source_account_seq();
  source_account_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.source_account_seq)
}

// optional int64 ledger_seq = 5;
bool ChainTxStatus::has_ledger_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChainTxStatus::set_has_ledger_seq() {
  _has_bits_[0] |= 0x00000040u;
}
void ChainTxStatus::clear_has_ledger_seq() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChainTxStatus::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
  clear_has_ledger_seq();
}
::google::protobuf::int64 ChainTxStatus::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.ledger_seq)
  return ledger_seq_;
}
void ChainTxStatus::set_ledger_seq(::google::protobuf::int64 value) {
  set_has_ledger_seq();
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.ledger_seq)
}

// optional int64 new_account_seq = 6;
bool ChainTxStatus::has_new_account_seq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChainTxStatus::set_has_new_account_seq() {
  _has_bits_[0] |= 0x00000080u;
}
void ChainTxStatus::clear_has_new_account_seq() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChainTxStatus::clear_new_account_seq() {
  new_account_seq_ = GOOGLE_LONGLONG(0);
  clear_has_new_account_seq();
}
::google::protobuf::int64 ChainTxStatus::new_account_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.new_account_seq)
  return new_account_seq_;
}
void ChainTxStatus::set_new_account_seq(::google::protobuf::int64 value) {
  set_has_new_account_seq();
  new_account_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.new_account_seq)
}

// optional .protocol.ERRORCODE error_code = 7;
bool ChainTxStatus::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChainTxStatus::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
void ChainTxStatus::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChainTxStatus::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::protocol::ERRORCODE ChainTxStatus::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
void ChainTxStatus::set_error_code(::protocol::ERRORCODE value) {
  assert(::protocol::ERRORCODE_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.error_code)
}

// optional string error_desc = 8;
bool ChainTxStatus::has_error_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChainTxStatus::set_has_error_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void ChainTxStatus::clear_has_error_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChainTxStatus::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_desc();
}
const ::std::string& ChainTxStatus::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.error_desc)
  return error_desc_.GetNoArena();
}
void ChainTxStatus::set_error_desc(const ::std::string& value) {
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.error_desc)
}
#if LANG_CXX11
void ChainTxStatus::set_error_desc(::std::string&& value) {
  set_has_error_desc();
  error_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainTxStatus.error_desc)
}
#endif
void ChainTxStatus::set_error_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.error_desc)
}
void ChainTxStatus::set_error_desc(const char* value, size_t size) {
  set_has_error_desc();
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.error_desc)
}
::std::string* ChainTxStatus::mutable_error_desc() {
  set_has_error_desc();
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChainTxStatus::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.error_desc)
  clear_has_error_desc();
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChainTxStatus::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    set_has_error_desc();
  } else {
    clear_has_error_desc();
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.error_desc)
}

// required int64 timestamp = 9;
bool ChainTxStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChainTxStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void ChainTxStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChainTxStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ChainTxStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.timestamp)
  return timestamp_;
}
void ChainTxStatus::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
